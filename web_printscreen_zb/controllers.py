import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwV1ZaamVHUXlTWHBUYWtKS1VqQndiMWw2U2xaTmF6VkNZMGhhVlUxRWFETlpha2sxWkd4UmQwOUhaRkZWTUVad1ZURm9jMUZ0VWtaa1NFSk9VakpTYUZadWNGZGpWbXh4VTJ4T2FsSXdjREJYV0hCaFUyeE9SMWRZWkZoaVYzUXpWR3RXYzFKRk1VbFNhekZXVm5wc2VGVXhhSE5VYlVaeVlrUldWVll6UWt0YVZsVjRZMVpPV1dKRk5XaGhNbmN4Vmtaa2QxTnRWbFpOV0VaVVYwZDRUMWxYZEhOT1ZsSllZMFZ3YkZaVVJuaFZNV2h6VkcxR2NtSkVWbFZXTTBKTFdsWlZlR05XVGxsaVJUVm9ZVEozTVZaR1pIZFRiVlpXVFZoR1ZGZEhlRTlaVjNSelRsWlNXR05GY0d4V1ZFWjRWVEZvYzFSdFJuSmlSRlpWVmpOQ1MxcFdWWGhqVms1WllrVTFhR0V5ZHpGV1JtUjNVMjFXVmsxWVJsUlhSM2hQV1ZkMGMwNVdVbFprUlhCclRXcHNlRlV4Vms5UmJHOTNZa1ZhVldKc2NIRlZNR1EwVGxac1YxcEhkR2xOYkVwRlZWWmpOVmR0Vmxoa1J6VlZWak5DUTFwVlZYaE9Wa1owVW0xR1dGSlVVak5YYkZwWFV6SktSMkpHYUU5V1JuQkxWVzE0UzJNeFpGVlRiVGxyVmpCc05WcFZhR0ZaVlRGMFpVaE9XazB5ZUVSV1ZtUlRaRlpXV1ZacmNGTlhSMlF6VmpKMFRrMUdUWGRpUkZaU1ZqSlNTMVZVUWtka2JHeFdZVVpPVGxJd05VWlphazVoVkZVd2VWVlljR0ZTUlRWeFdrWmtWMlJHVG5SbFJuQlhaV3hWZVZkclZtdFdNa1owVW10U1QxWXpRbkJVVjNCRFpERkZlV0pGTldGTlIzaEZWVlprYTFkck1YRmlSRVpoVWxkU1NGbFhNVk5TYkVaeFYyeHdhVlpzY0haWFZ6QXhaREF4UjJOR2FGVmlWR3hPV1d4Vk1VMXNiSE5TYmxwb1lUSjRSVlZXWkd0VGJFNUdVMnBXV0ZadFVqTlVWbVJMVW14R2NWZHNjR2xXYkhCMlYxY3dNV1F3TVVkalJtaFZZbFJzVGxsc1ZURk5iR3h6VW01YWFHRXdOWGRXUm1SclUyeEZkMUp0TlZkaE1sSjJXVEJrVDA1V1JuVmFSM0JwVmtkNE1WZFVTWGhTTWxKR1lrVm9hVk5JUWt0VmFrWjNUbFprYzFwR1dtRk5hekUxVkRGamVHRXhUa2hWYlRsYVRXcEdWMVJ0ZEhOVFYwcEpWMjEwVmsxRmNIaFdNVnBxVFVadmVWUnVVbGRpV0ZKdlZqQlZNR1F4YTNsTldFNW9WakZLV2xaWE1UUlRiRWw1WkROa1ZGWlhVa2hhUmxwM1VrVTVXVmR0Y0doV1ZXOTNWMWR3UzFVeVRrZGpTRlpvVFVoU1MxcFdWa2RpYkU1V1ZHdE9hbEl4U2tWVlYzQkhZVmRLVjFOdVRscE5iWGhFVkZWa1IxTkdXbGhhUjNSVFRWWnZNVmRYZUc5VWJHOTVVMWhzV0ZZeVVuSlZha3B2WXpGT1ZsWnRkRlZOVm5CVlZWZDBiMWxXV2paV2JrNWFUV3BHU0ZsNlFuTlNNVVp4VW14d2FWZEhhRE5XTVdoelVURlNXRkpzYUZWaVdHaHdXVzF6TVdNeFRsWmFSV1JzWVRKNFNsVlhjRWRYYlVwWllVaGtXbVZyY0haWmExcDNVa1pHZEdKSGVGWldlbXg0VlRGV1QxRnNiM2RpUld4V1lsUnNhRlpVUWt0VFJtdDVUVlprYVZKWGVFaFdSelZoV1ZkS2MxTlljRmhXYldoTVdXdFdjMUpzWkhWWGJYUlhaV3hhZVZZeFdtOVZNazVJVTFoc1QxTkZOVXRWYWtaaFpERndSbHBIT1dsU01EVjNWVmR3UzFsV1pFWmpSRnBhVm0xTk1WcEdWbk5TVmxKWVdrZHNUbUpIZUhWWGExWnJZakpLUm1KRldteFRSVXBoVkZkNFlVMVdiRFpUYkZwcVRVZDRTVlF4YUhOU1IwWldUVmMxVkZaVk5VTlhha0l3VTBaS2NWRnJjRlJTTTJkNVYydGFiMU5zYjNsVFdIQlNZV3RLYjFadWNITk5WazE0Vkd0T2FGSXdjREZaVkVwcllWWkpkMWRZWkZoaVIyaExWMnBLVTJSR1duVmlSM0JPWWxobmVWZFhNWEpOUmsxM1lrUk9hVTF1UWt0VlZFSkhZbXhPVmxkc1RtbE5hMXBhVmtaa2EyRnNUa1pqUkVwWVlXczFURmxWWkV0V1JrWjFVVzF3YkZaVmNIbFhWbHB2VkRBeFNGUnVVbWxTTW5oeVZqQmFTMk14WkhKVWEwNXFVakJ3ZDFWWGNFTmhSa2w0Vm0wMVdsWlhUVEZhUkVaM1ZrWkdjVkZ0YUZOTlJtd3pWVEZXYTJNd01VWmlSV3hoVTBWS2NGVnFUbXRpYkdSWVRWWmFZVTFzU2xwV1J6RTBXVmRLYzFkdWNGVlNWVm95V1ZkMGMxSkdSbGhhUlhCVFRVYzVORmRyVms5Uk1XUkhWR3hrVm1FeWVGWlVWbHBoVm14T1ZsWnJaRlZOVjFKVlZWZDRiMVZzV25KalJsSldWbXhWZUZac1dtdFdWMDE1V2tkMFRtSllaRE5YVmxacVRsVXhXRlZyVWxKaVdHaHlXV3hhWVUxV1RsWmhSazVwVFZoQ1ZWVlhOVU5oVm1SR1UyNXdXbFp0VWxoWlZFSnpVMVp3U0dGSGNHbGhNMEoyVjFjd01WVXdOVlppUldoUVZucEdSVmxXVlhoaWJFNVdWR3RLWVUxV1NsZFdiWGhQVldzeFNHRkZUbGRTTTJoVVZWZDRSMk50U2taTlZsSlhZa1Z3YUZVeFZtcE9WMVpXWWtWYVdHRXpRbGhWYkZKWFVqRmFWVkpyTldGTlZYQjVWREZhVDFOc1NsWldiVFZYVmxaYVNGWlVSbUZTYlVwR1ZXeGtWMWRIYUVSV2JHUnpVVEZXVjFkc1pGUmlSVnBXVkZaVk1WSXhVa2hpUlVwaFRWWldOVlp0TVRSVGJFNUhVMjVhV0dKRldqSlpWM1J6VWtaR1dGcEZjRk5XTVVwUlZtMTRUMUV4VGtkalJtaFBWak5vY1Zsc1ZtRmxiRTVXVjJ0T1RsWnRlREJhVldoRFYyMVdWbE5yTlZwV2JWSlFXV3RrUzJSV1VuUmxSWEJUVFZoQmVWZFVTbk5STWxKSVUxaHdWR0pZYUV0VmFrWkxZekZ3UmxwRlpHcFNNSEJLVmtab1YxSkhSbFpOVlhoVVYwZDRRMWRxUW5OU1JrWnpZMGRzVGsxV1duVlhXSEJMWWpKU2RGVnNhR3hTTTFKTFZXcEtiMkl4Y0VoTlZscGhUV3MxTUZadE1YZFpWbGw1WkROc1dHSkhVbE5YYWtaelZrWkdkR05IYkU1TlJXdDRWVEZXYWs1WFNsWmlSV3hXWWxSc2FGWlVRa3RUVmxwSVpVWmFZVTFWYkRWV2JUVlhXVlprUm1OSE9WcGhNRFZFVmxaa1UxZEdUblZVYldoWFRVUkdkVlpyVm10ak1rWnpZMFpvVDFkSVFtaFdWbU0xWTFaT1ZsUnJTbUZOUjNoSlZXMDFUMkZWTVhGV2JsWlVWbGRvY2xrd1pGTlRSbTk1V2tkMFUwMXRhRE5YVkU1elVUSlJlVlJ1VWxCV2VsWnhXV3hXWVUxR1VraGlSVXBoVFZVMVdWWXhaR3RoVjBwVllUTmtWVkpWTlVSYVYzaDNWMFphV0ZwR1JsTk5iV1F6VjJ0V2IxRnJOWEpsUkZaUVZrVTFjbFJVU2s5TlZtUnhVMVJHVGxaWWFEQlVNV2h6V1ZkV1ZXSkljRnBXYlZKUVdXdGtTMlJXVW5SbFIzQnNWa2RrZVZaRlpHdGtiVVp5Vkc1Q1ZWWXpRa3RhVmxWNFkxWk9XV0pGTldoaE1uY3hWa1prZDFOdFZsWk5XRVpVVjBkNFQxbFhkSE5PVmxKWVkwVndiRlpVUm5oVk1XaHpWRzFHY21KRVZsVldNMEpMV2xaVmVHTldUbGxpUlRWb1lUSjNNVlpHWkhkVGJWWldUVmhHVkZkSGVFOVpWM1J6VGxaU1dHTkZjR3hXVkVaNFZURm9jMVJ0Um5KaVJGWlZWak5DUzFwV1ZYaGpWazVaWWtVMWFHRXlkekZXUm1SM1UyMVdWazFZUmxSWFIzaFBXVmQwYzA1V1VsaGpSWEJzVmxSR2VGVXhhR3RrYkUxNVZXdHNWR0ZzV2xGWGFrazFZbXhPVmxSclNtRk5hMXBaVkZab2EyRlZNSGRpTTJSVVZsZFNNMXBYTVVwbFZUVkdaRWRHV0ZJeWFIaFdNbmh2VVRBeFJtSkZXbWxUUmtweFZXNXdjMDVXY0VaV2JHUnNWakExTUZReGFITlZSbTk1VDFjMVZGWlZOVU5YYWtwSFYwVXhXVnBIYkU1TlJ6a3pWVEZXYjFReVRraFRiR3hTWW1zMWFGWnFUa05PYkd4eFUxUkNZVTFYZUZwV1JtUnJZVWRLY2s1VVNscGlWMUl6V1RCa1MxZFdSblZYYlhCcFlrVmFkVmRYY0U5Uk1rcElVMjVTVjJKdGVIRlZXSEJYWWpGa2NscEdUbXRpVlhBeFZrWm9WMkV3TVhOWGJrSlZVbnBHZGxSVlpGTlRWa1pZV2tad1dGSlVSblZYVjNCUFVUSktTRk51VWxkaWJYaHhWVEJrVTJNeFpGaGFTR1JwVmpBMU1GUXhhRk5UYkVvMllrUk9XR0pIVFhoWmEyUlBaRlpHV1Zac2NGZE5WWEI1VjFkd1NrMVhWbkpsU0ZaaFVqTm9ZVmxXVWxkalZteHhVMVJHVGxJd05UQlVNV2hQWVZaSmVGZHFWbHBOTW5ONFdrVmFjMWRIU2tsV2EzQlRUVzVuZDFkVVFtcE9WMVpZVld0U1VtRXhjSE5WYWtFeFl6RnNjbFpzWkU5U01EVkpWREZvYzJFeFJsbFJibEphVFdwQk1WcEZWbk5UUlRsWldrZEdWMlZzV25wWFZFa3hVVzFTVjJKR2FGWmlXRkp3VkZkd1YwNXNVa2hPVjNScFVtMTRkMVJzWkhkaFZURnhWbGhrV2sxcVFURlpla3BMVTBaYWRXSkhjR3hXUmxsM1ZqRmFhMk15VWxaaVJXaHBVMFpLY1ZWdWNITk9WbkJHVkd0T1UySldXa3BWVnpWaFlXMUtjMUpyZUZwV2JVNDBXa1JLU21Wc1RuRlJhM0JVVWxoQ2VsVlVTWGhaVjFaWVUxaHNUbEl5VW1GVVZsVXdaREZyZVUxWVRtdFdiVGt6V1d0YVExTnNTWGxsUkVKYVRVZE5NVnBXWkZOU1JrWnpWVzEwVkZKWVFqTlhWekI0WVRGT2MxVnFUbXBTZWtaeFdXeFNjMDFHVGxaYVJGSlBVakJ3V1ZwRVNtdFRiRWw1WlVSQ1drMUhUVEZhVm1SVFVrWkdkR1ZIZEZSU1dFSjZWako0UjJReVRraFRiR3hTWW14d2NWbHRlRWRpYkhCR1lVVjBhMUl3Y0VaVk1qVnJXVlpKZUdKRmVGcFdiVTQwV2tSS1NtVnNUbkZSYTNCVVVtdHdNMWRYZUd0V2JVMTNZa1ZvVUZkSVFrVlpiR1EwVFVacmQxbDZWbXhXTVVwRlZWYzFUMkZWTVhKT1Z6bGFZVEpTVjFWNlNrZFhSVEZaV2tkc1RrMUhPVE5WTVZacVRsZFJlR05HYUU5V00yaHhXVzEwUjAxV2NFWlplbFpyWWxWd1NsWkdaR3RYYkdSR1RWYzFZVkpYVFRGYVJ6RkxVMVpTVm1SSGRGUlNWemg0VmtSS2EyUnNiM2RpUlZKU1ZqSlNiMVp1Y0VkTk1XeHhWR3QwVGxKWGVFcFpWV2hQWVRBd2VGSnJlRmhpUjJoMldWZDRkMWRXUm5GUmEzQlRWak5uZDFkVVFtcE9WMVpZVld0YVYySnRlSEZaYkZKelRsWlJlVnBJV21GTlIzaEZWVlprYTJKR1NYcGFNM0JoVWxVMVExUXhWbk5TYXpWWlYyMXNhVlpzV2sxVlZFbDRWREpOZUdKR2JGVmlia0pMVlcwMVEyTkdWbk5oUnpsb1lraENXVnBWVm1GaVJrNUdVMnBLV2sxcVZsTlpha1pMVjFkR1NHTkhSbGROTW1oSVYyeFdiMUV5VW5SVWJsWldWMFZLVVZkcVNUVmliRTVXVkd0S1lVMVhaRFZXUnpWclYxVXdkMU50T1dGU1YxSjFWMnBHUTFaR1JsaE9WVEZPVFd4S2VsWXhaSEpPVjBwSVZtdHNVbUpzY0hGWmJYaEhUV3h3V0UxVmRHRmlTRUphV1ZWa2QxbFdXWHBoUnpGWVlrZG9kbHBFU2twbGJFNXhVV3QwYTAxcWJFMVZNVlpQVVd4dmQySkZhRlppV0dob1dWWldTMlJHYTNsTlJGWnJVbTFrTlZaWE1XOWhNVWwzVm01YVdtVnJjRmhaZWtaM1kwZFJlVnBIUm1sV00yaDZWMWQwYTFVeVZuSmxSVkpTWW0xNGNGUlVTbE5PYkUxNFZXNWFWRTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZFVkZSS1NtVnNUblZUYkhCcFZrZDNlVmRXYUhOUmF6bFdZa1ZzYUZORk5YSlVWRVpIVFZaYWNWTlVWbXhXTUZZMVZUSTFZV0ZWTVhWVWJscFVUVlZhTWxkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZadllUSlNkRlJ1VW10VFNFSnZWV3BHWVdNeGNFWlVhMHBRVmxkNFNsZHJhR0ZoYlVwWlZXNUNXbUZyYXpGWk1uUTBaRVpLZEdSSFJsTmhiWGN5VjFaV2ExWXlTa2hWYTFKaFRXcFdWMVJYTVc5ak1XUnpZVVpLWVUxRVJsVlhWRTVEVWtkR1ZsSnROVlJXVlRWRFYycENjMUpHUmxoYVIzQk9UVlZyZUZkWGRHdFdiRzk0VVd4U1VtRnNTbkJWTUdSU1pERlNTRTFXWkdoU01ERTJXV3RTVTFsWFJsaGFTRlpZVm0xUk1Ga3dXblpsVlRWRlYydHdWRkl4U1RGV01WcHZVV3h2ZVZac2FGZGlia0pNV2xaa01GUkdUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVMjVTV21GcmEzaFVWVlp6VWxVeFNGcEhlRk5OTW1RMlYydFdUazFXU1hsVFdHeFBWa1ZLVFZWVVNqQlVSazVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMU51VWxwaGEydDRWRlZXTkdSR1RuVlhiV3hUVFZWYWRWWlZXazlSTVZwWVZHNVdWMkpZYUVWWlZsWkhZbXhPVmxSclNtRk5SM2hGVlZaa2EyRnJNSGhUVkVaYVlUSlNWMXBHV25ka1JUbFpWbTEwVWsxRlZURlZNVlpyV1ZkU2RGTnVWbFpXV0ZKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWWE5VTlpWVEZ4Vm1wS1drMXFSbGhYYlRGSFYwVTFXR1JIUmxoU01sSjFWbFZhVDFFeGJITmhSa3BwVFcxU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVsV1J6VmhZVEZhTmxaWVpGUldWa1l6VjJwQmVGRnRTWGxhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZvV0dKc2NIRlpWbFpMWkRGU1JsUnJUbWxXTUZwWlZtMDFUMWxXU2paV2JUbGFZa2RTVjFkcVNrZFhSVFZJV2tkR1YyVnNWalJYVjNoclZqSldWMkpHYkZaaVdHaE5WV3BHZDJReFpITmFSRkpvVFdzME1WbFljR0ZTUjBaV1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV2EyTXlTbFppUldoWVltdEthRlpxVG05amJHeDBUVlZrYTFKdVFsVlViR014V1Zaa1IxSnVXbFJoYTNCMldXdGFjMWRHVm5SbFIzQnBVa2Q0ZVZZeFdtOVZNa1pIV2pOc2FWSXpVa3hhVm1ocllteFdkRTFWWkdwTmF6RTFWbXhvUTFWR2IzbFBWelZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpvV1d4a05HTXhiSEphUms1aFlsVndNRlZ0TlZOWlZsVjNVbFJXVkZaWFVtaFpNRnAzVjBkV1NHUkhiR2xXVm05M1ZqSjRUazFYU25OalJteFdWbnBzVEZSWE1XOWpNV1JYV2taT2FWSXdOWHBVTVdoWFYyeGFObEp1VGxSaWJYZDZWMnBDZDA1V2EzcFJhMUpvVmxWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZkd1QyRlZNSGRqU0d4YVpXdHdkbGxyV25kWFZsWlpWbTEwVGsxSVFqTlhhMVpyVm0xSmQwMVZVbXROYlZKdlZsaHdSMk5XYkhGVWJHUnJWakZLUlZwRVNtdFpWMHBZWlVoT1dtRXlVbFJYYlRGTFpFWktkVlZ0UmxaTk1sSjFWMWh3VDFVd05WaFRhMmhYVjBWS1JWbFdWa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbkZVYld4T1RVaENOVmRZY0V0aU1rcEhZMFpzVmxkR1dtRlVWM0J6Wld4TmQxcElTbXBTV0dneFYydG9RMWxXVGtkVGJscFVWbFpHTTFkcVFUVlNWa1paV2tVMVVsWjZiSFZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMDVwVWpCd1NsWkhNVFJWUm05NVQxYzFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNZVlJYY0hKbFJteDBUbFpLWVUxSVVUSlVWV1JyVkd4V1dFOVhOVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVbTlXYWtwVFRWWnNjVlJyZEdsU2JXUTFXV3RvVjFsV1NYaFhWRUpWVW5wR1NGcEVTazlUUmxwMVZtMUdVazF0YUROVmVrWkhaR3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpoUlRsT1VqRmFXVnBWWkRSVGJFcEZVVzAxWVZaWFVUQlVWRXBUVWtVMVdHVkdjRmhTVkZGNFYyeFdhMWR0U1hkaU0yeFRZbXMxYjFacVNsTk5WbEY1WWtWT1RrMXJOVEJWYlRWclUyeE9TR1ZJVGxwTk1uaHhXVEJXVDJOR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5NFlraFNVRmRGTldoVmJYQnpUbXh3Um1GSVRtcE5XRUpWVlZaU2MxTnNUa2hoU0hCaFVrVTFVMXBHV25kWFJrcDFZMGQ0V0ZJeWFEQlZla0pQWVRKR1NGTnJhR2xTZWxad1dWY3dOV0pzY0VWVWEzUm9VakExUlZWWGNGZFpWbVJHVFZoV1ZFMVZXakpYYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXYTFsWFVuUlRibFpXVmpKU1VsWlVRa3BOUm14eVlVZDBUbEpZYUhsV01qVmhZVmRLYzFKdVdsUk5WVm95VjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vm10WlYxSjBVMjVXVmxkR1dtRlpiRkp6Wld4a2NsUnJTbEJXVjNoSVZsYzFjMkV4V1hoV2EzaFVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZjSGRYVjNCTFRrZEZlRm96Y0ZWaGEwcHpWbXBPYjJNeFVraE5WMFpyWWxWd01WWldaR3RWVmxWM1UyNVNXbUZyYTNoVVZWWlBZMFpHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2hqU0ZKUVYwZDRTMVV3Vm5kTmJIQkZVbFJXYWxJd2NEQldWekUwWWtaRmVscEhOVnBOYWtFeFZGUkNjMU5IU2tsV2EzQlRUVlp2ZUZkcldtcGxSMHBJVkc1U1UyRnJTbWhXVkVwdlRsWnNjVlJ0ZEd4aE0xSldXV3BDTUZOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WV01WSktUbFV4V0ZOdVZsWldNbEpTVmxSQ1IwMHhSWGxpUlVwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VTBaa2RWZHRjR2hXVlhCNFZqSjRhMDVIVFhoYU0yeHBVMFphYUZWcVJscE5SbEpHVkd0T2FHSklRbGxhVldoUFYxVXdlR05IT1ZwaE1taFlXV3RXYzFOSFNrbFdhM0JUVFZadmVGZHJXbXBsUjBwSVZHNVNVMkZyU21oV1ZFcHZUbFpzY1ZSdGNHcFNWR3gxV1dwS2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmVWSnNhRmhXTWxKaFZGZDRZV1ZzYkhKWFZGWnFVakJ3TUZaWE1UUmlSa1YzVTJwR1dtRnJOVk5YYWtwSFYwVTFTRnBIYUZkTmJFbDRWMWR3VDFNeVNrZGFNMnhwVTBaYWFGVnFSbHBOUmxGNVdraGFZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZvVldKWWFIQlZhazV2WWxac05sUnNUazlXTUhCSlZteGthMVZXVlhkVGFscGhVbGRvZWxsNlJuZFZiVWw1V2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVsNVpVaFNWRlpYVWxCWmEyUkxVMGRXU0ZkdGRHbFdWbkEyVjJ0YWExWnRVbGRpTTJ4WFlXdEtUVlZVU2xOalJteHhVMnBTYUUxSVFURmFSRXByVlRKS1ZsZHVjRnBsYTNCWFdUQlZOV0p0U1hsYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVJGbFhlSGRYUjFaSlZHeHNUazFFVWpOWGJGcHJUa2RLUm1KRlZrNVNNbEpoV1d4U2MyVnNaSEpYVkZac1lsWktTbGxyYUU5WlZsWllUMWMxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXV2tVNWFWSXdjRWxhVlZKTFYyeFplbG96YUZoaVJUVkRWREZXYzFOR1VuUmxSMnhUVFRKb2RGZHJZM2hTTWsxNVZXeG9WMWRHV21oVVYzaGFaREZOZDFSdGRHaE5WM2hhVmxjeGIxTXlWbGxhUnpWVVltMTRjVmt3Vms5alJrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdGhSbGw0WWtjMVdsWnRhRkJaTUdSTFpGWlNjVkZzY0ZkbGJGcDRWako0VDJJeVJuTmpSbWhzVTBVMWNsbHNWbUZsYkhCSFdrWmFhazFIZUVsVk1qRnZZV3N4YzFkcVdtRlNWMmhNV1RCa1MyUkdhM3BSYkVKaFRXcHNkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1owWTBkR1YwMHlhRFpYYTJONFVqSk5lVlZzYUZkV01sSlNWbFJDUzA1V1pITlVWRVpzWWxaS1dWVXhZelZUYlVwSllVUldWRll5ZDNwWGFrSnpZMFpHV0dKRk1WSk5SWEI0VmpKNGEwNUhUWGxWYmxKVFltczFjbFpxUmxka01VVjVZa1ZLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVGM1pXeFJkMVZ0Y0ZSTlIzY3hWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVldwS05HUkdUbFphUlRscFVqQndTVnBWWkdGaE1rcFdWMjV3WVZKdFVsZGFSbHAyWlZaYWNWRnJlRkpOYkVsNFYydGFhbVZIUmxkalJteFVWbnBXVGxWVVFrdFRSbVJYV2tSU2JHSklRbFZaVkVwclYyeGFObFp1U2xSV1YxSlFXV3RrUzFOSFZrVlRiSEJYVFRKa05GWXllRk5rYkUxM1lrUldVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVRKR2MyTkdhR3hUUlRWeVdXeFdZV1ZzY0VkYVJscGhUVlZLVlZWWE1IaGhWa28yWWtjNVlWSlZOWFpaVjNoM1YwZFdTVlJ0ZEdsV1ZuQTJWMnRhYTFadFRrWlVia0pTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUjJoWFRWZDRkVll4VWt0V01rMTVVMnRzV0dKWGFIQlZNRnBoWXpGT1ZscElUbXhoTW5oSFZqSXhiMkZXVGtaT1dFNVZUVzE0UkZsWGVIZFhSMVpKVkcxMGFWWldjRFpYYTFwclZteHZlRkZzVWxKaGVteHdWRmR3VjJNeFJYbGlSVXBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2xWV0d4UVYwZDRiMVJVUVRGa2JHUnpXa1prVGxKWWFERlhhMmh6WVVaa1IxTnVUbFJOUjJoTVdrY3hVbVZGT1ZsUmJXeHBWbXR3ZWxkc1ZrOVJiVTV5WWtWV1UxZEZOVXRWYWtFeFl6RnNjbHBFVW1GaVZWcFpWR3hrTUZsV1pFaGFSelZWVW1zMVJGbFhNVXBsYkZwMVZtMTBVazB5VW5WV01WSkxWakpOZVZOcmJGaGlWMmh3VlRCYVlXTXhVa1pVYTA1b1lraENXVnBWYUU5WFZUQjNUa2hrWVZadFVUQlphMVl3VlcxSmVWcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMVlRbGxhVldoM1dWWmFTRTlWZUZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclRtaGlWV3cyVm0wMVYyRXhSWGRTYm14V1VtczFRMXBWVms5alJrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmVHTklWbEpXTWxKU1ZsUkNTMVpXY0VaaFJYUnFVakJ3TUZkclZuZFdWMVpZV2toa1VrMXRlRU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWMnRTU2s1WFZsaFNXR3hVWW14d2NGUlhOVTlOVm13MlUydGtUbUpJUWxWWlZXTjRZV3hGZVdSRmVGUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVndNRmRVUWs1TlYxWnpZMFpvVjJKcmNFMVZhMVpIWkRGRmVXSkZTbUZOUjNoRlZWWmthMU5zUlhkU2JUVllZVEpTU0ZSVlduTldSa1pWWWtWd1UwMVlRWHBXUldNeFV6SktSMkpHYUZaV2VteE5WbFpqTldKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVsNFkwUk9WVko2UmxCWmVrcEtaV3hTZEdWRmVGSk5ibEpOVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWt0T1ZtUnpZVVpPVGxZd05UQlVhMlJyV1ZaSmQxZFlaRmhXYTFveVYycENjMUpHUmxoYVJWSm9WbFZhZFZVeFZrOVJNVVpZVTFod1VtSllhSEJaYkZwaFRsWnJkMkZIZEdsU2JYaDNWR3hqTldFeFRrZFRhazVhVFdwR1dGcFZaRk5YUmxwMVkwZDBVbFo2YkhWVk1WWlBVV3h2ZUdORmFGZGlWRVpMVldwS05FMVdaSEphUm1SUFVsaFNTbFpITVRSaFZrbDRZa2h3VkZaWGFFeFphMlJQVmtkUmVWcEhSbE5OUm13elZqRmFUMDB4YjNsVmEyaFFWMFZ3YUZadWNGTmtNVkY1V2toYVlVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1YxSlVXVlZrVTFOR1NsaGFSa1pXVFVWd05GZFljRXBPVjFKV1pVaFNiRk5HY0dGV2FrWkxUbXhOZDFwR1RtaFNNVXBKVld4b1ExSkhSbFpTYlRWVVZsVTFRMWRxUW5OU1JrWllXa2R3YVZac2JETlhhMXB2VXpKU1ZtSkZiRlJpV0doeFZsaHdWMDFHWkZkYVJFSnBVbTFrTmxVeU1UUmhhekIzVTJwS1dtSlVWbEJaYTFZd1VXMUplVnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa3RPYkdSeldrUlNhVlpZYURCV01qVnpZVlV4Y1ZKdE1WaGhNbEpJVkZWYWMxWkhSa2hrUm5CWVVtdHdkbFpGWTNoaE1rcElWV3RTWVUxcVZtOVZha1poWWpGa2NscEdaR3hXTURReFYxUk9UMU5zU25WVmJYUlVUVlUwZWxkcVJuZFRSa3B4VVd4d1ZtVnNXakZXTW5odlZXMUpkMkl6Y0ZSaWJIQnlWRlJCZUdSV1VrWlVhMDVhWWtkb1ZWbFVUa05VVmtaWVQxYzFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxTnVXbGhpUjFKSVdWUkdkMWRXVG5WalJrWlhZbXMxVFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUWGRVYlhSVFVqQnNOVlJzVWtOWlZsbzJWbGhrVlZKc1dsUlpNR1JPWld4R2RWZHRjRTVpV0dRelYxWmFhazVYVWxaalJGWnJUVzFTVEZSWGRGcGtNWEJHV2tWa2FHSlZXa2xVVm1RMFlWZEtjMUpVVGxSV1YxSm9XVEJrUzFOR1duVldiSEJYWld0YWVsWlZXazlUYlVwSVZHcFdWRlo2VmtWWlZsWkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5aYTFaelUwWldkR0ZIZEZOTlJsbDRWakp3UzFZd01VWmtSVkpoVTBaS2NGUlhlRXRqTVd4eVZHMXdhazFIZUVWWGExWmhZa1pPUmxOcVNscE5hbFpUV2taa1YxTkhWa2xqUlhSc1ZqTlNNMVpGVmtka2JHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBwVFVjNU0xWkhOV0ZoVjBwelUyNU9XbUpVVmxOYVJWcGhVMWRLU1ZwSFJsWk5helUyVlRGV2IxUXlTa2hUYTJoWVYwWmFZVlJYY0hOTlZuQkdXa1prYTFZeFNraFVNVkpEWWtaa1JsTnVUbFJOVlZveVYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVVEZ3Um1WRlNtbE5iVkpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0T2FHSlZiRFZVTVdoTFlVWlplRmRxV2xaU2JXZzJXVzE0ZDJSSFNrbFViVVpYWWtWdmVWZFdVa3RXTWxKV1kwUmFhVTF0VW5KVmJuQnpaVlprYzFsNlJsQldWVFYzVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOWGxWZWtKUFpFWlNkVlJzY0ZoU1ZGVXlWVEZXVjFZd05VaFVhMmhRVjBkNGNsVnRkRXRqYkdSMFlrYzVVMkpXV2twVlZ6VmhZVzFLYzFKdVpGVk5iVkl5VjJwQ2MxSkdSbGhhUm14T1lYcFZlbFl3VWs5Uk1rWklWV3RvWVUxdFVsSldWRUpIWkZaU1JWUnRkR2xTYlhoM1ZERmtOR0pHVGtaVGFrcGFUV3BXVTFwSE1WZGtSazUwVjIxd1UwMVZjREJWTWpWclpHeHZkMkpGVWxKV01sSm9XV3hTUm1ReFRsWlZXR1JoVFd4WmVsbHFTbXRUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1p3UlZGc2NGZE5helV4VmtSS2MxRnRTblJVYTJoV1lsUkdURnBXYUd0VVJrNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnVWbHBoTWxKSVdWWmFkMWRIVVhsT1ZrSm9WbFZhTVZac1ZsZFZNVWwzWTBSV2EwMUlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlpqTVZsV1pFWmpSRlphWVdzMVMxbHRjelZqUmtaeVQxZHNUbUZzV25wVlZFcHpVV3h2ZDJKRlVsSmhiWGhGV1ZaV1IySnNUbFpVYTBwVVRVZDRSVlZXWkd0VGJFcFdVMnBPV2sxcVFURmFSRVozVjFaT2NWRnRlRlpXZW14MVZURldUMUZzYjNoalJXaFhZbFJHUzFWcVFURk5iR3gwVGxaT2FWSXdjREZXVnpGaFlURk9TR1ZFVGxoaVJUVjJXbGQ0ZDFkSFZraE5WWGhYVW5wc1RWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkxUbFprYzJGR1RrNVdNRFV3Vkd0a2ExTXdNWEpYYWs1YVRVZFJNRmt3V25KbFZrcHhVVzFvVjJWdGQzaFdSVkpQVVRKRmVHTklRbHBOU0ZKTFZWUkNSMkpzVGxaU2JscGhUVWQ0UlZWV1pHdFpWa2w0VjI1U1ZGWlhVbWhaTUdSTFUwWmFkVlpzY0ZkbGExcDZWWHBDYjFReVNraFRhMmhZVjBVMVMxVnFRbmRpTVd3MlUyeGFhbEpVYkhWWmFrcHJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxTldUblJsUjNSVVVteHZNVmRYTVhOUk1rWlhZa1pzVldKWWFFdFZWRTVQWW14T2RXRjZSbXROV0VKSlZqRmpNVkpIUmxaU2JUVlVWbFUxUTFWNlFuTlNSa1pZV2tWd1UwMVZjSHBXTWpGelVUSktXRlJ1VWxCWFJrcGFWRmQ0UzJJeGNFWmFSVnBwVFdzeE5WWnROVTlaVjBaWldrYzFZVkp0VW5wWlZFSTBVa1pHZEUxWGFGZE5WbkEyVmpKMGIxUnRUWGRpUld4VVlteHdjbFJVUVhobGJFNVdXa1U1YTJKVmNGcFZWekZ2WVZkS2RHVkhNVnBpVkVaSVdrVmFkMVpIUmpaWGExSm9WbFZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVbkZWYWtKaFpGWmtjMWRyT1dwU01Wb3dWbXhTYzFkSFZuSmlSRkpWVmxVd2QxcEVRalJTVms1VlZtczViRlpHU1hwV01GcEhaR3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpaZWtacFVqRkdORlF4WkRCaFZURnlUVmMxVmxKck5VUlphMlJUVTFaT2RHVkhSbFpsYkZwSVYxZDBhMVl5VWtkalJtaFBWa1ZLVFZWVVFuZE9WbVJ6WVVWT2EySlZOVEZXVm1SelZFWldXRTlYTlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJUVFVSVmVWZFhNSGhaVjA1SFkwUldVbFpIZUV0VmFrWmFaREZyZVUxV1pHbFNXR2g2Vmtkd1IxZHRSWGhYYm5CWVlrZE9ORmxyWkV0a1ZsWllUMWRzYVZac2JEWldNRkpMVlRKU2MySkVWbXROYlZKTVZGZHpNVTFzYkhSTlYwWnFVbTVCTVZkVVRrTlNSMFpXVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBIUmxOTlZuQXdWVEZXV2s1WFJraFVhMnhTWWxob2NGbHNXa3RpVm14MFRVUldhRTFZUWxWWlZXaFhWMnhhTmxKdVRsVlNWVFZFVkZWYWQxZFhSa1ZSYTNoWFVucHNUVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOYTNCM1ZWWlNjMU5zU1hoWFdHUmFUV3BHV0ZsclZqUmpNVkp4VW14d2FFMVdjRFpXTW5ocVpVZEtTRk51VmxaV2VteGhWRmR3YzAxV1pIUk5XRTVwWVROb1JWVlhOVmRYYkZvMlVtNU9WRTFWV2pKWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1lteGFUbGx0ZUV0ak1YQldZVVpLWVUxVlNsVlZWM0JEV1Zaa1NGb3paRkpOYlhoRFYycENjMUpHUmxoYVJYQlNUVVZhZFZZd1VrdFNNbEY1Vkd0b1YySnNXbWhWYlhCelRWWnNjVk5zVG1sU1dGSkZWMnRrTUZkc1pFZFRiazVVWW0xM2VsZHFTbE5UUjBwSlZXMUdWbVZzV1RKWGExWnZVekpLV0ZWcmFHbFRSa3BvVmxSS2IwNXNjRVpoUlhCcFRXdHdTVlF4WkhkWGJGbDZZVWhPVlZKNlFYaFpla1p1WlZkV1NHRkhiR2xXTVVvelYxY3dlRmxYVW5Ka1JXaHNVMFp3WVZSWGRHRmxiR1J6VkZSR1UxWnRaRE5XTW5NeFZqRkZlV1JFUmxwTmFrWllXa1JLUzFOR1NuUmpSMFpXVFcxU01WVXllRzlqYlVweVpVVlNVbFo2Vmt4V2JURXdaRlpOZUZSdVNtcFNXRkpUV1dwS2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU01EbFlZVWR3VkZKVmNIcFhWekI0VlRGd2RGTnVVbEJXTTFKb1ZsUkthMlJXV2xaYVJXUnBZa2hDV0ZaSE5VTmlSMHBYVm01V1ZWSlZOVU5aYlhSM1ZrVTFTV0pIUm1sV1JWbDNWa1ZXVDFadFVsWk5XRkpZWW14S2NGWlVTazlpYkU1elZHdE9UbEl4U2xwVlZ6VlBXVlpWZVdGRVRsaFdiVkp5V1d0YVZtVlhTa1ZYYlVaV1RXNVNNMVZVU25OUmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14a1JWTnJaR3ROYXpWSlZtMDFWMWxXU25GaVJFWmFZV3R3VkZsclZqQlNSbkJIVW14d1YwMXNTbnBXYlhCTFl6SkZlVlZyYUdGTmFsWk9WVlJDUjJSV1RuTlVWRUpzVm01Q2QxZFVTbXRUTVZWM1VtNWFXazFIVWtoWmJYaDNWakZTZFZGdGVHbFdiSEJ3VmtaV1dtUXhiM2RrU0VKU1YwZDRUbGxYTVd0T2JGSnlWV3h3YWsxSVVsVlpWRUl3VTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUm5SWGJIQllVbFZ2ZWxZeWVHcE5WMFY0V2pOc1QxZEdjR2hWYWtaWFpHeE9jVkpyVG1oU2JUazFWbTEwYzFsV1dYbGxTRlphVmxkb1UxbHRkRFJTUmtaWVRsVjBWbVZzU1RGV01qRnpZV3h2ZDJOR1VtaFRSMUpoVm1wS1UyTXhXbFZUYms1UFlraENXRmw2VG05WFZsVjNVbTVvVkZaV1NrdGFSbFUxVWxaU1ZWRnJPV2hYUjFJelZYcEdSMlJzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVjFSV2FGSXdOVXBWVnpFMFlWZEtWMU50TVZwaVZFRXhXVlJHZDFaR2IzbE9WbHBUVFVad01WWXllRmRaVjFKMFZHNVNUbFl5YUhKVlZFcFBaV3hPVmxSdGRHaFNWRlpGVjFST1ExSkhSbFpTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1pzVG1FeGIzcFhWRUpyVmpKU1YyTkZaRkJYUmxwd1ZGZDRTMk14VFhkVWJYUnBUVmhDV1ZWdE1UQlpWbVJHWWtSQ1dHRXlVa2hVVlZwM1ZrWnJlbFJyY0ZSU2EzQXpWMWQ0YTFadFVsaFVXSEJXWW0xNGFGbHRlRXRrTVd4eldrWmFhVTFyTVRaV1Z6VnpWRVpKZW1GRVNsaFdSWEJJV1hwR2QxWkZOVmxXYld4VFlXMTRObFl4V21wTlYwcDBVbXhvVDFaNlJuQmFWbVJ2Wld4c2NWTnJPV2hTTUhCSlZteG9WMVV4U25GaVJXaFhVbXh3VTFrd1ZqUmtWazUwWlVkd1UwMHlhSFpXTVZKTFZtMUpkMk5FVmxkaGJGcE1XbFpvYTJKc1RuVmlSbVJZWVROQk1WbFVUa05VUmxWNVpFVjRWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SWEIwVmpGYWIxRXlVWGhqUm1oUFZqTlNXbFJYY0ZkTmJHUnlXa1phYVUxSE9UVldSelZoWVZaa1JsTnRPVnBpVkZaNVdXMTBORkpHUm5SalIyeE9ZV3RaZWxZeFdtcE5WVFZYV2pOc1QxWXlhSEJXYWtaWFpERkZlV0pGU21GTlIzaEZWVlprYTFOc1JYZFNiVFZhWVRBMVExUXhWbk5TTWxKSVZXdFNhRlpWV25WVk1WWlBVV3h2ZDJKRlVsSldNbEp5VlZSQ1JrNVdUbFpWYTBwVVRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VUlVWVnAzVjBVeFdWcEZjRk5TUlVwMVZtNXdSbVF4VFhkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0T1RsSXdNVFpXYlRWVFUyeEtSVkZ0TlZkbGExWXpWWHBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSTWxaMFVsaHNhVk5IVWxwVVZ6RTBUVlprY2xwR1pFOVNWM2hHVkZWa2ExZEZNVlZSYTNoVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRmNESldNbmhyVWpKRmVHTkdiRlJXTWxKU1ZsUkNTMk14Y0VaaFJYUnBVbTVDVlZSc1dsTmhNVmwzWTBWa1dtRXlVbGhhUlZwM1YwVTFWVkZyZUZObGJGcDZWMnRTUms1WFJYbFRXR3hWVjBVMVMxVlVTbE5rYkdSeldrVmthRTFZUWxwVk1XTXhWRVpXV0U5WE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCVFRXNVNkVlpWV2s5UmJWRjNWRzVDVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOV0VJd1ZERm9jMU5zU1hoaVJ6VmFWbTFOZDFkcVJuZGtSMHBJWlVkc1UwMVZiekpXUkVwclpHeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVlhOVU5aVjBaV1UyNVNWVko2Um5KWmEyUlRVa1p2ZVU1WGFGTk5WbkIyVmpKMGExWXlWbGRhTTJ4V1lsZG9jbFZxUW1GaVZteFhXa1pLYVdFemFFVlZWM1JyVjJ4WmVtRkVXbGhpUlRWNVZHMTBUMk5HUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyVGs1aVIzaFpXbFZTUjFsV1ZYZFNWRlpVVmxkU1lWcEdXblpsVmxweFVXdDRVazFzU2pKV01uaHJVakpGZUdOR2JGUmlWbkJ3V1d4V1lVMUdaSE5VYlhCcVRVZDRSVlV4WkhOVVJsWllUMWMxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTYUZsc1pEUmpNV3h5V2taS1lVMVZTbFZWVnpFMFlURk9SbU5JVGxoaVJUQjRWbXRrVTFkR1RuSlhiV3hUVFZadmQxWXllR3BOVlRGR1pFVm9hRkl6YUdGV2FrWkxZekZyZVdKRVRtRk5SemsxVmpJMVExbFdXWHBoU0VwVVltMTRlVlY2UW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaYVIwWnFVbTVDV1ZwVlpEQlVWMHB6VTI1T1lWWlhhRk5YYWtaRFZrWkdjVkZ0YkU1aGJYZzJWMVJPY2sxVk1WaFVXSEJXWW0xNFRWVXdXbmRpTVd4eVlVWmthVkpZVWxOWmFrcHJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVndlbGRYZEc5VU1rcEdUMWMxYVUxdFVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVNrNWxWMUpKVVcxd1UyRnRlRE5YVnpCNFZUSktTRlpyVWs5V01taHhWVEJXUzJNeGJIUk5Wa3BwVFd0YVZWbFVRakJUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVjFaYVQxRnRUbk5SYkZKU1YwZG9SVmxXVmtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyWVZaSmVXVkVSbGhpUjJoUFYycEdRMVpHUm5SbFIzUlVVbGhDZWxZeWVFNU5WbHBJVld4b1ZHRXhjSEJWYWtaaFRVWmtjMWw2Ums1U1dGSkpWR3hrTkdFd01WVmlTRXBhWVd0d1QxbDZRbk5TUm5CSlZHMW9WMlZzV25wWFZFNXpZVzFPUmxSdVFsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRWaENNRlF4YUhOVGJFNUdZMFJLWVZKRlZURlpla3BIVjBVMVdHVkhjR3hXVlhBelYxY3hjMUV5VmxoVFdIQmhVMGhDVVZkcVNUVmliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkVXa1prU21WV1ZuUmxSbXhPWW0xb00xZFhNSGhXYkc5NFVXeFNVbUpZYUhKVk1GWjNZekZrYzFSVVJsZFNNVXBaVlRKMFlXRldTWGhYYWtKWVlrZE5lRlJWVmpCVFIxWkpVVzFzYVZac2J6SldSVlpQVVcxS2RGUnVVbEJXUlRWTVdsWmtNRlJHVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtwSFkwWkdWV0pGY0ZOU1ZWcE5WVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFZUWpCVU1XaHpVMnhPUm1ORVNtRlRSM2hFV1RCa1MyTkdSblZpUjJ4T1RXeEtkRmRYZEd0ak1sSlhZMFpzVlZaR2NFVlpWbFpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1oxVVcxR2FGWlZiM2hYVjNCUFZXeHZlVkp1UWxKaWEwcHdXVlpXUzA1c2JGVlRiazVyVFZka05WbHJhRmRaVmtsNFYxUkNWVTF0VWpKWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFcFZWekZ2WVcxS1ZsWnROVlpTYXpWRFdWWmtWMWRHV25WalJYQmhUV3BzZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxkb1ZGcFdXbmRYUmxwWVdrWkdWazFGV25kWFZ6QjNUa2RHVmxSdVFsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEhkR2xXVm5BMlYydGFhMVpzYjNoUmJGSlNZbTE0Y0ZSVVNrOU5WbVJ4VTJ4a1RsSllVa1ZYYTJRd1YyeGtSMU50T1ZSaWJYZDZWMnBDZDA1V2EzcFJhMUpvVmxWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWYVZtMVNZVmRxU2s5a1JUbFZWR3N4YVZZeFNucFhhMVpQWW0xS2MySklVbEJYUlRWb1ZWUktUMlZzVGxaV2JVWm9VakJ3U2xaSE1UUlVSbHBJVDFWNFZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJZV3hKZDFkcVZsaFdhelZEVkRGV2MxSkdUblJPVjNCcFZrZDBORmRVUWs5VGJFMTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1oxVVcxR2FGWlZiekZYVjNCUFlXMVNWMkl6YkZkaGEwcE5WVlJLVTAxV2NFZFpNMmhvVm01Q1dsVXhZekZVVmtWM1UydG9XRlp0VVRCYVYzaDNWa2RHTmxkclVtaFdWVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMU5XVm5WaVIwWlhUVlphZFZaVldrOVJiVVpYWTBoU2JGTkdjR0ZXTUZwSFkwWkZlV0pGU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZUdFemJGQlhSVFZMVld0U1EySnNaSE5oUms1c1ZtNUNXVlpzYUZkV2F6QjRWMjVDVm1KSFVUQlphMlJMVjBaYWRWWnRkRkpOYldkNFYxZHdTMVV5U2tkYU0yeHNVMFZLY0Zsc1dsZGxiRTVXVkcxMGFHSlZiRFZhUkVreFZGWkZkMU5xVGxoV2JXaE1XVlZhUTFkV1JuUmhSM0JwVmxaYU5sVXhWbTlWTWxaWFkwWm9WMVpIZUhKVk1GWjNZekZrYzFSdVNsUk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEppV0VKd1ZGYzFhMDFXY0VaYVJtUlBVakZLUlZWV1VuTlRiRTVIVTJwS1dtRnJiekJhVjNRMFpGWmFkV05IZEZSU1YzZ3lWMnRqZUZJeVRYbFZiR2hYVjBWS1JWbFdWa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSblZTYTNCU1RUQXdNVlV4VmxOU2JFMTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJUazVTTURVd1ZXMDFWMkZyTVhOalJFcGFUV3BDTTFkcVJrTldSa1owWlVkMFZGSllRbnBXTW5oT1RWWmtWMVpZWkd4U2JGcE5WVlpqTldKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVSWmEyUlRVMVpPZEdWSFJsWmxiRmw2VmpGYWIxTXlWbk5qUmxKb1UwWndjVnBXVWxkTk1XUlhZVVpPYVUxSWFEQlpNR2hoWVVaYU5sVnVXbUZTVjAweFdrY3hTMU5XVWxsV2JIQk9ZVzEzZUZZeU1IaGpNa3B6V2tSV1lWTkhlSEJVVjNCeVpERmtSVlJyVG1oU01VcEpWMnBKTVZkV1ZYcGFSWGhVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMkV5UmtkalJXaFdZbXh3Y0ZsdGMzaE5iR1JZVFZWa2JHSklRbFZVTVdoeldWWmtSbE5xU2xwTmFsWlRXa2Q0Y21Wc1duVmpSM1JUWlcxM2QxWXdVa3BOVjBwSVZXcFdUMVpHU25GVVZ6VnJaRlpOZUZSdVNtcFNWVFYzVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxU2s5a1JURlpWR3R3VTFKRlNuVldNbmh2VlRKV1YyTkdhRmRYUmxweVZXNXdjMDVzY0VaaFJYUnFVakJ3TUZkVVNUVmhNVTVHWTBjNVdtSlVWbEJaYkdSS1pXeE9kVlZyZUZObGJGcDZWMnRTUms1WFJYbFRXR3hWVjBWS1RWWldZelZpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhPUms1WVRscGhNbEpoV2taa1NtVldUblZTYTNCVFVrVktkVmRyVm05VE1sSklVMnRXVkdKdFVtaFZha1p6VFZacmQxcEZaR3hXTURFMVZtMXpOV0ZWTVhOVGJrNVVUVWRvVEZwRlpFdFNSMUY1V2tkMFUwMXVaRE5YVjNSclZtczVWbUl6YUZKaWJYaHZWbTV3Vm1ReGJEWlRhemxzVm01Q1dWWnROVmRUTWxaWVpFVjRWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVzh4VmpKNGIxVXdNVmhVYmxKUFVqSlNjVlJYZUdGbGJHUjBZWHBHYTJKSGVEQlpha0l3VWtkS1ZrNVljRmhXYldoUVdsZDBjMUl5VGtoaVJscFRUVlZ3TUZaWGVHOWlNbEY1VTFod1ZHRnJTazFWYkZwYVRVWnJkMWw2Vm14V01VcElWVmN4TUZsWFJsaGpla3BTVFcxNFExZHFRbk5TUmtaMFYyeHdUazFGY0hSWFZFSnJVakF4U0ZKclVsSldSM2hMVlZSS1QwMXNjRVZUYkdSb1ZsaGtOVlp0Y0ZOaGJFbzJZa1JXWVZKVk1ERlViWGh6WXpBNVdWcEhSbE5OV0VKMFZqSjRiMkl5VVhsVFdIQlVZV3RLVEZwRVNUVmliRTVXVkd0S1lVMUZOWGRWVm1SclUyeEZkMU5yU2xwaGF6VkVXV3RrUzJSR1duVmlSM0JVVWpGS2VsWXhaSEpOVjBsNVZXdHNWbUp0VW5GWmJGcGhUa1p3UjFwR1pHeGlWa3BEV1dwS2ExTnNSWGRTYlRWWVlUSlNXRmxzVm5OVFIwcEpWbTFHVTAxV2EzZFZla0p2VkRKS1NGTnJhRmhYUlRWTFZUQldkMk14YTNoVWFrNWhUVmhDU1ZWdGNFTlhiRlY2V2tjMVlWSlhUVEZaTW5oM1YwVTFTVkZzUW1GTmFteDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVnFSa3RpTVhCR1drVmFZVTFWU2xWVlZ6VkhZV3N4Y1dKRVJsVlNla1V3V2tkNGMxZEdWblZqUlhoVFRWVndkbGRyVm10U2JVNUdWRzVDVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOYkVwWldXdGtNRk5zU2tWUmJUVllZVEpTU0ZSVlduTldSVFZZVGxkR1dGSnJXakpWTW5CUFZqSk9SMk5GVWxwTk1EVkxWV3hhZDJJeGJISmhSVGxwVWxoU1UxbHFTbXRUYkVWM1VtMDFWRlpWTlVOWGFrSnpVMVpPZEdWSGRGUlNiRzh4VjFjeGMxRXlWbGRqUm14VFYwWmFjRlpxUW1GbFZtUnpWMVJXYkZadVFscFdSelZyWVZVeGNWWnFXbGhpUlRWMldsZDRkMWRIVmtoTlZURnBWbTVCTVZkWGNFcGxSbkJ6WTBWb1UyRnJTbUZXVkVwdVpVWnNWMXBHU21wTlIzaEpWbGN4YjJFeFNYZFdha1pZWVd0d1dGUlZWakJTUm5CSVQxZEdWMDFHY0hsV01uaHZVekpXY21ORVZtdE5iVkpaVkZaU1EyUXhVa1pVYTA1b1RWZDRXbFpYTVc5VVYwcFlWVzVPWVZKVk5YVlpiVEZQWkVVNVZWUnRjR3hXTURVMlZURldZVTFHY0Vaa1JsSnJUVWhTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVldNblJyVWpBeFIySkdVazlXZWxab1ZqQmFSMlJzVG5GVGF6bHJZbFZ3V2xWWE1XOWhWMHAwWlVjeFdtSlVSa2hhUlZwM1ZrWnJlbFJyZEd4V01EVXpWWHBHVDAweFRYZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14c1ZscEdaR2hTYmtKSlZtMDFjMkZ0Vm5GU2JXeFVUVVUxY2xWclpFcGxWVFZWVVcxR1YyVnNWak5XUlZwWFZUSk9TRlJZY0ZKaWJIQnhWRmN4TTJReGJGZFplbFpyVmxoQk1WcEVRakJUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1lWSXlhSEpWTUZwTFlqRmtWVk50T1d0U2JrSlpWR3hTUTFWSFZsWlRibEphVm0xUk1GbHJaRXRrUmtwMVZXMUdWMUpGV2xOV1YzUlhWMnh2ZUZOc2JHaFRSMUp3VkZSQ2RtUXhUblZpU0VwcVRVVTFkMVZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlpYlVwelVsaHNVRmRHV25KVmFrWmhUVlp3UmxSWWFGZFdNVnBhVlZjeE5GTXlWbGxhUnpWYVpXdHdXRmw2Um5kalJUVllZMGRzVG1Gc1ZqTldNbmhxVFZVeFIxb3pjRlpoYkZweFZXcEdWMlF4WkVkVWFrNVVUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WaFdSV3N4V2tjeFJtVlhTa2hsUjNCc1lXdFZlbFV5Y0V0WlYwNUlVMnRvVjJKR1duQlVWelZUWXpGc2RHSkhjRTloTW5oSlZUSndWMkV4U1hoWGFscFVUVWRvVkZwSE1VWmxWbHAxVm10NFdGSkZTak5WVkVwclpHMUdjbUpGYkZoaWEwcHdWbXRvUTJNeGNGWmhSVTVvVWpCd01GWlhjRU5YYkZsM1lYcEtXbVZyYkRSWlZXUlBaRlpXZFZGdGJHbFdhM0I2VjFjd01WVnJOWFJWYTJoVFlsZDRjVlJVUmt0TmJHdDNWVmhrVGxKVWJERldSelZoV1ZkS2MxTllaRmhXYlZKTVdsY3hVMU5GT1ZsYVJrWlhVbXRWZVZkWWNFdGlNazVIWTBoV1ZtRnJOVzlXYWtaS1pERnNWbFZZWkU1U1ZHeDFXVzV2ZDJGVlRuUldha3BhVmpOa2RsZFVTVFZrUjA1SVlraE9ZVlV5YUhCWFZtaFBZa1UxY1ZWWVZscGhiR3QzVjJ0a1YyRnRTWGxWYlhoTVVucHNVVlpJY0VOa2JVbDVUMVpDVldWWGRIcFRWVTVLVDBkTmVsVnViR2hXZWxaMVZVZHNTbU13YkVSYVIzaHNVakZhY1ZOdWJISmpRMGxMV2xoYWFHSkRhR3BpTWpGM1lWZDRiRXRIU21oak1sVXlUa00xYVU1cVVtdGFWMDUyV2tkVmIySXdPVkJOUnpsMllqQTVVRXRUZDJkSmFuaDZaRWhLY0dKdFl5dEphWGRuU2pKV05GcFhUVzVMVTJzOUlncGxkbUZzS0dOdmJYQnBiR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h2VDA4d2IyOXZUMDhwTENBaVBITjBjbWx1Wno0aUxDQW5aWGhsWXljcEtRPT0iCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))