import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpU1hsQmRFdHBNR2RaTWpscllWYzFiazlwUWpGa1IxbDBUME5CZEV0cE1FdEplVVJEY1ZOQmVVMUVSVE5KUmtZeFdWYzFhR0pUUVc5UlZsSkdWRU5DVkZGVE5ITkpSbFo1WkZka01WbFlhM0JEYVUxblZFZHNhbHBYTlhwYVUwSkNVakZDVFV4VVRYVk5RMEoyWTJsQ2MxbFlVbXhqYVVGdllVaFNNR05FYjNaTU0yUXpaSGsxYm1KdVZYVmlNMHB1VERKNGNGa3lWblZqTWxaNlRESkdibU5IZDNWaFNGSjBZa05yZFVObmNHMWpiVGwwU1VjNWQxcFhOV3hqYmtGbllWY3hkMkl6U2pCSlIxcHdXbGQ0YTJONWQyZFpXRUp3VEVOQ2RHSXlVbXhpU0UxTFEyMU9jMWxZVG5wSlJrNXZZak5rUjJGWFZuTmFSazF2WWxjNWExcFhlSHBNYXpGMldrZFdjMHRVYjB0SlEwRm5TVVk1ZFZsWE1XeEpSREJuU1c1T2IySXpZM1ZhYld4c1lrZFNla2xuYjJkSlEwRm5XREk1ZVZwSFZubEpSREJuU1cxT2VWcFhSakJhVmpscldWaFNiRWxIVW14ak1rMXpTVWRzYTBsSFVteGpNazFwUTJkdlowbERRV2RrV0U1c1kydzVjRnBEUVRsSlIxcHdXbGQ0YTJONU5VNVpWelUxVFcwNWRWcFRhR3BpTWpGMldrZFdjMWd5TldoaVYxVTVTVzVLYkdONU5URmpNbFo1WTNsSmMwbElUakJqYld4MVdub3dhVlpZVG14amFVbHdRMmxCWjBsRFFuVlpWekZzU1VRd1oxcHRiR3hpUjFKNlRHdE9iMWxZU1c5ak0xSjVZVmMxYmxCVFNrOVpWekZzU1dsclMwbERRV2RKUnpGMldrZFdjMWd5TldoaVYxVm5VRk5DYldGWFZuTmFTRTExVVRKb2FHTnBhSHBrU0Vwd1ltMWpPVWxyTVhaYVIxWnpTVVUxYUdKWFZXbExVVzluU1VOQloxa3lPWE5pTTBsblVGTkNiV0ZYVm5OYVNFMTFVVEpvYUdOcGFIcGtTRXB3WW0xak9VbHJUblppUnpsNVNXbDNaMXBIVm0xWldGWnpaRVF3YVZreWFHeFpNbk4wV1cxR2VscFRTWEJEYVVGblNVTkNiV0ZYVm5OYVNFNW1ZekpvZG1SNVFUbEpSMXB3V2xkNGEyTjVOVVJoUjBaNVMwaE9NR050YkhWYWVqQnBVbTFzYkdKSFVucEpSazV2WWpOamFVdFJiMmRKUTBGbldWZDRjMWd6Vm5wYVdFbG5VRk5DYldGWFZuTmFTRTExVVcwNWRtSkhWbWhpYVdoNlpFaEtjR0p0WXpsSmExcHdaVU5DYjFwWFJtdGFXRWxuVkVkc2VtUkRRbGRoVjFZelNXbHJTMGxEUVdkSlIxcHdXbGQ0YTJNeE9YcGFXRVl4V2xjMWFscFRRVGxKUjFwd1dsZDRhMk41TlVSaFIwWjVTMGhPTUdOdGJIVmFlakJwVlRKV2VHUlhWblZaTWxWcFMxRnZaMGxEUVdkWk1qbHpZak5LWmxwdE9YbFlNbmh3WXpOUloxQlRRbTFoVjFaeldraE5kVkZ0T1haaVIxWm9ZbWxvZW1SSVNuQmliV001U1d4V2VscFRRa1JpTW5oMlkyazVhVm95VG5aaVJ6bDVTVWRhZG1OcFFuTmhXRTR3Wkcxc2JHUjVTWEJEYVVGblNVTkNiV0ZYVm5OYVNFNW1Zek5TZVdGWE5XNUpSREJuV20xc2JHSkhVbnBNYTA1dldWaEpiMk16VW5saFZ6VnVVRk5LUjJGWFZuTmFTRTFuVlROU2VXRlhOVzVKYVhkblpFaEthR0p1VG5OWldGSnNVRlpTZVdSWFZYQkRhVUZuU1VOQmFrbEhTbWhaTW5SdVkyMDVNV0p0VW1aWk1qbHpZak5KWjFCVFFtMWhWMVp6V2toTmRWRXlhR2hqYVdoNlpFaEtjR0p0WXpsSmEwcG9XVEowYm1OdE9URmliVkZuVVRJNWMySXpTV2RpTWxsblZFZHNlbVJHV25CYVdHTnBTMUZ2WjBsRFFXZEplVUpxWWpKNGRtTnNPWE5oV0U0d1dETmFjRnBZWTJkUVUwSnRZVmRXYzFwSVRYVlJNbWhvWTJsb2VtUklTbkJpYldNNVNXdE9kbUpIT1hsSlJ6bHRTVVY0Y0dNelVsZGhWMVl6U1dsclMwTnBRV2RKUTBJeVlWZFdNMWd5Ykd0SlJEQm5XbTFzYkdKSFVucE1hekZvWW01cmVXSXlOV3hMUTJSd1kyazFNV0ZUTlRKaFYxWXpTbmwzWjJNelVubGhWelZ1VUZOS1YyRlhWak5KYVhkbllVZFdjMk5FTUdsV2JXeHNaSGxDU2xKRE5HZFJVMEowWWpKU2JHSkRRblJaV0d0bllVZEdNbHBUUW5Sa1YzZ3dZVmhDYzFwVFFqSmhWMVl6WTNsSmNFTnBRV2RKUTBJeVlWZFdNMWd6VWpWalIxVm5VRk5DYldGWFZuTmFTRTExVVRKb2FHTnBhSHBrU0Vwd1ltMWpPVWxzV25CYVdHTm5Wa2hzZDFwVFNYQkRhVUZuU1VOQ2FGa3pVbkJpTWpWbVlWZFJaMUJUUW0xaFYxWnpXa2hOZFZOWE5UQmFWMlJzWTJsb2VtUklTbkJpYldNNVNXdEdhbVJIYkhaaWFVbHpTVWRvYkdKSVFUbEphMFpxWkVkc2RtSnBRa3BTUTBKMVlqTlJaMk50Vm5OWldGSndZakkxYUdKRE5HZFJVMEowWWpKU2JHSkRRblJaV0d0blpGaE9iRWxJVW05YVUwSjZXVmN4YkVsSVduQmFXR05uV2tkV2JXRlhOWEJrUjJ4MlltbEJiMk15Um5SYVUwSXlZVmRXTTFneWJHdExVMEp0WWpOSloxcEhiRzFhV0Vwc1ltNVJaMWxYVGpCaFZ6bDFZM2xKY0VObmIyZEpRMEZuVVVkR2QyRlROWFJpTWxKc1lrRnZaMGxEUVdkYVIxWnRTVWRHYW1SSGJIWmlhV2g2V2xkNGJVeERRakpaVjNoNlRFTkNhRmt6VW5CaU1qUndUMmR2WjBsRFFXZEpRMEZuU1VoT2IySXpaR1paYmxZd1pFYzVkVmd5VG5aaVEwRTVTVVZhYUdKSVRteERhVUZuU1VOQlowbERRV2RoVjFsbll6SldjMXBwTlRGak1sWjVXREpvYUdNeE9XNWpiVGt4WTBoTmIwb3lValZpYlVaMFlWZE9abUpIYkhwa1NGcHdXbGhrWmxsWFVqSlpWelZxV2xNMWJtTnRPVEZqUmpsNllVYzVNMWd5V25CYVYzaHJZM2w0YTJWWE5XaGlWMnhxV0RKNGNHTXpVakpoVjFZeldESkdhMlJ0Um5WWk1sVjFXak5LZG1SWVFtWmpNbWgyWkRFNWJXRlhWbk5hU0U1bVlsZEdkVmxYWkd4amFXTndUMmR2WjBsRFFXZEpRMEZuU1VOQlowbERRbnBoUnpreldESktNV1JJVW5aaWJEbHFZakozWjFCVFFsVmpibFpzUTJkdlowbERRV2RKUTBGblNVZHNiVWxEWkRGak1sWjVXREpzYTBwNVFuQmlhVUl5V1ZkNGVrbEhSblZhUTBGdVlsYzVhMXBYZUdaaWJVWjBXbE5qWjJGWE5HZGtiVVp6WTNwdlMwbERRV2RKUTBGblNVTkJaMGxEUVdkWk1qbDFaRWRXTkdSRFFUbEpTRTVzWWtkWmRWZ3lUblppYmxKc1pVaFJaMkl6U1dkbE16QkxTVU5CWjBsRFFXZEpRMEZuU1VOQloyUnRiR3hrTVRrd1pWaENiRWxFTUdka2JVWnpZM2sxYmxwWVVXOUtNMXB3V2xoa1ptUkliSGRhVTJOelNVTmtNR050Vm14S2VXdExTVU5CWjBsRFFXZEpRMEZuU1VOQloyUnRiR3hrTVRsd1drTkJPVWxJV21oaVNFMTFXakpXTUV0RFpESmhWMVl6V0RKc2EwcDVkMmRTYlVaell6SlZjRU5wUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VjMWRtUkRRakpoVjFZeldESnNhMDluYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbDVRVGhrYld4c1pERTVNR1ZZUW14UWJEa3lZVmRXTTFnelNteGFhVUp3WW1sQ2FtSXlOVEJhV0dnd1NVZE9hR0pwUW1sYVUwSXhZekpXYTBsSVVuWkpSemt5V2xoS2VXTnRiR3RhVTBJd1lVZFZaMXBIVm0xWldGWnpaRU5DTW1GWFZqTkRhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpKaFYxWXpXRE5LYkZwc09YSmFXR3RuVUZOQ01tRlhWak5ZTTFJMVkwZFZaMHQ1UVc1WU0xcHdXbGhrWm1OdFZtMUtkMjluU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdka2JXeHNaREU1ZVZwWFdXZFFVMEpxWWpJMU1GcFlhREJNYldSc1pFTm9NbUZYVmpOWU0wcHNXbXc1Y2xwWWEzQkRhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5CYWFVSXlZVmRXTTFnelNteGFhbTlMU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFXNU1hV05uWVZjMFoyUnRiR3hrTVRsNVdsZFpOa05wUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVY3hkbHBJVm5OYVUzZG5aRzFzYkdReE9YbGFWMWxuVUZOQ01tRlhWak5ZTTBwc1dtazFlbU5IZUhCa1EyZHVUR2xqYzBsRVJYQkRhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVRteGlSMWwxV0RKT2VVeHRWalJhVjA0eFpFZFZiMGxzVGtaVVJWWkVWa05DZVZwWVRtWmhWMUZuVW14S1VGUlRRbkJqYkRsMFlqSlNiR0pHT1d0WldGSm9TVVprU1ZKV1NrWkpSekYyV2tkV2MxQlRaSEJqYVRVeFlWTTFNbUZYVmpOS2VVSkNWR3RSWjJKWE9XdGtWM2hzVUZOV2VrbEZSazlTUTBKMVdWY3hiRkJUVm5wSmFYZG5TMGN4ZGxwSVZuTmFVM2RuWkcxc2JHUXhPWGxhVjFsd1MxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJeVlWZFdNMWd6U214YWJEbDVXbGhOWjFCVFFucGFWM2h0VEd3NWFtTnBOVzFhV0ZKcVlVYzVkVnBUWjNCRGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlNGcHdXbGhrWm1OdFZtMVlNMHBzWTNwdlMwbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElXbkJhV0dSbVlWZFJaMUJUUWpKaFYxWXpXRE5LYkZwc09YbGFXRTVpVFVZd1MwbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFteGlTRTVzVDJkdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEozV1ZoT2VrbERUV2RoVjJSMVlqTktiRkIzYjB0SlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhiRzFKUnpWMlpFTkNNbUZYVmpOWU1teHJUMmR2WjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEVFdkaU0xSnZXbGhLTTJGWVRteEpTRko1WlZOQ01HSjVRbTFoVnpWclNVaFNiMXBUUW5OaU0yUnNZek5SWjJOSVNuQmlNMHB3WkVocloySlhSakJaTW1od1ltMWpaMkZZU1hWa1YydDFaRzFzYkdSM2IyZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNGcHdXbGhrWm1GWFVXZFFVMEo2V2xkNGJVeHVRblppTW5oaVNqSnNlVXh1Vm5CTWJscHdXbGhqYmxoVE5XdGFWMXBvWkZkNE1GZ3pXbkJhV0dOdll6SldjMXBwTldaWk0wbHpTVWhPYkdKSFdYVllNMVp3V2tOM1oyUnRSbk5qTVhOdVlsYzVhMXBYZUdaaWJVWjBXbE5rWkV4RFFqSmhWMVl6V0ROU05XTkhWWE5KUjA1MlltNVNiR1ZJVVRsWk1qbDFaRWRXTkdSRGEwdERhVUZuU1VOQlowbERRV2RKUTBGblNVaGFhR0pJVFhWa1dFSnJXVmhTYkV0SWMyNWtiV3hzWkRFNWNGcERZelpKU0Zwd1dsaGtabUZYVVhOSlEyUm9XVE5TY0dJeU5XWmhWMUZ1VDJsQ2FtSXlOVEJhV0dnd1RHMWtiR1JEWjI1alIwWjVXVmN4ZWtwNWQyZGxNekJ3VEcxa2JHUkRaMjVaVjA0d1lWYzVkVXA1ZDJkU2JVWnpZekpWY0VsSU1IQkRaMjlMU1VOQlowbERRV2RKUTBGblNVTkJaMXBIUmpCWlUwRTVTVWhPYkdKSFdYVmpNbFpvWTIxT2IwdEdjMjlLTTFaNldsaEtabUZYVVc1TVEwRnVVRk5qYzBsSVdtaGlTRTVpU2pOV2VscFlTbVpoVjFGdVdGTnJjME5wUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TME5rZEdJeVVteGlSamwxV1ZjeGJFcDVkMmRLZWpCdVRFTkNNbGxYZUhwWGVXUjBZakpTYkdKR09YVlpWekZzU2pFd2NFeEJiMmRKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTm5ibVJ0Ykd4a01Ua3daVmhDYkVwNWQyNVFVMk56WkcxR2MyTXhjMjVrYld4c1pERTVNR1ZZUW14S01UQndURUZ2WjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMmR1Wkcxc2JHUXhPWEJhUTJOelNub3dia3hJV21oaVNFNWlTak5hY0ZwWVpHWmhWMUZ1V0ZOcmMwTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblMwTmthRmt6VW5CaU1qVm1ZVmRSYmt4RFl6bEtlWGd5V1ZkNGVsZDVaR2haTTFKd1lqSTFabUZYVVc1WVUyeGtTMUZ2WjBsRFFXZEpRMEZuU1VOQlowbERRbkJhYVVKMVlqTlJaMXBIUmpCWlZHOUxTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjFKb1pFZEZaMUJUUW5wYVYzaHRURzVPYkZsWVNtcGhRMmhpUzBOa2FHSkhlR1prV0U1c1kybGpjMGxEWXpsS2VYZG5Wa2hLTVZwVGEzTkRhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTJkdVlsYzVhMXBYZUdaaWJVWjBXbE5qYzBsRFl6bEtlWGRuWkcxR2MyTXhjMjVpVnpscldsZDRabUp0Um5SYVUyUmtTMU4zUzBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowdERaREpoVjFZeldETlNOV05IVlc1TVEyTTVTbmw0TWxsWGVIcFhlV1F5WVZkV00xZ3pValZqUjFWdVdGTnJjME5wUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFoyNWtiV3hzWkRFNWNGcERZM05LZWpCdVRFaGFhR0pJVG1KS00xcHdXbGhrWm1GWFVXNVlVMnR6UTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTm5ibGxYVGpCaFZ6bDFXREpzYTBwNWQyNVFVMk56WkcxR2MyTXhjMjVaVjA0d1lWYzVkVmd5Ykd0S01UQndXRk5yUzBsRFFXZEpRMEZuU1VOQlowbERRV2RoVjFsblltMDVNRWxJV21oaVNFNWlTakpHYW1SSGJIWmliRGx3V2tOa1pFbEhSblZhUTBKMVlqTlJaMXBIUmpCWlZHOUxTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTAxblZUSnJaMk15VldkamJWWnFXVmhLYmxsVFFteGlRMEoxV1ZoYWJGb3lSbXRpTTBsbldUSTVkV1JIVmpSa1EwSjNaRmRXYTFwVFFuVmllVUl3WTIxR2JHTnBRbWhaTTFKd1lqSTBTMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkU2FHUkhSbnBKUkRCbll6SldjMXBwTlhwYVYwWjVXVEpuYjFkNVoyNWtXRTVzWTJ3NWNGcERZM05KUTJNNVNubDNaMlJ0Um5Oak1YTnVaRmhPYkdOc09YQmFRMlJrUzFOM1MwbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMHREWkhSaU1sSnNZa1k1ZFZsWE1XeEtlWGRuU25vd2JreERRakpaVjNoNlYzbGtkR0l5VW14aVJqbDFXVmN4YkVveE1IQk1RVzluU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGdlNqTmFjRnBZWkdaa1NHeDNXbE5qYzBwNk1HNU1TRnBvWWtoT1lrb3pXbkJhV0dSbVpFaHNkMXBUWkdSTFUzZExTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuUzBOa01tRlhWak5ZTW14clNubDNibEJUWTNOa2JVWnpZekZ6Ym1SdGJHeGtNVGx3V2tOa1pFdFdNSEJEYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuQmFhVUoxWWpOUloxcEhSakJaV0UwMlEybEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxcEhSakJaV0UxblVGTkNlbHBYZUcxTWJrNXNXVmhLYW1GRGFHSkxRMlJvWWtkNFptUllUbXhqYVdOelNVTmpPVXA1ZDJkV1NFb3hXbE5yYzBOcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGdlNqSXhkbHBIVm5OWU1qVm9ZbGRWYmt4RFFXNVFVMk56U1VoYWFHSklUbUpLTWpGMldrZFdjMWd5TldoaVYxVnVXRk5yYzBOcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGdlNqTmFjRnBZWkdaa1NHeDNXbE5qYzBwNk1HNU1TRnBvWWtoT1lrb3pXbkJhV0dSbVpFaHNkMXBUWkdSTFUzZExTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERaMjVrYld4c1pERTVjRnBEWTNOS2VqQnVURWhhYUdKSVRtSktNMXB3V2xoa1ptRlhVVzVZVTJ4a1MxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZkWloxcEhSakJaV0UxbldWYzFhMGxIZUd4aWFXaHJXVmhTYUdONWF6bFFWRVUyUTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwSFJqQlpVMEU1U1VkU2FHUkhSbnBYZWtKa1EyZHZaMGxEUVdkSlEwRm5TVU5CWjBsRFFucGhSemt6V0RKR2MySkdPVEZqTWxaNVNVUXdaMk15Vm5OYWFUVXhZekpXZVZneWFHaGpNVGx1WTIwNU1XTklUVzlLTWxJMVltMUdkR0ZYVG1aaVIyeDZaRWhhY0ZwWVpHWlpWMUl5V1ZjMWFscFROVzVqYlRreFkwWTVlbUZIT1ROWU1scHdXbGQ0YTJNeE9YUlpWelZvV2pKV2VVcDVhMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5ZVmRaWjFsWFRqQmhWemwxU1VRd09VbERaR3RhVjNoc1pFZFZiazluYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyRlhXV2RhUjBZd1dWTkNhR0p0VVdkYVIwWXdXVlp6ZDFoVE5URmpNbFo1V0RKc2EweHRiR3RKUkRBNVNVaGFhR0pJVG1KS00xWjZXbGhLWm1GWFVXNVlVMEoyWTJsQ01sbFhlSHBNYldSc1pFTm5ibGxYZUhOWU0xWjZXbGhKYmt4RFFrZFpWM2g2V2xOck5rTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGFSMFl3V1ZNMU1XSnRlSEJpYlhOdlMxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFteGlSMnh0U1VkR2FtUkhiSFppYVVFNVVGTkJibVJZUW10WldGSnNTbnB2UzBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEWkcxaFYxWnpXa2hPWm1NeWFIWmtlV05uWVZjMFoyUnRSbk5qZW05TFNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01sbFhlSHBYZVdSdFlWZFdjMXBJVG1aak1taDJaSGxrWkVsRU1HZGpNMUo1UzBoYWFHSklUbUpLTWxwd1dsZDRhMk14T1hwaFJ6a3pTakV3Y0VsRFRXZFdSVGxGVkhwdloxTllUV2RrUjJod1kzbENkVnBYVG1wYVdFNTZXVmhLTlZCNk9FdEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSndXbWxDYzFwWE5HOWFSMFl3V1ZOcloxQnBRWGRKUjBaMVdrTkJiMXBIUmpCWlZuTjNXRk0xTVdNeVZubFlNbXhyVEcxc2EwbEVNRGxKU0Zwb1lraE9Za296Vm5wYVdFcG1ZVmRSYmxoVFFuWmphVUl5V1ZkNGVreHRaR3hrUTJkdVdWZDRjMWd6Vm5wYVdFbHVURU5DUjFsWGVIcGFVMnR3VDJkdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpyV1ZoU2FGZDZRbVJNYm1SNVlWaFNiRXRJYzJkS01scHdXbGQ0YTJNeE9YcGhSemt6U25wdloyUnRSbk5qTVhOdVdtMXNiR0pIVW5wWU0wNXZZak5qYmxoVGQyZEtNa1p6WWtZNU1XTXlWbmxLZW05blpHMUdjMk41Tlc1YVdGRnZTakpHYzJKR09URmpNbFo1U25sM1oxSnRSbk5qTWxWd1RFRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEtNbHB3V2xkNGEyTXhPWHBhV0VZeFdsYzFhbHBUWXpaSlNGcG9Za2hOZFZveVZqQkxRMlJ0WVZkV2MxcElUbVpqTWxaNFpGZFdkVmt5Vlc1TVEwSkhXVmQ0ZWxwVGEzTkRhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJibHB0Ykd4aVIxSjZXRE5PTUdOdGJIVmFlV00yU1VoYWFHSklUWFZhTWxZd1MwTmtiV0ZYVm5OYVNFNW1Zek5TZVdGWE5XNUtlWGRuVW0xR2MyTXlWWEJKU0RCd1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxcFhlSHBhVkc5TFNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RqTWxaeldtazFhbU50Vm1oa1IxVnZaRzFHYzJONWEwdEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIVm5Oak1sVTJRMmxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMkZYV1dkaVIxWjFTMGRTYUdSSFJYQkpSRFJuVFVOQ2FHSnRVV2RMUjFKb1pFZEdZazFHTUhWa1dFNXNZMnc1Y0ZwRE5YQmFRMEU1VUZOQ01sbFhlSHBYZVdReFl6SldlVmd5Ykd0S01UQm5Zak5KWjJSdFJuTmplVFZ1V2xoUmIwb3lSbk5pUmpreFl6SldlVXA1ZDJkU2JVWnpZekpWY0V0VWIwdEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwSFJqQlpWbk4zV0ZNMU0yTnRiREJhVTJnM1NqSk9kbUpIT1hsS2VtOW5aRzFHYzJONU5XNWFXRkZ2U2pKT2RtSkhPWGxLZVhkblVtMUdjMk15VlhCTVEwRnVXVmQ0YzFnelZucGFXRWx1VDJsQ01sbFhlSHBNYldSc1pFTm5ibGxYZUhOWU0xWjZXbGhKYmt4RFFrZFpWM2g2V2xOcmMwTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEyUnFZako0ZG1Oc09XMWlNMHBtWWtkc2VtUkRZelpKU0Zwb1lraE5kVm95VmpCTFEyUnFZako0ZG1Oc09XMWlNMHBtWWtkc2VtUkRZM05KUlZwb1lraE9iRXRUZDJkS00xcHdXbGhrWm1GWFVXNVBhVUl5WVZkV00xZ3liR3RtVTJ0TFNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2JHSklUbXhQWjI5blNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbnBhVjNodFRHMU9lVnBYUmpCYVUyZ3lXVmQ0ZWt0UmIwdEpRMEZuU1VOQlowbERRV2RKUTBGbldsZDRjRnBwUW1oWk0xSndZakkwWjFCVU1HZEtNMDVzWWtkV2FtUkRZelpEYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuUmlNbEpzWWtZNWFHSkhlR1phYld4c1lrZFNla2xFTUdkak1sWnpXbWsxYkdKdVdtSmtiVVp6WXpGemJtSlhPV3RhVjNobVltMUdkRnBUWkdSWVV6VnRZVmRXYzFwSVRtWmFNbFl3UzBOclMwTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFuTmFWelJ2V2tkR01GbFRhMmRRYVVGM1QyZHZaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhVbWhrUjBWblVGTkNhMWxZVW1oWGVrSmtRMmxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk50VmpCa1dFcDFTVWh6YmxwSFJqQlpVMk0yU1VoemJtUllUbXhqYkRsd1drTmpOa2xIVW1oa1IwVjFaRmhPYkdOc09YQmFRelZ3V2tOM1owb3lUblppUnpsNVNucHZaMXBIUmpCWlV6VnFZako0ZG1OcGQyZEtNakYyV2tkV2MxZ3lOV2hpVjFWdVQybENhMWxZVW1oTWJURjJXa2RXYzFneU5XaGlWMVZ6UTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJibHB0Ykd4aVIxSjZXRE5PYjJJelkyNVBhVUpyV1ZoU2FFeHRXbkJhVjNocll6RTVlbUZIT1ROTVEwRnVZVmRSYms5cFFtdFpXRkpvVEcxc2EweERRVzVpYlVaMFdsTmpOa2xIVW1oa1IwVjFZbTFHZEZwVGQwdEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTJSdFlWZFdjMXBJVG1aak1sWjRaRmRXZFZreVZXNVBhVUpyV1ZoU2FFeHRXbkJhVjNocll6RTVlbHBZUmpGYVZ6VnFXbE4zUzBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERaR2hpUjNobVpGaE9iR05wWXpaSlIxSm9aRWRGZFZsWGVITllNMVo2V2xoSmMwTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVc1Wk1qbHpZak5LWmxwdE9YbFlNbmh3WXpOUmJrOXBRbXRaV0ZKb1RHMU9kbUpIT1hsWU1scDJZMnc1YzJGWVRqQk1RVzluU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNqSmFjRnBYZUd0ak1UbDZaRWhLY0dKdFkyNVBhVUpyV1ZoU2FFeHRXbkJhVjNocll6RTVlbVJJU25CaWJXTm5abE4zUzBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFpHMWhWMVp6V2toTmJrOXBRblJpTWxKc1lrWTVhR0pIZUdaYWJXeHNZa2RTZWt4QmIyZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEtNMDV2WWpOa1psbHVWakJrUnpsMVdESk9kbUpEWXpaSlNFNXZZak5rWmxsdVZqQmtSemwxV0RKT2RtSkRkMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTJSNllVYzVNMWd5Um5OaVJqa3hZekpXZVVwNmIyZGpNbWgyWkRFNWFHSkhlR1prV0U1c1kybENPVU5wUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2JHSklUbXhQWjI5blNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpYVVJM1NqSlNhR1JIUlc1UGFVSTNabE4zWjBveVduQmFWM2hyWTNsak5rbEhNWFphUjFaeldESkdjMkpHT1cxaFYxWnpXa2hOYzBsRFpIcGhSemt6V0RKS01XUklVblppYkRscVlqSjNiazlwUW5waFJ6a3pXREpLTVdSSVVuWmliRGxxWWpKM2MwbERaSHBoUnpreldESkdjMkpHT1RGak1sWjVTbnB2WjJNeWFIWmtNVGxvWWtkNFptUllUbXhqYVVJNVEybEJaMGxEUVdkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ04wbERaSHBoUnpreldESktNV1JJVW5aaWJEbHFZakozYms5cFFucGhSemt6V0RKS01XUklVblppYkRscVlqSjNjMGxEWkhwaFJ6a3pXREpHYzJKR09URmpNbFo1U25wdloyTXlhSFprTVRsb1lrZDRabVJZVG14amFVSTVRMmM5UFNJS1pYWmhiQ2hqYjIxd2FXeGxLR0poYzJVMk5DNWlOalJrWldOdlpHVW9iMDlQTUc5dmIwOVBLU3dnSWp4emRISnBibWMrSWl3Z0oyVjRaV01uS1NrPSIKZXZhbChjb21waWxlKGJhc2U2NC5iNjRkZWNvZGUob09PMG9vb09PKSwgIjxzdHJpbmc+IiwgJ2V4ZWMnKSk="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))