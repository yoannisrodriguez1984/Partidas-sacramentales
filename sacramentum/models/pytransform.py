import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwV1ZaamVHUXlTWHBUYWtKS1VqQndiMWw2U2xaTmF6VkNZMGQ0YVdKVk5USlhhMlJYWVRCc1JVMUhaRXBpVlZwWlZGWm9hMkZWTUhkaU0yUlVWbGRTVEZsVlpFNWxWbHBWVTJzNVVsZEZTbnBYVnpCNFZESlNjMk5GYUZkaVdGSkxWV3RTUTJKc1RsaE5WV1JZVWxSR1dsZHJaSE5VYXpGSVQxUk9WazFXV25KVmVrcEhVMFpTV1dKR1pGZFNXRUpSVmxaYWIxRXlUWGhpU0ZKT1ZsUnNjbGxyYUVOVFZscDBUVlJDVkdKRmNFWlZWekF4VmtaYU5sSnJhRmROUmxZMFZqRmFkMU5IU2taT1ZUVlRaVzEwTmxac1VrZFdNa1Y0VkZoc1UyRXlhRlpXTUdRMFYwWmFjbFp1WkZaU2JGcFlXVlZXVDJGck1WaGxSRUpWVm14Vk1WbFVTa3RUVmtaeVlrWmthVlpGVmpOV1ZFbzBVekZLVjFKdVVrOVdiRXBZV2xkMFlWTldXbkZSYkZwc1VtMVNXRmt3Vm05aFZrcFZWbXM1Vm1KdVFubGFWM2hoVmxaS2MxcEhhRTVXVkVVeFZsY3hNR0l4V2xkYVJXaHNVbTFvV0ZsVVJtRk5NVnBXVjJ4a1YwMXJXa2RXUnpGM1ZHeFplbG96WkZkU2JIQlhWR3hrUm1WV1RuSmlSa3BvVFc1b1dWZFhlRk5TYlZGNFZsaHNiRkpZVWxSV2JYUmhUVVpTYzFkc1RsZE5SRUkwVlRKd1lWWXhTWHBoUjJoV1lXdHdVRmw2Umxka1ZsWnpWRzFzVTAxVmNGRldiR1F3V1Zac1ZrMVlUbGhYUjNoeVZXcENZV05HVWxkWGEyUlBWbXhXTlZwRlpFZGhSbHB5WTBac1dsWldjR2hXTW5oYVpXeFdjbVZHY0d4aE1YQm9WMnRTUjFsWFRuUlZhMmhxVWxSV1dGUlVSa1psVmxsNFdrUkNWMDFXUmpWVmJUVlBWa1prU0ZWc1FsWmhNVnBvVm1wR1lXUlhUa2RhUm1oVFlsWktXVlpxU1hoTlJscEhVMjVPVkdGclNsWlphMXAzWkd4c1YxZHRSbE5OVjFKNVZGWmFiMkZGTVhKT1JFSlhWMGhDU0ZkV1drcGxSazUxVm14V2FWSlVWbmRXYWtKcllqRmtjMWRzYUU1V1JVcHlWRlZTUjJWc1pISlhiVGxvWWtWd1dsVlhjelZXYlVwVlVWUkdWVlpGV2xSV2FrcEhVbXhTYzFack5WZFhSVXBKVm0xd1MyVnJNVmRYYms1WVlURndWVmxVVG05V2JHeHpZVWM1YkdKSVFraFhhMVl3VlRKS1IxTnFRbUZTVmxWNFdWWmFTMlJXUm5SaFJtUnBWMGRvZUZaR1dtdFViVlpIWTBWc1ZXSkhhRzlaYTJoRFYxWmtWMXBFVW10TlYxSllXV3RvVDFadFJYZGpSVGxYWWxSV1JGWXdXbXRqYkZweFVXeGtUbFpZUWpWV2FrcDNVVEZzVjFOc2FGWmlia0pZVlc1d1IxUkdWbkZUYTNSUFlrVTFlbGxWV210aVIwVjRZbnBLVjAxV2NGUlZWekZYVWpGT2RWVnNVbWhOV0VKM1ZsZHdRMWxXV2xkV2JsSlBWbFUxYzFWdE1WTlhWbkJXV1hwV1YxWlVSbGhWTW5SdlZqRkplbUZJY0ZwV2JIQk1WbTF6TVZkRk9WZGFSMnhYVW14d1JsWnRjRWRaVm1SMFZteGFUMVp0YUZSWmJHUnZZMFphYzJGRlRsaFdiSEF3VkZWb2ExUnNXbk5pUkZKWFRXNW9kbGxWV2s5VFZrWnpWMnhrYVZJeFNsVldWRUpoVm0xUmVGZHNWbGRpUjJoWVdXdG9RMDVXWkZWUmJVWlZUVlpXTkZZeGFIZFpWa3BIVTJ4b1dsWkZjRk5VVlZwWFkxWk9jMVJ0ZEZOaE0wRjRWbFJLTkZZeVJsaFNXR1JxVW0xU1dGbHNhRU5VUmxwVlVteGFiRkp0VWpGV2JURjNWVEpLVjFOdWFGaFdNMUpYVkZaYVdtVkdaRmxoUmxwcFVqRktkbFpHVmxOU01sWnpWMWhzYkZOSFVsaFVWbHAyVFd4YWRFNVlaRmROUkVZeFdWVmtiMVpYU2xsaFIyaGFUVlp3Y2xsNlNrZFRSMHBIV2taT1YxWnNhM2RXYlhCTFRrWnNXRkpZYUZWWFIyaFpXVlJLVTFaR2JIUmtSMFpYWWtkNGVsZHJZelZYUmtwelUyeGFWazFxUVRGV1JFcExVakZhY1ZWc1pHbFdSVll6Vm0weGVtVkhUblJVYTFwb1VtNUNXRlZzVWxabGJGcDBaRWQwVTAxck1UUlhhMmhYVlRKS1IyTkZPVlppVkZaRVZrWmFhMWRYVGtaYVIyaE9ZWHBXTmxac1l6RlRNVnBZVTJ4b2FGSnRhRlpXYlhoM1RURmtWMWR0Um1wTlYzUTJXVlZWTlZVd01VZGpSRlpYVW14d2RsVjZSbEpsUm1SeVYyMXdVMkpZYUdoV2JYUlhaREZhUjFkdVJsTmlXRkp4Vm0xMGQwMVdXa2hOVkVKWFRVUkdTRll4VWtkV01ERjFWVzVLWVZKRldsUlpNbk40VjFaYWRGSnRlR2hOTUVwYVZteGtOR0V4VW5SV2EyUllZVEZhVlZsVVRsTldWbFowWlVkR2JGWnRlSGxXTW5Rd1lVWlpkMk5HY0ZwV1YyaHlWbXBHUzJSR1ZsVlJiVVpUVWxoQ1ZGZHNWbXRUTVU1WFZHNVNVMkpGTlhCVk1GWkxaR3hhY2xkdFJtaE5SRlpJVjJ0YWExWnRTbkpPVjJoV1lURmFURlpyV2xkalZrWjBVbXhrVGxacmNGbFdNV2gzVWpGa2MxZHVTbXBTYlhoWVZtNXdWMkZHWkZkWGJVWnFUV3MxUmxaSGVHdFViRXAxVVdzeFdHRXhXbkpXVkVaUFUwWktjbHBIUmxOTk1taDNWbGN3ZDA1Vk5VZFhibEpyVW0xU2IxbFljRWRYUmxwWFlVaE9WMUl3VmpWWlZWcHJWMnhhUm1KNlFsZFdSVnA2V2tWVmVGWldWblJqUms1cFVsaENZVll5ZUZkaU1rVjVVbGhrVGxadGFITlZNR1EwVjFac1ZWSnVaR2hTYlhoWldYcE9iMVpHU1hoWGEyUmFUVVp3Y2xaVVNsZGpNV1IwVDFaa1YxSlhPSGRXVkVsNFZqRmtSMWR1U21sU2JIQndWVzEwZDFkV1duUmpSWFJwVFZaYVdGZHJXbXRYYXpCNVlVWmFWVll6YUV4Vk1WcFdaVmRTU1ZSc2NGZGhNbmN5Vm14a05GWXhXblJUYTJSVVlUSm9hRlZ0ZUhkamJGbDRXa1U1VTJKV1NraFhhMVV4VlRGS1YyTkZiRmROVjFGM1ZtcEtTbVZXU25OYVJsSm9UVmhDVmxkWE1UQlpWMFpIVjI1U2JGSXdXbFpWYlhoTFYxWndWbUZIZEZaTlZuQjVWR3hhWVZac1dqWlNhMmhYVW5wR1NGUnRlR0ZqYlZKSFdrWmtVMVl6VVRCV2FrWmhXVmROZUZwRlpGVmlhelZ2VldwT2IxWldWWGRXYTNSWVlrZFNXVnBGV21GVWJFbDRWMjV3V0dFeWFFaFdhMlJIVG0xS1IxWnNaR2hoTUc5NlZsY3hORll4WkVaTlZteGhVakpvV0ZscmFFTlhWbVJZWTBVNWFVMVhVa2hYYTFaelZXMUZlbUZHYkZkaVZFWlVWbXRhZDFKc1pITlViWFJYWWtad05WWkhlR0ZVTVdSSFUyNUthbEpVUmxoVVZ6VnZZVVphY1ZKck5XdE5SRVpYVjJ0a1IxVXlTbGRUYmxwWFZrVktWMVJXWkVwbFJtUjFWV3M1VjFaVVZsbFdiVEUwV1Zaa1YxVnNaRlpoTURWdlZXMTRkMVpzVm5ST1dHUlhUVVJHTVZWWE1XOVdNREZ4VW10NFYwMUhVbGhWTVZwUFl6RmFjMXBHWkdsVFJVVjVWbTE0VTFJeGJGaFZXR2hWWWtkU2FGVXdXa3RqVmxaeFUycFNXRlpzV25wV1YzaFBWREZLYzJOR1dsWmlXR2h5Vm1wQmVGWnJNVlZXYkZwT1lteEtNbFp0ZUdGaE1VNUlWbXRzVW1KR2NHOVpXSEJYVmxaa1YxWnRSbGhpVmtZMFZqSjRjMkZHU1hwaFNFSldZa1pLV0ZZd1dscGxWMUpJVDFaV1RtRXhjRmxXYWtvMFlqSktSMU5zYkZKaVZWcGhWbXRXZDJSc2JGWlhiazVYVm10d01GcEZXazloVmxwWlVXdHdWMUl6YUdoYVJFWlRZekZPV1dKSGFGTlNia0paVmxjeE5GbFhUbk5XYmtaVFlYcHNWRmxZY0hOWFJteHlWMjEwYUZKVVFqTlZNbmhYVmpGS2MxZHVSbFZpUmxWNFZXcEdkMUl4Y0VkaFIyeFlVbXR3VWxac1pEUlZNVWw0VTFob2FWTkZjRmhaYlhNeFdWWmFkR042UmxOTlZsWTFWR3hXTUZZeVNsWlhibXhhVFVkb1RGWXlNVXRYVjBaSVlVWmthVlpGV2tsV1ZFWmhWVEpTUjFOdVVtbFNhelZaVld4V2QxTnNXblJOU0dSc1VsUkdTRlpXYUc5WFJtUklZVVpzV21FeVVuWldiWGh6WXpGV2MxcEdjRmRpV0doYVYxUk9kMUl4V2taTlZtUllWa1Z3VjFadWNGZFZSbHBGVW0xR2FtSkhVakZaTUZwaFlWWmFSbFpZWkZkaVdFSk1WV3BLVTFOR1duSmFSMFpUWWxaS2QxWlhjRWRTTURCNFYyeG9hbEpYVWxWVVZsWnpUa1phU0U1Vk9WcFdhM0I1VlRKNGIxZHNaRWxSYkdoWFlrWndhRnBGWkZkVFJrcDBaRVUxVjJKclNscFdiWGhyVFVac1YxZHNhRk5YUjFKUVZtcEtiMWxXYkhKWGJGcHNVbXhXTlZwVmFFOWhiVXBIVjI1c1YxSjZSblpaVmxwaFYxWkdjMkZHWkdoaE0wRjZWbGR3UjJFeVVrZFhibFpVWWxoQ1ZGUlhNVzlpTVZwWVRsaGtVMDFXV2toWk1GWmhWakZrU0dGR1ZsWmlWRlpFVlRGYWQxSnNXbFZTYldoWFlsWktTbFl5TlhkVE1WbDNUVlpvVmxkSFVsaFZhMVpoVWpGd1YxZHNaR3BOYTFwSVZsZDRiMVpHU2xaalJteFhZbFJHTTFWNlJsWmxWbEoxVkd4YWFWSXlhSGhXVkVKV1RWWldSMWR1VWs1V1JrcFpXV3RrTkdWV1duUmplbFpvVW14d2VWbHJVazlXTURGMVlVUk9WMkZyV21oVWJYaEhWbFpLYzJGR1pHbFRSVW8xVm14amQyVkdUWGhVYTFwUFZtMVNjVlZ0TVZOalJscHpWV3RhYkdKR2NIaFZNalZyVmtVeFZrNVVRbGRpVkZaUVZteGtTMk14VG5WVGJGcG9ZVEJ3YjFacVJtRldNazE0WTBWV1ZtSllVbGhaYkZwTFRsWmFkRTFJYUd0TlZrWTBWVEkxVTFWR1drZFhiR2hXWVdzMVZGcFhlR0ZqYkhCR1pFZHdUbUY2Vmt0V1ZFbzBXVmRHU0ZKWWFHcFNlbXhaVm10V1lXRkdjRVZTYTNScVRWVTFNVlp0ZUc5aFZsbDVZVWhhVjFKdFRYaFpha1pQWXpGa2RWVnJOVk5TVm5CWlZrWmFhMVV5VmxkVmJGcG9Vak5TYjFacVJtRmxWbGw1VFZWa1YxWnNjRmxXVnpWaFZqSkZlR05JY0ZwTmJtaHlXa1phZDFJeFVuTlViV2hPVm5wcmVsWnFSbXROUjBWM1RsVmtZVkpYVWxWWmJYUjNZMVpWZDJGRlRsaFdiR3d6V1ZWV1QxWldTbk5qUlZwV1RXNW9VRmxYYzNoamF6VldXa1p3VjFadVFubFdha0poVXpKTmVWUnJXbGhpUjFKUFdXMTBTMVZXV2xkVmEzUldUVlZzTlZWc2FIZGhWa3BWVm14U1ZtSllhRE5hVmxwaFYwZFdTR1JGT1ZOaGVsWlpWbXBLTUdJeVJuTlRiRnBQVjBWS1YxbHNVa2RXUmxaeFVteGFiRlpVVmxkVU1WcHZZVWRXY2xOVVJsaGlSbHBZVmxSR2EyTnJNVlpoUmxwb1RUSm9XVlpHV21Ga01VNUhZMFZrV0dKWVVuSlZha0V4VTFac2NscElUbFpOVm5BeFZWWm9iMVl5U2xsUmEyaFhWa1ZhVDFwVldtRlhWMHBIVm14b1UwMHlhRmRXTVZwVFVqRk5lVlJ1VGxaaVIyaFBWbTF6TVZsV1duUmxSWFJZVW14d1dWUnNWVFZoUjBwSFkwUkNZVlpXY0hKV01HUkdaVVprZFZOc2NHaE5XRUp2Vm1wR2ExSXhTbk5YYms1WVlrZFNjMWxVUm5OT2JGcDBZMFZrVjJKV1drbFdSelZMVkRGYWRHVkdiRnBoTWxKMlZqQmFjMk14Y0VoUFZsWlhZa2QzTVZaR1ZtOWlNVnBXVFZaYWFsSlhlRmhXYlRGdlpXeGtWMWRyZEd0V2ExcDVWREZhYTJGRk1YTlNXR1JYVW14S1NGbFVSbXRTYXpGV1ZteE9hVkp1UW5kV2JYaFRVbTFXYzFwR2FHdFNiVkp3VkZaYWQxZFdWWGxsUjNSb1lrVTFSMWt3WkVkWGJVVjRZMFY0WVZZemFETlZiRnBMWkVkU1NHTkhiRk5OVlhCWVZtMHdkMlZGTVVkVmJrNVZZVEpvYjFWc1duZFhSbHAwVFZVNVQxSnNjRVpWYlhRd1ZrWktjbU5JY0ZkTmJtaFFXVlphWVZJeFpITlhiR1JwVjBkb1dGWkdXbUZTYlZaSFkwVnNVMkpGY0hCWldIQlhWbFphV0UxVVFscFdiVkpZVjJ0b1MxWXlTblJWYkdSYVYwaENTRlZxUmxwbFZUVlhXa1prYUdWcldsbFdha28wVVRGYWMxZFljR2hTUlhCb1ZXdFdkMVJHVm5SbFJtUnFUVlUxZWxkclZURmhWa3BaVVdzMVYySllhR2hXVkVaR1pVWlNXVnBGTlZSU01taDRWbGN3ZUZVeVNYaFdibEpxWld0YWNWVnRlRXRYVm5CR1lVVTVWVTFXY0hwVk1qVjNWMGRGZVZSVVJscFdWMUpNVlcweFMxSldXblJTYkU1WFRXMWtObFp0TVRCWlZteFhXa1ZvVTJFeGNGZFphMXBoWTBaV2RFNVZUazVXYlZKNlZqSjRZVlF4V25SVmEyeFdUVzVTZGxsVldrcGxWMVpIWVVad2FFMXRhRVZXUjNSaFYyMVdXRlZyWkdGU2JGcFBWV3RXU2sxR1pGaGpSVGxwVFZac05WVnNhSE5XYlVweVUyeGtXbUV5VWxSV2ExcGFaREZrZEZKdGNFNVdiSEEyVmpKMFlWUXhXWGxUYTJ4U1lXeGFXRmxYZEhKbFJscEZVbTFHYWsxWFVqRlZNakYzVlRKR05sWnRhRmRTYkZweVZrUkJNVkl5U2tkaFJUVlhWMFpLV1ZadGNFTmtNVXB6Vm14b2JGSnJOVmhVVmxwelRrWlZlV1ZGWkZkTlZYQjZWakkxUzFZeVJuSlhia3BYWVd0YVRGcEdXbGRrUjFaSFZHczFUbEpZUVRKV2JUQjRUVVpzVjFkWVpFOVdWMUpvVlRCV2QxZEdiSE5oUms1cVZteEtXVmw2VG05VWF6RllaVWhzVjJKVVFURlpWVnBoWTJzMVZtRkdXazVoYkZwSlZtMHdlRk15VWxkU2JsWnFVbXhhY0ZWdE5VSmxiRnBZVFZSU1ZrMXJOWHBXVnpWVFlWWktkRlZyT1ZaaVZGWkVWMVphWVdOc2NFVlZiV2hPVWtWYVNWWXlkR0ZaVmxKeldrVmtXR0pVYkZkVVZXUlRWa1paZUZkdFJtdFdNRFZJVjJ0YVYxVXlTbGxoUm1oWFRXNVNWMVJzWkVabFJtUlpXa1prYUdGNlZtOVdWM2hoV1ZaYVIySkdXbGhpVlZwWVZtMTBkMDFXV25SbFIzUlhUVlZ3V0Zrd1VrdFdNa3BJVlZSQ1lWSjZSbGhXYWtaWFl6SktTR0pHVG1sV2EzQXpWbTF3UTJFeVNYbFZXR2hZWW10YVUxbHJXbmRqTVZaeFVXNWtiR0pIZUhsV01qRXdWMGRHTmxGcVZscFdWMmhNVm14YVlWZEdWbFZSYkZwT1ZtNUNWVlp0Y0VkV01rNXpZMFZvYUZJeWFITlpWRUp5WkRGYWMxa3paR3ROUkVaWVYydFdhMWRIUm5OalJsSmFZVEpTVkZZeFduTlhSMUpKV2taU1UySkhkM3BXYlhodllqRmtSMWR1VmxKaE1uaGhXVlJHVm1WR1draGxSWFJQWWxWV05sa3dXbXRoUjBWNVQwaGtXRlpzU2toV2FrcE9aVlpPV1dOSGFGTk5NRXBWVjFkNGIySXhaSE5hUm1oc1VucHNjRlJYY3pGVFJteHlWMjEwVjAxclZqWldWelZMVmxaYWRGVnNVbFZXVm5CNldUSjRZV05yT1ZkV2JXeFRWak5rTmxadGNFdE5SMDE0VjFoc1ZHSkdXbGhaYlRWRFYxWmFkR1ZJWkZkTldFSkdWVzF6TldFeFduVlJhMmhhVFVaVmVGWkhNVXRrUjBaR1YyeGtUbUpzU205WFZsSkhWRzFSZDA1V1pHRlNhelZ3V1ZSR2QxWldaRmhsUnpsU1RWWkdORmxyYUV0WFIwcDBWVzVPVjJKWWFGaFVhMXBoWkVVeFZWRnRhR2hsYTFvMlZsUktOR0V4WkhSU1dHaFlZbXh3V0ZWcVRtOWpiRlp4VTJzNVZGSXdXa2hXTW5NeFZUSktjbE51V2xkTmJtaHlWR3RrUm1WV1VsbGhSbEpwWWtad2IxWlhjRTlSTVZwSFZXeGFhRkpWTldGV2JYaDNWMFprV1dORlpGaGlSbXd6VmpKd1ExWnJNWEZXYkVKWFZrVndURlpzV21Ga1JrcHpXa2RzVjFKV2NGSldhMlF3V1ZkUmVGTnNaRk5pYTNCUlZtcE9VMVpHVWxaaFJVNVVUVlp3ZWxkVVRtOWhNREZYVm1wV1YySlVWbFJaVkVwWFkyeGtjMkpHY0ZkU1ZuQnZWbXhXWVZZeFdsZFViazVWWWxoU1ZGbHJWbmRPUmxweVdUTm9hMDFXY0VoVk1uaGhZV3hPU0ZWc2FGcFdNMUpNVmpCYVYwNXNSbGxoUjNCT1lURlpNbGRYZEZaT1ZsbDVVbGh3VW1KVWJGaFZiVEZUVG14d1ZsWlVSbXBOYTNCS1ZUSXhiMVpHU1hoVGJGWlhWbnBDTTFSc1ZURldNVlpaWVVkb1UxWXhTbGxXVnpFMFpERmtSMWR1VGxaaE1sSmhWbTEwZDFJeGEzZFhiRTVYWVhwR1NWWlhkRFJXYXpGWFkwaEtZVkpYVWt4Vk1HUkxVMGRHU0dWSGFFNVhSVXBSVm0wd2VHUXhSWGhXV0doV1YwZG9jRlZ0TVc5V1ZteFZVMjA1VjJKSGVEQmFWVll3VmpGYWRHVkVRbUZXVjJoeVdWZDRZV014VG5OaVIwWlhWakZLU1ZkV1dtRlpWMUpJVm10c2FsSnRhRmxWTUZaTFYxWmtWMVpzV214U2JWSllWVzAxVDFZeVNrZGpSbWhhWVRGYU0xUnRlR0ZXVms1eFZXeFNUbFpZUWpaV2Fra3hVekpLUjFOdVVtaFNiRXBYV1d0a2IxSkdXbk5YYlhSWVVqRktTVlZ0TVhkVWJVcEdZMFpzVjJGcmEzaFdWRVpTWlVaa2RWVnRlRk5XUjNob1ZtMXdUMVV4YkZkalJtUllZa2hDYzFacVJrdFRWbkJHVjIxMGFGWnJiekpaV0hCRFZqRmFkRlZVUWxkV1JWcFlXWHBHZDFKdFJrZFhiV2hPVm01Q1lWWXhXbXRsYXpGWFUydGthRTB5YUZsWmJYTXhZMVpzY21GRlRsTk5WMUo1VjJ0U1UyRkdXbk5qUmxwWFZtMW9kbFpxUm1Ga1JsWlZVV3hhYUdFelFrMVdWM0JIWkRGS2MyTkZaRlppVjJod1ZXMDFRMWxXV25STlNHUnNVbXhLTUZadGRHdGhiRXAwWVVoT1ZrMUhVbFJaTW5oWFl6RldkVlJzYUdsU00yZzFWakowYjFReFdYZE5WbVJxVTBoQ1lWbHROVU5UUmxsM1YyMUdVMkpWY0VaV1IzaFhZVlpKZUZOc2JGZGlWRUkwVmxSR1MyTXhjRWxVYlVaVFRXMW9kMVpYZUc5Uk1rbDRWMjVLV0dKWVVsQlZiVEUwVmpGU1ZtRkhPV2hpUlhCWVdUQmtiMVpyTVVkV1dHaGFUVzVvZWxsNlJtRmtWbkJJWkVVMVYwMHlhR2hXTVZKRFlURkplRlpZYUZSWFIxSlpXV3RrVTFZeGJITlZhMHBzVW14d2VWWXlNVWRXTWtZMlZteGtWMVl6YUROV2FrWkxWakpKZW1OR1pHaGhNSEJ2VjFaU1IyRXhTWGxVYTFwaFVqSjRWRlpyV21GWFZscFlZMFU1YVdKV1ducFdNV2h2VjJzd2VWVnVUbFpoYTBZMFZGUkdVMVl4V25Sa1JuQlhWa1ZKTVZkV1ZtRlNNVnAwVTI1V1VtSnVRbUZVVmxwM1ZrWlpkMXBHWkZSU2EzQXdXbFZrYzFVd01WWmlSRTVYVFZkUmQxWlVSbEpsUjBwSFYyczFWMVl6YUZoWFZtUXdVekZaZUdKSVRsWmlSMUp6V1d0a1UxZEdXbk5oUjNSb1RVUkdSbFZ0ZUhkWGF6RkhZMFpTVjJGcldtaFdiRnBoVjFkS1IyRkdaRk5XYmtJMVZteGpkMlZHV1hsVVdHeFZZVEZ3YjFWcVNtOVdSbEpWVVd0MGEwMVdjREJaTUZaclZrZEdObEp1Y0ZkaVdFSm9WbFJLUzFKck5WbFRiSEJvVFZaWk1GWkdVa2RqTWs1elYyNU9WV0pHY0hCVmJURXpUVlphYzFwRVFrNVNiSEI2VmpKMFlWWkhSWGxoUjBaYVlrZG9kbFpWV21Ga1IxWkhWRzF3YVZKcmIzZFhiRlpyWXpGWmVWSlljRkppVjJoWVdXdGFkMk5XY0ZaV1ZFWlVVbXR3TVZaWGVFOWhWa2w1WVVoYVYxWXphSEpXVkVwSFVqRmtkVlJ0UmxOaGVsWllWbGN3ZUU1SFZsZGFTRXBYVmtaYVdGVnRlSGRsYkZsNVkwVmtWMkpHYnpKVmJUVjNWakZLTmxKcmFGcGxhMXBRV1RGYWEyTXhaSEpPVm1ScFUwVkdOVlp0TVRCVk1VMTRWRmhvVldFeVVsWlpiWFIzWWpGV2RFMVhPVmhXYkZwNlZtMDFhMVpWTVZoVmJHeGhVbFp3VUZsWGMzaGpiVTVIWVVad2FFMVlRbmxXYWtsNFZqSk9jMXBJVmxOaVJuQnZXVlJHZDFSV1dsVlJiVVpXWWxaYVNGa3dWbTlWTWtwSFYyeFNXbFpGV21GVVYzaGhWakZyZWxwRk9WZGlWa28xVmtaYWIxSXhWWGxUYmtwcVVqSm9XRmxYY3pGVk1WSldWMnhrYW1KSFVubFhhMXB2VmpKRmVsRnFWbGhpUmxweVdYcEdhMUl4VG5WVGJHaFhVbGhDV1ZkV1pEQlpWMFpIWWtoR1UyRjZWbk5XYlhNeFRWWmFXR1ZHWkdoU01IQklXVEJvWVZZeFNuTlhibHBYVmtWYVQxcFZXbUZqTVZwelUyMW9UbUpGY0ROV01XUXdWbXN4VjFkWWFGaGhNbWh5Vld4b1UxbFdXbk5WYTJSVVZtNUNWMVp0ZUd0V01rcEhZbnBLVjJKWVVsUldNRnBoWkVaV2NtRkdaR2xYUjJoUlYydFdWbVZHV1hsU2EyaG9VbFJXY0ZWc2FFTlpWbHB4VW0xR1dsWXdWalJXYkdodldWWktXRlZ1UmxaaVIxSjJWakZhYzJNeGNFVlZiR2hUWW10S1dsWkdXbE5WTWtwSFYyNU9hVkpHV21oV2JGcDNWVVpzVlZOcmRGTmhla1pXVmtkNGQyRkZNVmRqUmxaWFlrZFJNRll5TVZkV01WcDFVMjEwVTJKSVFsbFdWM2hYWkRGT1YxcEdhRTVXUmtwV1ZGWmFkMlZzV2xoT1ZYUlhVakJ3VjFZeWN6VldiVVp5VGxoYVZtSllhR2hXYWtaclpFZFNTR0ZGTldoTldFRXhWbXRhWVdJeFVYaGFSV2hVWW14YVUxbHJaRFJaVm14eVdrWk9UMkpJUWxkV01qRXdZVEZLVlZKc1pGVk5WbkJVVm1wS1IwNXNXbGxoUm1SWFlsVTBNRmRZY0V0U01XUkhWRzVLV0dKWVFsVlZiWFIzVjJ4YWNWRnRPVkpOVmxwSVZqSjRWMVpIUlhsVmJGSlZWak5TV0ZSdGVITmpiSEJKV2taV2FWWldiM2RYYkZaV1RWWlplVk5yWkdwVFJWcFdXV3RhZDFaR1ZuRlNiRTVxVFZkU2VsWnRNVzlVYkU1R1UyNWFWMkV4Y0ZoWlZFRXhVakZPV1dGR1pHbFNNbWhRVm1wQ2ExVXlTWGhYYmxKclUwVTFUMVJXV25OT1ZtdDNXa1ZrV0ZJd2NGaFdNalZ6VjIxRmVGTnNVbGROYWtaSFdsWmFWMk14Vm5OWGF6VlRUVlZ3U2xac1VrZFpWMFY1Vld0a1ZHSnJOVlZaYTJSVFl6RnNjMkZITld4U2JIQjZWbGQwYTFZd01WZFNhbEpXWWxSV1VGbFdWWGRsVjBaSlVteGFhVkl4U2pKV2FrSmhZekpOZUZadVNtRlNiRXBQVm0xNGRtUXhaRlZSYlRsVlRWWktlVlJXV205aE1VcEhWMnhhVjJKVVJuWldWVnB6VmxaS2MyTkhlRk5oZWxZMVYxWldZVll4VW5OWFdHeGhUVE5DV1ZadGVFdFRSbFY1VFZaS2JGSnVRa3BXYlhoUFlWWk9SbE5zY0ZkV00wSlFXV3BCZUdNeGNFbFViVVpUVW10d2VWWkdXbXRWTVU1WFYyNVNhMUo2YkZaWmExcDNWMnhzVmxkdE9WZGlWWEF4VlZjMWQxWXhTbk5qUm1SaFZsWndhRmt5Y3pWV01VNTBZa1pPYkdKWVVUSldha1pyVFVaWmVGWllhRmRpYXpWWlZqQmtORll4YkZWVWJFNVhUVlp3ZVZadGREQldSVEZaVVd0YVZtSlVWa3haYTFwaFZsWmFjMk5HV2s1aWF6QjRWMVpXVm1WR1NsZFhia1pWWWtkU1dGbHJhRU5sVm1SWFZXdGtWVTFyTVRSVk1uaHpXVlpLY2s1WVFsZGhNWEJvVm0xNFlXUkhWa2RYYXpWWFlURlpNRll5ZEc5U01WWjBVMjVLVDFac1NsZFpiR2hUWVVaWmVGZHRkR3BpUm5BeFYydGFZVlJzU2taWGJVWlhWbXh3VkZWcVJtdFNNV1JaWTBaS2FFMHhTbTlXVjNSWFdWVXhjMk5HWkZoaVIxSnhXV3hXZDFOR1dsaE5XRTVYVFVSR01GbFZZelZXTWtWNFkwaEtWV0V4Y0hwV01GcFRZMnh3U0ZKc1RtbFdhM0IyVm14a05GVXlUWGxVYkdScFVteGFWVmxYZUV0V1ZscDBUVlJTYkZadGVGZFdNbk0xWVVaSmQyTkZaRnBpYmtKTVZqSXhSbVZHVG5OaFJtaFhZa2hDVFZadE1YcE5WbHB6Vm01U1UySkZOVlJXTUZaTFZXeFplV1JHWkdoTlZURTBWa2Q0YTFkSFNuTlRia3BXWWxoTmVGbHFSbk5qTWtaSVkwZDRWMkpIZHpGWGExWmhZVEpHUmsxV1dtbFNSbHBYV1d4U1YxWkdXbFZUYTJScVlYcFdXbFZYZUZkV01sWnlWMnhXVjFkSVFraFdha1poVmpGS2RWTnRSbE5OYm1oM1ZsZDRVMVl4WkVkWGJrcGhVa1ZLVlZSV1pEUldNVkpYVm0wNWFWSnJjRmxhVlZwdlYyMUtTR0ZGVWxkaE1YQmhXbFprVG1WdFJraGpSVFZYVFZWdk1GWnRkR3BsUmtsNFZsaG9XR0pHV2xoWlZFWmhWMFphZFdORlRrOVNiSEI0Vlcxek5WVXdNVmRYYWtaWFZucEZNRlpVUVhka01VNXpWMnhrVjJWclZqTlhhMUpDWkRKV1IyTkZaR2hTTTBKVVZqQldTMVZHV2xobFJrNVhUV3hhV0ZZeWRHOVVNVnBXVGxaa1dtRXhjSHBVYkZwaFYwZFNSVkZzWkdsU2JrSklWbFJLTUdJeFpIUlRiR3hvVW10S1dGbHNhRzlXUm10NVpVVTVhMUpyY0hsVWJGcFBWR3N4ZEdGRmFGZGlXR2hvVjFaa1JtVldTbGxoUmxacFlYcFdWbGRYTVRCWlYwNUhWbGhrVjJKdFVsbFdiVEUwWlZaa2NsZHJPVmRXYTNCNlZUSjRiMVl3TVhGV2JXaGFZVEZ3VEZac1pFdFNNazVIV2taa2JHRXhiekpXYlhScVpVWk5lRk51VWxWaE1uaHhWVzE0ZDFReFduUmxTR1JYVW0xU2VWWlhkR3RoTWtwWFVtcE9WVlpzY0doV2EyUkxWMGRXUms5V2NHbFNia0pOVm10V1lWbFdXWGhXYmtwVllrVTFUMWxVVGtOT2JGcHlXa1JTV2xac2NGbFZiR2hyWVd4SmVXRkdXbGRpUjFKVFZGVmFWMk14WkhOYVJtUk9WMFZLU2xkclZtRlZNa1pYVTJ4a1dGZElRbGhXYTFaM1RURmtWMWR1VGxkTlYxSXhWbGN4YjFVeFdraGxSemxYVm5wQ05GWlVSbEpsUjA1SFlVZDRVMkpXU25sV1YzQkhVekZPVjFadVVteFNlbXhYVkZaa1UxSXhWbk5oUnpsWFRXdFdORll5TlVkV1ZscDBWV3RrWVZac2NHaFpla3BIVWpGU2RHSkdUazVOYldoYVZtcEdhMDVIU1hsVFdHaFdZa2RTV0ZscldtRldWbXh5VmxSR1YxSnRlSGxYYTFKVFYwWktkR1ZHWkZkaVJrcFlXVlZhUzJOdFRrVlJiVVpYVm10d1JWWXhXbUZaVm1SSFZteFdVbUpIYUZoWmEyaERVMFprY2xWclpGVk5iRXBZVmtjMVQyRkdTWGxsUmxKVlZteGFNMVpIZUdGamJHUjBVbXh3VjAxVldYcFdSM2hoWVRGVmVWTnVUbGhpUjFKaFdXdGtVazFHV2tWU2JrNXFZa1p3TVZkclpEUmhWa3AxVVd0b1YwMXVVbFJXVkVaU1pVWk9XV0ZHVW1sU01VcG9Wa1pXWVZNeFpFZGlSbHBYVjBkb1ZWWnRlR0ZsVm5CR1YyMUdWMDFWY0ZkWk1GWnpWMFphTmxKVVFsZFNSVnBvV1hwR1YyUldUbk5WYld4WFZtNUNVVlpzWkhkVU1rbDRVMjVPV0dKSFVtRlVWRXB2VlVaV2NWRnRSbGhTYkhCSldrVmtSMVpWTVZoVmEyUlZZa1p3YUZac1dtRk9iRXB6Vld4V1YwMHlhSGxYVkVaaFVqSlNWMVZ1VGxWaVJUVnZWRlpvUTFsV1duRlRha0pYVFd4R05GWnROVXRVYkZwWFkwWnNXbUpZYUdoV2FrWlRWakZrZEZKc1dsTmlSbkJhVjJ4V2IxbFhSWGROV0VwcVVsZFNXRlpxVG05VVJteFhXa1YwVjAxVk5URlpWVnB2VmpBd2VXRkliRmRTTTFKWFdsVmFXbVZXVW5KWGJHaHBVakpvV1ZaWE1UUmtNbFp6V2tab2JGSXdXbFZVVmxVeFYwWmFkRTVXVGxWaVIxSkpWbGN3TlZadFJuSlhiV2hYVFZad2Nsa3lNVWRUUjFKSFYyMW9iR0V4YkROV2JYaHJaREZSZUZwSVRsaGhNWEJaV1Zkek1WZEdVbFpYYm1ScVlrWnNNMVl5Tld0V1JrcHlZMGh3VjFJelRYaFdSekZMVjBacmVtSkdaR2hoTVhCNVZrZDBhMUp0VmtkYVJteGhVbFJXV0ZacVNtOVdWbVJYVld0MGFVMVdXbGhXTWpWSFZsZEtSazVXV2xkaVdHaG9XbFZhVjJSRk5WaFNiV3hUWVROQmQxZHNWbE5STVZwWFYyNU9WMWRIYUdGV2FrNXZWRVphYzFwRmRGUldiSEI2V1RCa2IyRkZNSGRUYWxaWFlrWktURlJyV2t0a1JsWlpZVVpTYVdKRmNGRldiVEI0WWpKSmVGVnNhR3hTV0ZKWlZtMHhVMWRXY0ZaWGJYUm9ZWHBHVjFSc1ZtOVhSMFY1WVVab1YwMUhVa3hXTVZwSFpGWkdjMXBIYUU1V2JrSjJWakowYTA1SFJYbFViazVZWW1zMWNWVnNVbk5YUmxKWFZtNWtWRlp0VWxaVlZ6RkhZV3N4VjJOR2JGWk5hbFpZVmxjeFMxWnNaSE5oUm5CWFRURkplbFp0ZEdGak1EVnpVMjVLVDFZelVrOVdhazVTVFd4a1YxWnRkRTlTTUZwWVZrZDBZVlV4WkVoaFJteGFWa1ZhVEZaRlduTldWa3B6Vkd4U1UyRjZWalpXYWtvMFlqSkdTRk5yWkdwU2JrSlpWbTB4VTA1c1VsZFhiRXBzVWpCd1JsWXllRXRoVjBZMlZteFdWMVl6UWtSWmVrRXhZekZhZFZWck5WZGxiWGhYVjFab2QxSXlWbk5XV0d4UFZqQmFXVlZ0ZUhkU01XeHlWV3hPV0dKR2NFZFpNRnB2VjJzeGNWSnNVbFpoYTFwb1drVmtTMUpyTlZkVmJFNW9UVEJLVDFadE1UUlpWbFY0VWxob1ZGZEhlRlZaYlhNeFZteHNjbGR1WkZkaVIzaFdWVmMxYTJGR1NuTlRiR1JZWVRGS1ZGWlVSbUZqTVdSellrWldhVkpzY0ZGV2FrbzBWMjFSZUZwSVRtRlNiSEJQV1ZkMFNrMUdXWGhYYlVaVVRVUldlbFV5TlU5aFJrbDNWMnhvV21FeWFFUlViWGhyWTJ4YWMxZHJPVmRpVmtwYVZtdGtNR0l4VlhsVGEyaFdZbFJzWVZsclpHOWpiRkpWVW14d2JGSnVRa3BYYTFwVFZHeGFjMWRVUmxkV1JXOTNWMVphVjFJeFpIRlhiR1JwWVRCd1YxWnROWGRTTVZwSFZtcGFVMkpIVWxoV2JYUmhaVlprY2xwSVRtaFdhM0JXVm0xNGIxWXlSWGxWV0dSV1pXdGFlbFp0YzNoV2JVWklaVVpPVjJKSVFsbFdiVEIzWlVaVmVWUnVUbGRYUjNoelZXeGFkMk5zVWxkV1ZFWnNVbXhzTlZwVldtdFdNREZ5VjFSS1YySllVbFJXYWtaTFVteGtjMkZHY0d4aE1YQlJWbTF3UjFZeVVsZFRiazVVWWxkNFdWVnNWbmROYkZwMFRWaGtWRTFyYkRWV1Z6VlBXVlpLYzFkc1ZsZE5SMUoyV1dwR1UxZEhWa2hTYlhoWFltdEtTRlpxU1hoTlIwWklVMnhrV0dKdVFtRlVWVnBXWlVaYWNWTnJXbXhTYlZJd1dWVmFkMVl4U2xkalJXaFlZa1p3Y2xWNlJrdGpNVkoxVld4T2FHVnNXbFZXUmxKTFlqRkplRmR1VGxoaVZWcHZWRmQwVjA1R1draE9WVGxXVFZkU1NWWlhlRk5YYlVwSFUyeG9WMkpHY0doWmVrWmhWbFpLYzFOck5WZE5WVzh3Vm14YWFrMVdVWGhYYTJSWVltczFWVmxyYUVOWlZteFZVbTFHVGsxV2NGWlZiWFF3VlRKS1JrNVVSbGRpV0dob1ZrY3hSMk14WkhGWGJHUlRZa1Z3U1ZkclkzaFZiVlpYVlc1S1YySkhVbTlhVnpFMFYyeGFXR1ZIUm10TmJFWTBWakowYTFkck1IbGhSa0pXWWtaS1NGWXdXbUZTTWtaSVpFWm9VMDFJUVhoV1ZtTXhVVEZrYzFkcldrOVdWa3BZVkZjMWIyRkdWbkZTYkdSclZteEtlbFpYY3pGV01ERldZMFZzVjJFeGNHaFpha1phWlVaa2NscEdhR2xTYmtKUlZtMHdlRlV4WkZkaVJtaHJVbGhDY2xSV1dsZE5NV1J5VmxSR2FWSXdjRWhWTWpWelYyc3hSMk5HVWxkV1JWcHlWVzE0VDJOV1pITmFSVFZYWVROQ1JsWXhaSGRTTVZGNVZXdGtWV0pIZUhCVmJYaDNZMFpzVlZGdVpHdGlSbkJJVmxkMFQxWkZNVlpOVkZKWFlsUldTRlpVU2t0a1JsWnlUMVp3YUUxc1JqTldSM2hoWXpKT2MxZHVTbEJXTW1od1ZteGFXazFzWkZkV2JHUlhUVlp3ZWxZeGFIZFZiVVY2WVVaa1ZWWjZWblpWZWtaM1ZqRndSMXBHVGxkaE0wSTJWbXhrTkdFeFdYZE5WbHBZVjBoQ1dGbFVSbmRXUmxaeFUyczFiRkp1UWtoWGExcFhZVmRLUm1OR1JsZGlXRUpRVlZSS1RtVkdaSFZUYkdocFZsWndVRlpHV210Vk1sWlhWMjVTVGxaRlNsaFVWVkpIWld4VmVXUklUbGROVld3MlZWZDRiMWRHV25OV2FrNWhVa1ZhVUZsNlNrOVNNWEJIV2taT1YyVnRkRFpXYlRFd1ZqRnNWMVZZYUZoaWF6VlhXVzEwZDFaV2JITldiVVpWVFZaYWVGWkhNRFZWTWtwSFkwWm9WMDFxUlhkWlZWVjRWbXMxV1dOR1dtbFNNbWg1Vm14U1MxTXhXbGRYYms1WFlrZFNjRlZ0ZUZkT1JscFhWV3RrYUUxck5WaFdSelZMVkRGWmVtRkdhRnBoTW1oRFdsVmFXbVZYVWtkYVIzUk9WbXhaTUZaVVNqQlpWbHBJVTI1T1dHSkhVbFpXYWs1RFYwWndXR1ZHVGxkV2EzQXhWakl4TUZSdFJqWldhMlJYWWxSRk1GVjZTa2RYUmtwWldrZHdVMlZ0ZUZwV2JURTBaREZrUjFadVJsUmlSVFZ4VkZkMFYwNXNhM2RhU0dSV1RWWndNVlZYTURWV01VcHpZMGhLVldFeGNISldha1pYWkZaU2RGSnNUbE5XV0VKWFZqRmtNRlpyTVZkVFdHaFdZa2RTVjFsclpGTlhSbFp6Vld0a1YwMVdTbnBXYlhoUFYwZEtWbFpxVmxkV00xRXdWbTF6ZUZZeVRrZFZiVVpUVmpGS1dWWlhNSGhVTVVsNFZHNUtUMVl5YUhOWmExcGFUVVphZEdWSFJsWk5WVEUxVmtab2IxVXlTbkpPV0VKVlZrVndWRmt3V2xkak1XUnlaRVphVGxadVFqUldWRW8wVkRGYVJrMVdaRmhpUm5CWFZtcE9VMk5zYkZkYVJYUlRZWHBXV0ZkcldtdFZNREI0VTJzeFYwMVdjRmRhVlZwUFUwWmFjbGR0YkZOTlJuQlpWbTF3UzJJeFNsZGFSbVJZWWxoU1ZWUldXbk5PUmxsNVRsWk9WVTFXY0hwWk1GcFRWMnhrU1ZGc2FGWmhNWEJ5VmpCVmVGWldWbk5VYld4WFlraENXbFpzVWtwTlZsbDRWMnhvVkdKSGFITlZiWE14Vm14YWMxZHRSbXhpUmtvd1dsVmtNRll3TVZoVmFrSlZUVlp3YUZaSE1VWmxWMUY2WTBab1YwMHhTbGxYVjNCSFZtMVdWMVJ1VmxaaVdHaFVWRmN4YjFZeFduUmtSbVJhVmpCYVNGWlhlR0ZYUjBwWlZXNUdWVlp0VVhwVVYzaFhaRWRPTmxKc1drNVNSVnBIVm14YWIyTXhaRWRYV0hCU1lUTm9ZVlpyVm1GVU1YQldWMjVrVTJKSFVubFViRnB2VlRGYVIxZHRPVmRoTVhCVVZYcEJNVkl4Y0VaYVIzQlRZbGRvZVZaWGRGZFRNV1JIVm01U1RsWkZTbEJXYlRGVFpWWmFkR05GVGxkTmExa3lWVzEwYTFZd01YVlJhM2hYVFVad2FGVnRjekZXVmxKelYyMXNWMUpXY0ZGV01uUlRVekZOZUZOdVVsUmhNbEpZV1d4a05GZFdWbkZUYlRsUFVteHdlbFl5ZUU5V1ZURnlWbXBXVmsxcVZsQlpWVlYzWld4R2RWSnNXbWxTTW1oRlYxUkdZVll5VFhoWGJGWlRZbGhTVDFadGVIZFhWbGw1WkVkMFRsSnNjRWxWTW5SaFZqSkdjazVXWkZwaVJrcERXbFZhWVdOc1pIUlNiR1JvWld4YVdGWnJaRFJpTWtaSVVsaGthbEpHY0ZoV2FrNVRZVVpXY1ZKdGRGTk5helZIVmpJeGQxVXlTa1pqUmxaWFlXdEtXRlY2UVRGak1XUlpZa2QwVTJKV1NuZFdSbHBoWXpBMVYxZHVVbXhTZW14WVZXcENkMlZXVlhsbFJUbFlZbFZ3V2xsVlZqUlhhekZYWTBaU1YwMUdWalJXYlhNMVZqRmFjMVJ0YUd4aVJuQmFWbTB4TUdFd01VZFVXR2hwVW14d1QxWnNaRzlqTVZaelYyMUdWMDFXY0RCVVZscFBZVzFLUjFacVZtRldWbHBvV1ZSQmVGWnJOVmxoUm1ScFYwZG9NbGRXV21GVGJWWllVbXRrVjJKSFVsUlphMmhEWlZaYWNsVnJkRlpOVlhCNVZHeGFZV0ZHU1hkWGJGSlZWbnBXZGxZeWVHRlhSMVpIVkd4a1RsSkZXbGxXYWtvd1dWWmtkRlp1U2xoaVJuQldWbXBPYjFOR1VuTlhiRnBzVmpGS1NWUXhaRzlXTWtWNlVXdG9WMVpGY0RaYVZWcGhZekZrY2xkdGNGTmlSWEJvVm0xd1QySXlWbk5qUlZwaFVsaFNWVlZxUVRGVFZtdDNWMnM1YUZac2NIbFdiWEJUVmpKRmVHTkdhRnBoYTNCTFdsVmFkMUl4Y0VkYVIyeFRUVzFvVTFadE1ERmtNVmw0VjJ4a1dHSnJOVmhXYTFaaFZURlNWMXBHVG14U2JGb3dWR3hrTUZZeFNuSmpTSEJhVFVaS1JGWnNXbUZqTVdSeFZHeGthRTFZUWt4WGJGWmhWREZhVjFOdVRtRlNWRlpZV1cxMFNtVldXbk5YYlhCc1VtczFNRlpXYUhOV2JVVjVaVVprV21FeFZYaFpNRnB6WXpKR1NFOVhiRTVXYmtKSlZteGtNRk15U2tkVFdHaFlZbTVDV0ZWcVRtOWhSbHB6V2tWMGFrMXJOVXBWYlhocllVZEZkMk5HYkZkU2VrVXdXVlJLVDJNeVRrWmhSa0pYVFcxb2QxWnRlRzlSTVdSelYyNU9ZVk5IVW1GV2JYaDNVakZTVjFkdGRGZFNNRnA1V1RCYWExbFdXWHBWYTNoaFZqTm9XRmt5ZUd0amJIQkhZVVpPYVdFd2NFbFdNVkpEV1ZaTmVGVnVUbFJpUjFKeFZXdFdZVmRHV25KV2JVWllVbXh3UmxWdGRHRmlSbHB5WTBoc1dsWldjRmhaVm1STFVtMU9TRTlXWkZkU1ZYQXlWbFpTUjFSdFZrZFhibFpVWWtad2IxUlZVbGRrTVdSWVpFZEdhazFFVm5wWmEyaExWMjFXYzFkdVFsWmhhMHBZVkcxNGMxWnNWbkpVYkdST1lUTkNWMVp0TVRSaU1WbDNUVmhXVldGc1NtRlVWbVJUVkVaVmVGZHJPV3BOYTFwSldXdGFUMVl4U25OaVJGSlhZV3RhVkZWVVJscGxWbEpaWVVaV2FFMXRhRlpYVmxKTFlqRlJlRmR1VG1oU1ZUVllWVzE0UzFkV1VuTlpla1pWWWxWd1NWWlhlRzlXTURGeFVtcE9WMUl6YUdGYVZWcHJZMVpHYzFwR1pFNU5WVzk1Vm0xNFUxTXhUWGxVV0doaFUwWktWRmxyV21GWFJsSlZVMjA1V0ZadFVubFhhMUpUWVcxS1YxZHFRbFpOYmxKWVZteGtTMVpzWkhKUFZuQllVMFZLU0ZaR1pEUlpWMDE0WWtSYVUySllRazlXYlhSM1UxWmFkR1ZIT1doTlZuQkpWVEkxUzFReFdYZFhiVVpYWVRGYU0xcEhlR0ZXYkdSMVZHMXdhVkp1UVhoV2EyUTBWVEZaZVZOcldtcFNNRnBZVm0weFVtUXhjRVZTYkZwclRVUkdXRmxyV2t0WFJrbDZZVVp3VjJKWVVsaGFSRXBYWXpGYWMxWnNVbWxTTVVwNFYxZDRWMlF4U1hoaVJscGhVMFUxV0ZWdGRIZGxiR3QzVm1wU1YwMVdiRFpWVjNSVFYwWmFjMVpZYUZkaGExb3pWVEZhUzJNeFduUmhSM2hwVjBkb01sWnRlR3RPUmxweVRWWm9WbGRIYUZoWmEyUlRZVVpXY1ZSc1RsZFdiWGg1Vm0xNGExUnJNVmRYYWtKVlZsWktTRlpxUmt0ak1rNUhXa1pXYVZKc2NGRldha0pyVWpKT2RGUnJaRkppVlZwVVZtMDFRMkl4WkhKWGJYUlZUVlUxU1ZaWGRHdFpWa3BWVm1zNVdtSkdjRWhVYlhoaFl6RldjbHBHWkU1V2JHOTNWbXhhYjJJeVJsWk5TR3hvVTBWYVYxUlZXbmRoUmxsM1YyNU9hMUl4V2tsVmJYaDNWakpLY2xOc2JGZE5ibEp5VkZWa1MxSXhUblZWYkZwcFVqSm9hRlp0ZUdGWGJWRjRZa1prWVZKWVVsaFpXSEJYVW14V2RFMVZaRlpOVlhCYVZWYzFjMVl5UlhoWGJrcFdZV3RhY2xacVJrdGtWbHAwWWtaT1RsSnVRbFpXYkdRMFlqRkZlRlJzWkdGVFJUVlpXV3hXWVdOc2JITlhiVVpzWWtad1dWcFZhRTlXYlVwV1ZtcFNWazFxUVRGV2FrcExVakZrZEdGSFJsTmlTRUpZVjJ4V1lWbFhUbkpQVm1SVVlsZDRWRnBYTVRCT2JGbDRXa1JDVjAxV1ZqUldiVFZQVjBaa1NHVkdaRnBpUjFKMlZqQmFVMVpzWkhSU2F6Vk9WbXR3TmxacVNURlVNa1p5VFZoS1dHRXlVbFpVVm1SVFpXeHNWbFpZYUd0V01GcEhWMnRhYTFVeVNrZGpTR3hZVm14S1NGbFVSbUZqYXpGWFlrWmFhVkp1UW5kWFZtaDNWakpKZUZkc2FHeFNNRnB4V1Zod1IxZEdiSEpoUlhSYVZtdHdWbGxyYUV0V01rcFpWRmhvVlZac2NHRmFWbFY0VjFad1NHRkdaR2hOTUVwTFZqSjBVMVF5UlhoYVJXUmhVbGQ0VTFsVVRtOVpWbHAxWTBWa1ZFMVlRa1pWTW5oUFZUQXhWazVVUWxwaE1WVjRXVlphWVdOdFRrWk5WbVJwVW01Q1ZWWldVa2RUYlZaWFZHNVdWV0pHV25CVmJUVkRWakZrVjFWclRtdE5hMXBJVmxkNFlWbFdTa2RUYkZaWFlsUkZNRnBXV210V1ZsSjBUMVprVTAxSVFraFhWM1JUVlRGWmQwMVlWbEppUjJoWVZGYzFUMDVHYTNoWGEyUnFWbXhhTUZWdGVHdFVhekYwV2tSYVYyRXlUak5hVlZwUFpFWldXV0pHV21oTldFSjRWbGN4TUdReFVYaFdiazVZWW0xU1QxWnRlSGRXYkZaMFpVZDBWMVpVUmxkV01qVjNWMjFHY2s1WVNscFdiSEJNVm1wR1QyTXhVbk5hUjJob1RUQktWbFpzYUhkU01WbDRWMnhrVTJKcmNHaFZha28wWTBaV2NWUnNTazVXYkhCSVZqSjRhMkZGTVhKWGJuQldUVmRvY2xaSGVHRlNNV1J6WVVad2FFMXNTbFZYVkVvMFdWZFNTRlpyV2xCV2JFcFVWRlpXV2sxc1dYbGtSMFpyVFZaS01GVnROVXRYUjBWNVpVWnNXbFpGV2pOWk1uaGhVMFV4VjFwR1pFNVhSVXBMVm0weE5HSXlSbGRhUlZwVVltMVNXRmxzYUZOWFJtUlhWMnM1VTAxWVFraFdiWGhUVmpGS1YyTkdXbGRTYlZFd1ZYcEJlRkl4WkhKaFJUbFhWbFJXZGxaWE1UQmthekZ6Vm01U1QxWlZOVmhXYlhoM1VqRlZlV05GT1ZkV2JIQllXVEJvUzFZeVJuSmpSV2hXWVd0YVZGcEZXa3RrUjBwSFdrWm9VMVpZUW05V2JUQjNaREpSZDAxV2FGWlhSM2hVV1cxMGQxUXhXWGRXYm1SWVZtMTRNRnBWWkVkWFJscDBaVWhzVjJKR1NraFpWRXBMVTBkV1NXSkdhR2hOVmxWNFYxWlNSMWxYVG5KT1ZsWlRZa2RTV0ZwWGRGcGxiRnB5V1ROb1ZFMVdjSGxVYkZwWFYwZEtSMk5GT1ZkaVdHZ3pWbFphYTJOc1ZuSmtSazVPVmxSV1NWWnNZekZXTVZwMFUyeGFXR0pHV2xkVVZWcGhWRVphUlZKdFJsZE5WbHA1VmtkNFQxUnRTa2RqUld4WFlURndkbGw2UmxOak1XUnlWMnhTYUdWdGVGZFdiVEI0VldzeFIxZFliR3hTYkhCelZteFNSMUpzVm5STlZ6bG9WbXh3ZWxrd1duZFhSMFY0VjI1YVdsWkZXbGhaTW5ONFYxWldkR1ZHVGxkV1JscGhWakZhYTAxR1RYbFdiazVYWW10d1dWbFVTbE5YVmxaMFRsVk9VMDFYZEROV01uUXdWbGRLUm1OR2FGcE5Sa3BJVm1wQmVGWXhUbkprUjBaWFZtNUNhRmRyVWtKbFJscDBVbXRrV0dKWGVGUlVWRXB2VmpGWmVGa3phRTlTYlhoWVZrWm9iMVl4WkVoVmJHaGFZbFJHVkZreFdsTldNWEJGVkdzMWFWSnVRa3BYYkZaclRVZEdTRkpxV2xOaWJrSlhWRmMxVTFWR1dYbE5WV1JxWWxVMVNsVXllR0ZVYlVwMFlVVm9XR0V4U2toVmVrcFRVbXMxVjFwSGNGTldSbHAyVjFaU1IyUXhaSE5YYmtwWVlrZFNiMVJXV2xkT1JtUnlWMjEwVjFZd2NIcFdNbmh2VjJ4YVJrNVZVbGRpUm5CWVdURmFTMk50VGtaT1ZtUnBVak5qZDFadGNFcGtNRFZYVm01U1ZHRXhjRTlXYTFVeFYwWldkV05HWkZWU2JIQlpWRlpXTUZkR1duTlhha1pXVmpOb2FGbFZaRWRPYkZweFUyeGtVMkpHY0c5WFZsSkxWRzFXVjFOdVNtRlNiRnB3Vm1wT2IxVkdaRmRWYTNST1RVUkdXRll5TlU5WFIwcElWV3M1Vm1KVVJUQldNRnBXWlVkR1NFOVdhRk5OU0VJMlZsUktORll4V1hsVGEyaFdZa1pLYUZacVRtOU5NVlp4VW01a1UySklRa2haVlZwcllWWktkRTlVVGxkaVdFSkxXbFZrVW1WR1pISmFSbEpZVTBWS2IxWlhkRlpOVm1SWFYyNUtWMkpyTlZCVmJYaGhaVVpWZVdWRk9WaFNhM0I2VlRKNGQxZHRSWGhqU0ZwYVZtMVNURlV4V2tka1YwWkhZVVprVGsxdGFGWldiRnBUVXpGVmVWUllhRlppUjNodlZXMTRkMk5HYkhKaFJVNVhZa1p3U0ZadE1UQlVNVXB5WTBab1YySllhSEpYVmxwS1pXeFdjMVpzY0doTlZtOTVWa1prTkZZeVVrWk5WVlpYWWtkb2NGVnRNRFJsVmxwWFYyeE9VMDFYZUZoV01qVlBWMFphUmxOc1pGcFdSVm96VlRCYWQxSXhaSE5hUjNSVFRVWndTVll5ZEd0T1IwWlhVMjVTYTJWcldsaFpWM1JoVmtaV05sTnJOV3hTYTNBeFZUSjRRMVl5U2tsUmJtUlhWak5vY2xScldtRmpNa3BIWVVkNFUwMUdjSGhXYlRBeFVURmtSMWRzYUd4U01GcHdWVzE0ZDAxR1dsaE9XR1JZWWtad1dGWXhhR3RYYlVWNVZXdDRWMkpZYUhKWmVrcExVakZhY2s1V1pFNWlWMmhoVm0weGQxSXhXblJXYTJoV1lUSm9XRmxVUm1GV1JteHlXa2M1YWxKc2NIbFdiWFJoWWtaS2MySkVVbGhoTW1neldXdGFTMk50VGtkaVJscE9WakpuZWxkV1dtRlRNbEpJVm10a1lWSnRVbkJaYlhSTFRteGtjbGR0UmxkaVZscElWakkxUzFWR1duSmpTRUpXWW01Q2VWcFhlR3RYUjFKSFZHeGtUbFpzYjNkV1ZFb3dXVlprU0ZOdVNrOVdiV2hXVm14YWQwMHhXa1pYYm1SVVVqRmFTbFpITVhkV01rWTJWbXhrVjFadFRqUlVhMXBhWlVad1JtRkhhRk5TYTNCWlYxZDRiMkl5VG5OaVJsWlVZVEpTV1ZWdGN6RmxiRnAwVFZjNVZrMXNXbnBXTWpGdlYwZEtTRlZxV2xWV2JWSllXWHBLVDFJeVJraGtSazVUWVROQ05WWnNaRFJWTVVsNFdrWmthVkpzY0doVmExcExWMFpXZEdSSVpGZGlSbkF3V1RCVk5WZEdTWGRqUld4WFVqTkNWRlpxU2t0WFYwWkZVMjFHVjFZeFNrMVdWRVpoV1ZkTmVHTkZhR2hTTW1oUFZUQldTMVJzV25SbFJrNVNUVlp3ZVZSV1ZtRlViRnAwVlcwNVZWWkZOVVJaYWtaM1YwZFNTRkp0Y0dsU2JHOTNWa1phVTFVeFpFaFRhMmhzVW0xU1lWWnNXbUZWUm14V1YyeHdhMDFyTlVwWk1GcGhZVlprUjFKWVpGZGlXRkpvVjFaYVlXTnJOVmRYYkZacFVqSm9kbGRXVWtOa01EVnpWMnhvYTFJd1dsZFVWbVJUVTBacmQxWnRkR2hpUld3MVdsVmFiMVpXV2taalJrNWhWak5vWVZwVlduSmxiSEJJWlVaT2FWSXpZM2hXYlRCM1RWWlZlRmRzYUZOaWF6VlpXV3RWTVZkR2JGVlRiRXBPVW14Wk1sVnRlR3RoYlVwSVZXcEdWazFxUlhkV1IzaGhWbFphYzJGR1pFNWliRW95Vm10U1MxSXhXWGhhU0U1b1VqTm9WRll3Vmt0WFZscFlZMFU1VWsxWFVraFphMXB2Vkd4YWRGVnNhRmRpV0dneldsVmFWMWRIVmtoUFZtUk9ZVE5DV2xkV1ZsTlRNV1JJVTJ0b1ZXRnNTbGRaVjNSaFkyeFpkMWRzVG1waVZWcEpXbFZhVDFkR1NsWmpSbHBYWWtkUmQxZFdXazVsVmxaeldrWm9hRTFzU205V1ZFSldUVmRPYzJKSVRsZFdSVnBZVkZaYVMxZEdXbGhOVldSWFRWVndlbGxyVWxkV01WbzJVbTVhVjJGcmNFaFpNbk14VjFaa2MxWnRiRmhTTW1nMVZqRm9kMUl4VlhsVWJrNVZZbXhLYzFWcVNtOWpNV3hWVW01YWJGSnNiRFJYYTJoclZrVXhjbFpxVWxkU2VsWlFWbFJHYTFOR1ZuTlZiSEJwVW10d1dWWXhXbUZWTVZwelkwVm9VRlpzV2xSWmJYUkxVMnhhUjFkdFJsVk5WbkJJVlRKNFYyRldTbk5qUm1SWFltNUNSMVJWV2xwa01XUnlaRVprYVZaVVZrdFhWRUpoV1ZaU2MxZHVUbXBTYkVwWldWUkdTMU5HY0VoTlZtUlRUVmRTTVZVeU1VZFZNREYxWVVaV1YySllRa2hWZWtaclZqRmtkVlZ0ZUZOaGVsWlpWa1phVjJReFpFZFhXR3hQVmxoU1dWVnFRbmRsVmxKelYyMTBWMDFyY0ZwV1YzQlBWakpLUjJOSWNGZGlXR2d6VlRGYWQxSXlSa2RhUm1SVFZtMTNlbFpxU2pSV01WVjRVMWhvYVZKdFVsVlphMXAzVlVaVmQyRkZUbGhXYlhoWldrVmtSMkpHV25WUmJHUlhZa1pLV0ZZd1dtRmpiR1J4VVd4d2FFMXNTalpYVmxwaFV6RlplVk5xV2xSaVIxSllWV3hhZDFkV1pGZFZhMlJXWWxaYVNWWkhkSE5XYlVwR1RsaENWbUZyY0haV1ZscGhaRWRTUjFwR1VrNVdhM0EyVm0weE5GWXhWblJTV0hCV1ltdGFXRmxzVWtkV1JsWjBaVWRHVkZKVVJsZFhhMlJ2VkcxRmVsRnNhRmRoYTI4d1dYcEdXbVZHWkhGWGJFNXBWakpvYUZadGNFOWlNVWw0WTBaa1lWSnJOVlJaYkZwaFUwWmFXR1ZIZEZkTlZuQklWakowVjFZeVJuSmpSRTVXVmtWd1QxcFZXbE5qYlVaSFZXMW9UbUp0YUZwV01XUTBZVEpKZUZwR1pGZGliRXB5VlRCa1UyTnNWblJOVms1WVZtNUNWMWRyYUd0V1ZURlhZa1JPVjJKWVFsaFdha1phWlcxR1NWZHNjR2hOV0VKTVYyeGplRkl4U25SVmEyUllZbGRvVDFac2FFTlNiRmw0V1ROb1QxSXdOVEJXVm1oelZUSkZlR05JU2xaaGF6VlVXVEJhWVdSSFVrbGFSbEpwVW01Q1IxWlhNVFJVTVZaeVRWaEthbEpYYUZsWlZFWmhZVVphY2xwRmRHcGhlbFpZVm0xNFYxWXhXbk5XYWxKWVlURndhRmw2U2xOU2F6RlhWMjFHVTJKWGFGVldiWFJoV1Zac1YxZHNaRnBOTW1oUFZXMTRWMDVXVm5ST1ZrNW9UVVJDTlZaWGVITldNa1p5VGxWU1YxSldjR2hXYkZwSFYxZEdSMkZHVG1obGJGa3hWakZhVjFsWFJYaFhXR3hYWW1zMVdWbFljSE5YUmxwMFpVVjBVMUpzV1RKVk1uUXdWakF4Y2xacVdsaGhNbEoyVm10YVMxWldXbk5SYkdSWFRUQktSRlpHV2xabFJrbDRWMjVXVm1GNmJGaFpiRnBMWkd4a1YyRklaRk5OYkZwNldWUk9hMVp0UlhwVmJHeGFWMGhDU0ZwVldsZFhSMDVHVDFab2FHVnJXa2xXYWtadllURlplRmRxV2xOaE0xSm9WbTE0ZDAweFZuUk5WVGxUVFZVMWVWUnNXazlXTWtweVVtcFNWMkpZUWtoWFZscHpWMFpLZFZOck5WZGlWMmhYVjFaU1MySXhXWGhpUmxaVVlrVTFWMVp0ZUhOTk1WbDVaRVJDYUdKRmNIcFZNbmh6V1ZaYVYxZHFUbHBoTVhCTVdrVmtWMU5YU2tkaFIyaE9WMFZLZGxZeFdtRldiVlpJVkc1U1ZXRXlVbkJWYlhoM1kwWmFjbGR0UmxSV2JWSllWako0WVdFd01YTlNhbFpXVFc1U2VsbFhlRXRqTVU1ellVWmthR0V3VmpOV1JsWmhZVEZhVjFKdVVtdFNiRXBQV1d0V2QxTkdXa1ZTYlVacVRXdGFXRlV5ZUZkVk1rcEdUbFphVjJKR2NHaFVWM2gzVjBkV1NHUkhjRTVXTVVsM1ZrUkdZVmxXVW5SU1dHeHJaV3RhV0ZaclZtRmtiR3cyVW14S2JGSnRVbHBaYTJSdlZrWktWMk5HYUZoV2JWRjNXa2N4VW1WR1ZuTmFSbWhwVjBaS1ZWWnRNWHBOVlRGSFZWaG9ZVko2YkZkVVZWSkhVMnhXVjJGSGRGZE5hM0JKVmtab2IxWXhTa1pYYm5CWFlXdGFhRll4WkV0VFIxSkhWR3hvVTAxdGFGWldiWFJoWVdzeFYxWllhRlJoTWxKd1ZXMTRZVlpXYkZWVWJFNVhWbXhhZUZWdE1VZFdSMHBIWTBac1ZWWnNXbkpXTUZwTFkyMU9TV0pHY0U1U2EzQk5WbXBDWVZkdFZuTlNia3BzVW0xU1dGUlVTbTlWUm1SelZtMTBWVTFWY0RCVmJYUnJXVlpKZVdWR2FGWmlSbkF6VmtaYVlXTXhjRWxhUmxKT1VrWmFTRlpHV21GaE1rWlhVMjVTVm1KVWJGZFpiR2hPWlVac1ZsZHVUbXBOVm5CV1ZXMXpNVll5U2tsUldHUlhVak5vYUZsVVNrZFNhekZYVjIxc1UxSnNjRzlXYlhoaFV6RktSMWRZWkdGU1dGSlVXVmh3VjFkc1dYbE5WV1JYVFd4YWVWWXllSE5XTWtaeVYyMW9WMVpGY0ZCV2FrWkxaRlpXZEdOR1RrNWliV2hhVm0wd2QwMVdSWGRPVldSWVltdGFWVmxYZUV0V01XeHpWMnRrVDFac2NGaFpWV1F3WVZaS2NtTkdhRlpOYm1oUVZqSXhTMVpXV25KVmJIQnNZVEZ3YUZkclVrZFpWbHBYVTI1S1QxWlVWbGhVVkVaR1pVWmFjbGRzWkZaTlZtdzFWVzE0YTFkR1pFaFZiR3hhWVRKUk1GbFZXbUZqTVhCSFUyczFVMkpJUWxsV2FrbDRVakZWZVZOclpHcFNSVnBoVkZWYWQxWkdXbkZTYkhCc1ZqQmFTRlp0ZUc5V01EQjNVMnN4VjJFeFNreFdWRVpLWlVad1NWWnNXbWxXTW1oVlZrWldZV1F4V25OWGJHaE9Wa1ZLY2xsWWNFZFhSbGw0WVVjNVdGSXdjRnBXVjNoaFZsWlplbFZxVGxaTlJuQllWakJrVjFJeGNFZFhiV3hUVFZWd1NWWnJaRFJXTURGSFYyNUtUbFpYVW5GVmJHaHZZVVpXY1ZSdE9XeFdia0pZVm14b2IxWXdNVmxSYTJ4YVZsWndVRmxXWkVaa01rNUdaVVprYVZKdVFuaFdSbHByVkcxV1YxTnVUbGhoZWxaWlZXeFNWMlZHV2xWUmJYUldUVmQ0V0ZscldsZFdSMHBHVGxab1ZWWnNjRWhVYTFwaFl6SkdTRTlXWkU1V1YzZDZWbXBHVTFNeFdYZE5XRlpXWWtaS1lWWnNXbmRoUmxwMFpVZDBhMVpzY0hwV01uTXhWakpLU1ZGc1NsZGlSbkJVVlhwR1YyUkdXbk5hUmxwcFlrWndXRmRYZEZkVE1XUkhWbTVPVjJKdFVuSlVWbHAzVTBaYVdHUkhkRmRTTUZreVZXMTRiMWRzV2taT1dFcFlWbXh3VEZsNlNrOVRSMFpIVm14a2FWSnVRazVXYlRFMFdWWlplRnBGYUZkaE1YQm9WVzB4YjFaR2JISmhSVTVZVm0xU1ZsVlhNVWRoUlRGWFlrUlNWazFYYUROV2JURkxVbXhPYzJGR2NHaE5XRUY2VjFSS05GbFhUbGRUYmtwaFVqTkNjRlZxUmt0T1ZtUnpWbTFHVlUxV1NucFZNblJyVjBkR2NsTnNhRlZXYkhBeldWVmFjMWRIVFhwaFJtUm9aV3RhV0ZacVNYaE9SbFY0VjI1S2FsSnNTbGxXYWs1dlpHeFdWVkp0ZEdwTlZscDZXVlZWTVZZeFNuSmpSa0pYWWxSQmVGVlVSa3BsUm1SeVlVZHdVMVpIZUdoV2JYaFRVakZrVjJORldsWmlSVFZZVm14U1IxZFdiRlpXYkU1WVlrWndNRlpYZERSWGJWWnlWMnQ0WVZKdFVsQlZha1pYWXpGd1IxcEZOVmRYUlVwVVZtMHhkMU50VVhsV2EyUlVWMGRvYUZWc1duZFZSbHAwWlVkR1ZrMVhlRnBaTUZaclZtc3hWMU5zWkZkaVZGWnlXV3RhUzJNeVNrVlViR1JYVFRGR00xZFdaSHBsUjAxNFZHNU9hVkp0VWxoVVZFWkxWbFprVjFac1dteFNhelZZVm0wMVMyRXhTbk5qUm1oV1lrWmFNMVV4V210WFJURlZWV3hXVGxadVFqWldNblJoVmpGWmVWTnNiRkppUmtwV1ZteGtiMUV4Y0VWU2JYUllVakZLU0ZaSGVFdFViRmw0VTJ4b1YxSnNXblpaVkVwSFZtc3hTV0pIYUZOTlJuQm9WMWQwWVZNeFpFZFhia3BZWW10d2NsUldhRU5TTVhCR1YyMDVWazFyY0VwVlYzaDNWakF4ZFZWdGFGWmhhMXBvV1RKemVGWnNaSFJpUlRWT1RVVndZVlp0TVRCV01rMTNUVWhvVm1Kck5WaFdNR1J2VmxaV2RHTjZSbGhpUjNRelZqSXhSMkZHU1hkalJXaGFUVWRvZGxacVJscGxiRVp5WVVaa2FHRXpRbFZYV0hCSFZURmtWMk5GWkZkaVYzaFpWVzEwZDA1R1duTmFTR1JTVFd4R00xUldWbXRoVms1R1kwWmtXbFpGUlhoV01WcGhZekZXY2xSck5VNVdNMmcwVm10amQwNVdaRWhUYkZwcVVteHdXRmxzYUc5V1JsbDVZek5vVkZKc1dubGFWVnByVkd4S2RWRnRPVmRoYTBwWFZGWmFZV05yTVZkYVJsSm9aV3hhVlZacVFsZFRiVkY0VjI1R1UySkZOVk5VVjNSelRsWmFSMkZIZEZWaVJuQlpXVlZhWVZkdFNsbGhSWGhYWVRGd2VscEZaRmRUUmtwMFkwWmthVkpZUW1GV01uaFhZakpGZUZWdVVsUmhNbWh5Vld0YVlWWnNXbk5hUnpscVlrZDRXVnBWVmpCWFJscHpWMjV3VjFJemFETlpWV1JHWld4R2RXSkdaRmRTVnpoM1ZsY3dlRlZ0VmtkVWJsWldZWHBzV0Zsc1pHOVdWbHBZWlVjNVVrMUVWbnBYYTJoTFYwZEtXVlZzVWxWV2JWSlVWakJhWVdSRk5WZFViR2hUVFVoQ1lWWldZekZSTVdSMFVsaG9hbEpGY0doV2JGcDNZMnhyZVdWSFJtdFNNVXBKV1RCVk1XRldTbGxSYTNCWFRWWktSRmRXV2xabFZrcHlXa1pXYUUxdWFGUlhWekY2VFZaa1IxVnNXbGhpUm5CeVZGWm9RMUpzVm5ST1ZYUnBVbXh3VmxWdGVHdFhSMFY1Vlc1YVdsWnNjRkJWYlhoUFl6RmtjMkZIYUU1V1dFSk9WakZhVTFNeFNYbFVia3BPVmxkNGNGVnFUbTlXUmxaMFRsVk9hRkpzY0VoV2JURXdZVlV4VjFOcmFGcE5SbHAyV1d0YVQxTkdWblZUYkZwb1lUQnZlbFpVU2pSWlZrNUdUVlphWVZKdFVtOWFWM1JLVFZaYWMxbDZSbGROVjFKSlZXeG9iMWRIU25KalIwWmFWak5TTTFZd1dtRmpWazV5VDFaT1RtRXhjRWxXYTJONFl6RmtSMU51U21wU1JscFlXV3RhUzFKR1duRlRiRXBzVm1zMVdsbFZaRWRWTWtwSFkwWmFXRll6VW1oYVJFcFBWakZXYzFkdFJsTlNhM0JXVjFkMFlXUXhaRmRWYkZwV1lrZFNiMVZxUW5kV01XdDNWMjA1VjAxRVJuaFZWbEpIVmpBeFNGVnJaR0ZXYlZKSVZXMTRWMlJHU25OYVIyeFhZVE5DVGxacVNqUlpWbXhZVWxoc1ZtSkhVbFJaYlhoTFkwWldkR042UmxWTlZuQXdXbFZvWVdKSFNrZGpSbWhYVmpOUmQxbFZWWGhqTVVweFZXeGFhVmRIYUhsWFZtUTBVekZrU0ZKcmJGVmlSbkJQVlcxNFYwNUdaRlZSYlVaYVZqQTFXRlV5TlU5aGJFbDZWV3M1VjJGck5YWldNRnBhWlVkR1NWcEdaRTVoTVhCSVZrWmFWMWxXVVhoWGExcFVZa2RvV0ZsdE5VTlNNVkpXVjIxMFYwMVlRa2RYYTFwcllWWktWVlpZYUZkTmJsSm9Xa1JLUjFZeFRsbGlSMmhUVm14d1dsZFdVa3RVTURWSFYydFdWR0pGTlZoVVZscDNUVlphV0dWSE9XaFdiR3cyV1ZWYWMxZEhTa2hVYWxKVllUSlNXRlpxUm5kVFZrNXpZVWRzV0ZKcmNGSldiR1IzVVRKUmVGTllhR3BTVm5CWVdXeFNjMVpzYkhKYVJrNVVVbTEwTTFkcll6VldNa3BXWTBSR1ZsWXphSFpXTWpGSFkyeGtkV05HY0d4aE1XOTZWbGR3UjJFeVVraFVhMXBQVm1zMVQxUlhNVzlVUmxwMFRWaGtWR0Y2UmxoVmJHaHpWVEpLU0ZWc1ZsZE5SMUoyVmpGYWMxZEhVa2hTYkdoWFlraEJkMVpHV2xaT1ZsRjRVMjVTYkZOSGVGaFpiR2hEVWtaYWNWSnNjR3ROYTNCR1ZrY3hSMVV4V25OaU0zQlhZa2RTTmxwVldrdGpNWEJKVm14a2FWSnVRbEJXYlRFMFpESldWMXBHWkZaaE0xSldXV3hhWVZkR1draGxTRTVvVm10d2VsVXlOVU5XTWtaeVkwaGFZVkpGV21oV2FrWlhZMnhTYzFWck5XaE5NRXBhVmpGa01GbFhSWGhhU0VwT1UwZDRiMVV3Vm5kV2JGcHhWR3hPYkdKR1NqQmFWVnBoWWtaWmQwNVZaRmRTTTJoMlZtcEdZVkpzWkhGVmJHUlhaV3RaZWxaWWNFZGhNVTVIVTJ4c2FWSXlhRlJaYkdSdllVWmtjMXBFUWxwV1ZFSTBWako0YjFSc1dsbFJiazVYWWxSV1JGVnFSbkprTVdSeVpFWldhVkpZUWxsWFZFSlRVakZaZDAxV1pHcFNNbWhoVm10V1lXTnNiRFpUYTNCc1lsVmFTVlZ0Y3pGVWJVcDBZVVJPVjJKR1NrUlhWbHBPWlZaU2MxcEdaR2xpUm5CNFZsUkNWazFXVmtkWGJsSlBWbFUxVkZSV1duTk9SbHBZWlVkMGFGSlVSbGRaYTFKUFYyMUZlRk5zYUZkaGExcGhXbGQ0UjJOdFJrZGpSbVJwVTBWS1RWWXllRmRaVm14WVZXdGFUMVp0VW5GVmJURlRZMFphY1ZOdE9WWldiSEI0VlRJMWExVXdNVmRXYWxaWFZqTlNhRlpWV21Ga1IxWkhZVVp3YVZKc2NHOVdha0poVmpKU1dGUnJiRlZpUmxwWVdXdGFXazFHV25STldIQlBWbXhhTUZVeWRHOVZSbHBHVGxkR1dsWkZXbWhXYTFwaFYwZFdSMk5IZUZkaVJuQTFWMnRXWVZsV1dYaFRiRnBxVWxSR1dGVnRlRXRUUm10NVRWWmtWMkY2UmxkV2JYaHJZVWRXYzFkc1ZsZFNiRnB5VkZSQmVHTXhaSFZVYlVaVVVqRktXVlpHWkRCWlYxWnpWbGhvYUZKNmJGaFVWM1IzVm14YWRHVkhkRmRpVlhCYVZrWm9iMVp0UlhoalIyaFhZV3RhY2xwRlpGTlNNWEJJWWtaT1RsWlhPSGxXYlRGM1V6QTFSMWRZYkZOaE1YQlBWbXhhWVZkR2JISmFSazVZVW0xNFdWcEZaRWRoUmtwelYyeGFWbUpZVVhkWlZ6RkxWakZPY2xwR2NHaE5XRUpOVjFaV2ExTXhTWGxVYTJoVFlrZFNWRmxzV2twbGJHUlpZMFYwVlUxVmJEVlZNblJyWVVaS1ZWWnNhRnBpUm5CTVdrZDRhMWRIVmtoU2JGSk9WbGhDV1ZkVVFsZFdNVnBJVTJ4c1ZtSkhlR0ZXTUdoRFUwWmFkR1ZJVG1waVZWcEhWMnRhYjJGV1NuVlJiSEJYWWtkUmQxbHFSbk5XTVdSMVZHMXdWRkpzY0c5V2JYQlBZakZPUjFkWWFGaGlSVFZ4V1d4Vk1WTkdXa2hqZWtaV1RWVndlbGxxVG10V01rcFpVV3RvVjFaRldrOWFWbHBQVjFkS1IxUnRhRTVpVjJoWVZqRmplR1ZyTVZkV2JHUllWMGRTYUZWdGN6RldiRnAwWlVoa1dGSnRVbHBaTUZwcllVWlpkMk5GWkZWaVJuQnlWbXBHU21Wc1ZuSmxSbWhYWWtaWk1GWlVRbXRXTVVwelYyNU9XR0pIVW5CV2JYUjNUbFphYzFWcmRFOVNhekUxVmtkNGIxWkhSWGxsUjJoV1lsUldSRmt3V2xkalZrNTBUMVpPVjJKV1NqVldNVkpQWWpGYVZrMVlUbFJpUjJoWVdXeFNWMVpHV1hkYVJYUllVakZhU0ZsVlpFZFdNbFp5Vmxoa1dHSkdjR2haVkVwUFl6RndTVlZ0ZEZOV1IzaFZWa1pXYjFFeFRrZGFSbWhyVW0xU1dGUldXa3RsYkZWNFlVaE9WMkpWY0hsV01uaHJWbFphVjJOSGFGVldSVnBVVmpCa1YxTldjRWRVYld4VFRUSk9OVlp0TUhobGF6RlhWbGhrVGxadFVuRlZha0poVjBaYWRFMVZPVTlTYkVwNVZqSjRUMVV3TVZaalJuQmFZVEpTU0ZacldrdGpNazVJWVVaa2FWWkZTVEJXYTFKQ1RWWkplVlJyV2xkaVJrcHZWRlJDUzJWc1pGaGtSbHBPVmpGYVNGWnRlRzlpUms1R1RsWmFXbUpHV21oYVZscGFaVWRHU1ZSc1pFNVNSVmw0Vm14ak1WbFdXWGxTYmtwcVVsUnNhRlpzWkZOVlJsWnhVbXhrYWsxck5VZFViRlV4VlRGS2MyTkZOVmRpV0doeFdsVmtVbVZXVWxsYVJUVlVVakpvZUZaWE1IaFZNa2w0Vm01U2FtVnJXbkZVVmxwM1RVWlNWMVZzVGxoU2JIQjZWVEkxZDFkc1dsaGhTRXBYVFc1b1lWcEVTazlTTVdSelkwZG9UbFpZUWxwV2JYQktaVVpOZUZOdVNrOVdiWGh3VlcwMVExUXhWblJsU0dSV1ZtMVNWbFZYTVVkVk1ERllWV3RvV2sxR1dtaFpWM2hMWTIxT1JrOVdXbWxTTURCM1YyeFdZVmxYVGxkVWJrWldZbGQ0VDFadGVGcGxiRnBIVjIxR2FVMVdjRmxWTWpWUFZrZEtSbE5zWkZwV00xSXpWbXRhV21WWFZrZFViR2hUVmtWYVYxWnNaSHBOVmxWNVUyeHNWbGRJUWxoVVZtUnZUVEZhY1ZOcmRGTk5WMUphV1ZWYVUyRkZNWFJoUm1SWFVteHdjbGxxUm1GU01rcEhXa1prV0ZJeWFIaFdSbHBXVFZaa2MySkdXbGhpYlZKdlZXeFNSMlZzVlhsbFJ6bFlVbXhzTmxWWGREUldiVlp5VjI1S1ZtSllUVEZXYWtwSFUwZFNSMVJyTldsaVYyZDZWbTB3ZUU1R2JGaFZibEpXVjBkb1dWWXdaRFJqTVZaelZXNU9WVTFXU2xoWFdIQlhWREZLZEdSRVRscFdWbkJRV1ZWYVlXTnJOVlphUmxacFVqRktNbFp0Y0V0VE1sSlhVbTVPYUZKdVFtOVpWRVozVG14a1dXTkZaR3ROVld3MFYydG9VMkZzU25KT1ZtaFhZVEZ3WVZSWGVHRmpiRlp5V2tkc1RsWldXVEZXVnpFMFlURnNWMU5zWkdwU2JGcGhWbXBPVTAweFpGZFhiRTVZVWpBMVNGZHJXbXRWTWtwWFUxaGtWMUpzY0ZoVVZWcHJVakZPYzFadGJGTmlXR2h2VmxkNGExVnRVWGhYYmtaU1YwZFNjMVpxUW1GVGJHdDNWMjFHVldKR2NIcFpNRnBUVjBkRmVGTnJhR0ZTZWtaWVZXcEdZV1JXV25OWGJXeFRWbGhDWVZac1kzaE9SMUY1VTFob1dHSnJOVmxaYkdoRFZVWmFkR1ZGZEZSU2JIQXdXbFZrUjFkc1duSmpTR3hWWWtkb1NGWnNXbHBsYkZaeFZHeGFUbFp1UWxWV2JYQkhaREZLVjFadVVtaFNWRlpZVm1wT2FtVkdXWGhYYkdSV1RWVXhORmRyVm05Vk1XUklWV3hzV2xZelRYaFhWbHBoWTJ4YWRGSnJOVTVXYlhkNlZtcEplRTFHWkVkVGJsWlNZVEo0VjFsc2FHOWtiRnBWVVZob2ExSXdXa1pXTW5ocllVZEZlR05HVmxkV2VrWTJWRlphYTFJeFVuVlViV2hUWVhwV2QxWlhjRXRpTWxaelYyeG9hbEpVYkhCVVZscExWMFphZEU1VlpGWk5hM0F3VmxjMVMxWldXblJWVkVKaFZteHdjbGt5ZUd0a1IxSklZVVUxVjJKclJqTldNbmhYV1ZkTmVGZHNaRmhpYkVwWFZtdFdTMWRHVm5OWGJtUm9VbXhXTTFac1VsZFdNa3BYVjJ0b1YxWXphSEpXYWtaaFVqRmtjbFpzWkdoaE0wRjZWbFpTUzFSdFZrZFZia3BoVWpOQ1ZGWnFUbTlXTVdSWVpVZDBUMUpzUmpSWmExcFhWbGRGZDA1WVNscGhNbEpVVmpGYWQxSnNXbFZXYkZwb1pXdGFZVlpXWXpGa01XUnlUVlZrYWxOSVFtRldiRnAzVXpGd1dFMVZaRlJTYTNCNlZtMTRhMkZXU2xsUlZFcFhUVzVTV0ZkV1pFNWxSbVJaWVVkd1UxWnNjRmhYVjNoclRrWmFSMWR1VGxaaVIxSlBWRlphZDFkR1dYbE5WRUpvVWxSR1YxUnNhSGRXYlVwSVlVaEtWMkV5VWt4YVJWcFhZekpLUjJOSGJGTk5WVll6Vm14a01GbFhSWGxWYTJoWFlUSjRhRlZ0TVc5WFJsSldWMjVrVkdKSFVucFdiVEZIWVRBeFYxTnVjRmROYmxKMldXdGFTMUpzVG5OaVJtUnBWMGRuZWxkVVNqUlZNazV6WTBWYWExSnJOWEJXYkdoRFUwWmtWMVp0ZEdwTlZuQklWa2QwWVZaSFJYcGhSbWhYWVdzMWRsWnJXbUZqVmtaWllVZHdUbUV6UWt0V2JHUjZUVlpaZVZOcmJGSmlSVnBaVm0xNFMxRXhVbGRhUmtwc1VteHdlbGRyWkVkVk1EQjRVMnhhV0ZZelVsaFdha0YzWlVaYWRWVnJOVk5TVm5CWlZsY3hOR1F4V1hoVmJrNVhZWHBzV1ZWcVFtRmxWbXQzVjJ0T1YyRjZSbGhaTUZwRFdWWktjMk5JU21GU1YxSlVWV3BHVTJSSFZraGlSbWhUWVRGcmVWWnRNWGRUTURWSFlrWm9WRmRIYUZSV01HUTBWbFpzVlZKdVpHcFNiRnA2VmpJeFIxWlZNVmRYYm1oV1RXNW9VRlpxUVhoV01XUnhVV3hXVjJKRmNGVldiWFJoVXpKTmVWUnJiR3BTYlZKd1ZXMTBkMU5XV25OVmEyUlVUV3N4TlZaSGRHRmhSa3AxVVcwNVZWWnRhRVJWTVZwaFl6RldjbHBHWkdsV2JIQmFWbGN4TUdNeFZYbFRhMmhvVW14S1YxbHJaRzlTUmxKMFpVZDBhbUpIVWpCYVJWcGhWR3hhV1ZGcmNGZGlSbkIyV1hwR2MxWXhUblZXYkVwb1pXMTRXVmRXVWt0VmF6RkhZMFphV0dKWVVsaFVWbHAzVFVad1JsZHJPVlZpVlhCSVdUQmFjMVl3TVhWUmJFSmhVa1ZhV0ZsNlJuZFNiR1J6Vlcxb1RsWnVRbTlXYlRCNFRrWnNWMVJyWkdsVFJrcHpWV3hTYzFkR2JISlhhM1JzVm14V05WUldWbXRXVjBwR1lrUmFXbFpXV21oV2FrWmhZekpPU1ZOc2NGZFNWbkI1Vm0weGVtVkdaRmRWYms1b1VtMVNWRlpzYUVOWlZsbDRXa1JDYUUxV1ZqUldiWFJyV1ZaT1IxTnVUbFpOUjFKVVdUSjRWMk5XUm5WYVJsSnBVbTVDU2xaR1dsZGhNVmw1VW1wYVUyRXlVbGhaYTFwTFUwWmFkR016YUZkTlYxSXhWako0WVZZeFNsbFJiR3hYWVd0S2FGWkVSbXRYUmxKeVdrWm9hVll6YUhkV1ZFSlhVekExVjFkdVRsWmhNRFZ2VkZWU1YxSXhVbFpoUnpsYVZtczFSMVJzV21GWGJVcEhVMnhvV2sxR2NGUldiWGh6VG14YWNrOVdaR2xUUlVZelZqRlNRMWxXVVhoYVNFNVlZbXMxY0ZWclZURldiR3h5V2tVNVQxSnNiRE5YYTFZd1ZqRmFjbU5FUmxwTlJuQXpXV3RrUm1WSFNYcGpSbVJwVjBaS2IxZFVTWGhXTWsxNFZtNVdWR0pZUWxSWldIQlhaR3hrV0dWSE9XaE5SRlo2VmpGb2MySkdTWGRYYmtKVlZteHdXRlJzV21Ga1IxWklaRWRvVjJFelFYZFhWbFpoVVRGWmQwMVZhR2hTVmtwaFZteGFkMlZzYkRaU2JHUnJWbXhLZVZReFdtdGhWbVJJV25wS1YySllVbkZVVmxwT1pWWktkVlJzVW1sU2JrSlJWbXBDYTFVeFdYaFhibEpPVm1zMWNWbHJXbGRPVm5CV1ZtMUdhRTFFUmxkVWJHaHZWakpLV1dGSVdscFdiSEJMV2xaa1IxSXhXbk5hUms1cFUwVktOVlp0ZEZOVE1WVjRVMjVLVDFac2NHOVZha0poVmtac2MyRkhPVlpTYlZKWldrVmtSMkZ0U2xkU2FsSlhUVmRvZWxscldrcGxiRlp6VjJ4V1YySlhhRVZYYkdRMFkyMVJlVkpyWkZWaVYyaFlXVmh3VjFOR1draGxSM1JwVFZac05GWXlkR0ZoYkU1SFkwZG9WbUpHY0ROYVYzaGhZMVpLZFZwR1RsZGlSbTkzVjFkMFlWUXhVbk5VYTFwVFlXczFXRmxyWkU5Tk1WSlhWMnhhYkZJd2NFaFhhMXByVjBaSmVtRkliRmRXTTJoMldXcEdhMVl4V25WVGJHUnBZbFpLV2xaWE1UUlRNbFpYVjFoc1QxWXpVbGxWYlhSM1pXeFZlV05GVGxkTlJFWjRWVzEwYjFkc1duTmpSMFpoVm5wR1NGVnNXbXRqTVhCR1RsZHNhVll5YUZOV2JYaGhZVEpXY2s1V1pGaGliRXBWV1ZSR2QxZFdiRmxqU0U1WVZteGFNRlJzVms5aE1ERllWV3hzWVZaWFVraFdha0Y0VmpGT2NtRkdXbWxTTW1nMlYxWlNSMU14V25KT1ZtaFFWbXhhV0ZSVVJrcGxiRnBWVW0xR2EwMVdjREJWYlhSclZsZEtTVkZzYUZwaVJuQk1WVEZhWVZaV1RsVlNiSEJYWWxaSmQxWlhNREZUTWtaelUyNUtUMVp0VW1oV2FrNVRZVVpTVlZKc1dtdE5WMUl3VlcweE1GVXhXa1pYYkdoWVZrVkthRlpFUmxOak1XUjFWV3hDVjFKcmNGbFhWbVF3V1ZaYVIxZHJWbE5oZWxaeVZGVlNWMWRHYkZaWGJHUm9VbFJHTVZsVldtOVhSbGw2WVVkb1lWSkZjRkJXYWtaaFYxWndSMXBIYkdsV2EzQlJWakZrTUdFd05VZGFSbVJXWWtkU1dWbHNhRk5pTVZaeFVXNWtXRkpzVmpWYVJXTTFWakZhVlZKc2JGZFNNMEpVVmpKNFlWWXlUa2hTYlVaWFpXdGFTVlpVUm1GVk1rMTVWR3RhVDFaVVZuQlpiR1JyVGxaYWNWTnFRbFpOVlRFMFZsWm9jMVp0UlhoalJrWlhZbFJGTUZZd1duTmpiVVpHVkd4b1UySnJTbHBYYTFaclVqSktTRk5yWkdwU1YxSllXV3hvVGsxV1dsaGpNMmhxWWxVMVNGbHJXbUZoVm1SSVlVUktXRll6VW1oVk1qRlhaRVpLY21KR1NtbFNia0oyVjFaU1NrNUhVWGhYYTJoT1ZrWktjbFJXVm5kbGJGcFlUbFZrVjFZd2NGZFdNbk0xVjJ4YVJrNVZVbGROYm1ob1ZXeGFTMlJIVWtaT1ZrNXBWMGRvV2xadGNFdE5SbGw0Vm01U1UySnJjRkJXYlhoaFZteGFkR1ZJWkZWU2JFcFpXbFZhYTFReVNrWlhha1pYVWpOb1VGWlVTa1psUjA1SFkwWmtUbUpzU2xsWGExSkhXVlpKZUZSdVRsaGlWM2h6V1ZSR2QxZHNXblJqUlRsU1RWWmFTRll5ZUZkV1IwcEdUbGhLVm1KWWFHaGFWbHB6WTJ4d1NWUnNaRk5oTW5jd1ZsUkpkMDVXV1hsVGEyUlVZVEZLVjFsc2FFNWxSbHB4VW14T2FrMVhVbnBaVldSdlZHeEtSMWR0UmxkTlYxRjNWbXBLVW1WV1duVlViR2hwWWtWd2VGZHNaRFJaVmxsNFlrWnNhbEpYVWxsVmJYaFhUbFpTVjFadGRGZE5SRVpZV1RCYWIxWXdNWFZoU0VwWFRXcEdTRmt5ZUd0a1YwcElVbXhrVjJKR1ZqUldiWEJIV1ZaSmVWVnJhRlJoTW1od1ZXcEtORlpHV25STlJGSnNWbXh3ZWxaWGRHdFdNREZ5Vm1wU1YxWnRhSFpaVjNoUFVtczFXRTlXVmxkU1Z6aDNWMWR3UjFZeVRsZFVibEpRVmpOQ1dGbHNhRzlPVmxweldYcEdWVTFXU25sVVZscHJWa2RGZVZWc2FGWmhhelZVVmxWYWMxWldSbGxoUjNCT1ZqRktObGRXVm1GV01WSnpWMWhzYUZKNmJGaFpWM1J6VGtaV05sSnRkRmROVlhBeFZtMTRWMkZXU1hsaFJteFhWak5vVkZacVJtRlNNWEJIWWtkd1UxWlVWbmhXUmxwV1RWWk9SMWRzYUU5V2F6VlpWV3BDZDFkV2JGWlhiVGxhVm14c05sbFZXbTlXVmxwR1YyeG9WV0pZYUV4Wk1uaDNVMGRTU0dKR1RteGlXRkV5Vm1wR2EwMUdXWGhXV0doWFltczFXVll3WkRSV01XeHpXa2M1VjAxWGVGbFpNM0JIWVRKS1NWRnJaRmROYWxaeVZsUkJlRmRIVWpaVGJGcHBWa1ZhTWxkV1ZsWmxSMUpZVW10YVlWSnRVbFJaYTFwM1pWWmtWMVZyZEZOTmF6RTBWbGMxUzFkSFNsbFJiRkpXWWtkb1JGbHFSbUZYUjFaSVpFWldhR1ZyV2xsV2JHUTBXVlpzVjFOdVVsWmlSM2hZV1d4b1UyRkdVbFpYYm1SWFlrWndlRlpYZUdGaFIxWnlWMWhrVjJKSFVqTlZha1phWkRBeFdWWnRhRlJTVm5CWFZtMHdlRlV4VGtkalJWcFlZa1UxY2xadGVIZE5SbXh5VjJ4T1ZrMUVSbGRaTUZKWFZqSktTRlJxVW1GU1JYQlBXa1JCZUZOWFJraGhSVFZPWW0xb1VWWnNaREJaVm14WVZHeGtXR0pzU2xCV2JGVXhWMVphZEdWSVpGUldiWFF6Vm0xek5WZEdTbk5qUmxwV1lsUldNMVl5YzNoVFIwWkpVMnhrVG1GcldraFhiRnBoVmpKTmVWSnJhRk5pUjFKUFZGWldjMDVzV25KYVJGSm9UVlphTUZadGVHdGhiRXBZVlc1Q1ZtSkdTbGhXUkVaWFl6RndSVkZyT1ZOaVIzY3hWMnRXWVdFeVJsWk5WbHBPVmtaYVYxbHNhRk5rYkZweVdrVjBhazFYVW5wV01uaDNZVlpLY21ORmJGaFdSVXBvVmxSR1lWWXhTblZXYlVaVFZrWmFWVmRXYUhkU2F6RkhWMjVLV21WcldsVlVWbHAzVWpGU1YxWnRPV2xTYTNCWVZqSjRhMVl5U2xWU2JGSmFUVzVvVjFwV1pGZFNhemxYVkcxc1YxWkdXa3hXYlhScVpVWkplRlpZYUZoWFIzaHZWVzB4TkZkV2JISlhibVJxWWtaWk1sVXljelZWTURGV1kwUkdWMVo2UlhkV1ZFRjRaRmRHUjFac1pGTmlTRUo0VmtkNFZrMVdTWGhqUldSb1VsUldWVlZxU205V01XUllaVVprYWsxRVZsaFdNblJ2WVRGT1JrNVdhRlpoYTBveldsZDRjbVF5UmtaVWJHaHBWbGhDU1ZacVNYaGlNVnBYVjJ4a2FsTkZjR0ZhVjNSaFZrWnJlRmRzVG10U2EzQjVWR3hhYjFVeFdsaGtNM0JYWVd0YWNsUlZaRXBsUmxaWllVZHNVMkpXU2xwV2FrSnZVVEpKZUZaWVpHRlNhelZoVm0wMVExZFdhM3BqUldSWFlYcEdXVnBJY0V0V2JGbzJWbXhDVjJFeGNFeFdiRnBMWXpKT1IxcEZOV2hoTVhCS1ZtMTRVMUZ0VmtkWFdHaGhVMFZhVmxsclduZFhSbFp6WVVWT2JGWnRVbmxXVjNSclZUQXhWMkpFVmxkU00xSm9XVlZhU21WdFJrZFdiRnBwVW10d1dWZHJVa2RaVjFKSVZHdGFZVkp0YUhCV2JYUmFUVVprV0dSSFJscFdiVkl3Vm0wMVQxZEhTbFZpUmxwWFlrWndWMXBWV2xOV2JHUjBVbXhvVTFaRldsZFdiR1EwWkRGWmQwMVZaR3BTYldoWVZtdFdjbVZHV2tWU2JYUnJVbXMxZWxadGVFOWhWa3BXWTBjNVYySlVRalJXVkVaclVqRmtXV0ZHYUdoTmJFcDRWbTB4TUZsWFZuTmlTRXBYVmtWYWIxWnRjekZTTVZWNFlVaGtWMDFFUmxsV1ZtaHJWMnhhUmxkdFJtRldiSEJvV2taYVQyUkhVa2RVYkdST1lsZG5NVlp0ZUd0a01WRjVVMWhzVlZkSGFGbFphMXBoVm14c2MyRkdUbXBTYlhoNVYydGFUMVJzU25OVGJHaGFWbFpWTVZsVlpFZE9iRXB6WTBaYVYwMHlhRFpXTVZwaFdWWmtTRkpyV2xaaVNFSllWRlJCTUdWc1pITldiVVpVVFd4S1dWWkhkR3RXYlVwSVZXeG9WVlpXU2xOYVJFWmFaVmRTU0dSRk9WTk5WVmt3Vm10a01HRXhaRWhUYTJSWVltdEtWMWxyV2t0WFJscFZVbXhPV0ZKVVZsZFViR1EwVmpKS1IyTkdaRmRXUld0NFZrUkdWMlJHVG5KaFJrSlhVbFJXYUZkV1VrZFpWbHBIVjJ4b1RsWlhVbkZaYTFVeFpXeHJkMWRzWkZkTmJGcDZWako0VjFkR1pFbFJhMmhoVWtWYVlWcFZXbGRrVms1elZXMXNVMVpZUWxwV2JURjNWREpKZUZSdVRsaGlhM0JoVkZSS2IxbFdXblJOVms1c1ZteEtXRmxWV2s5aFJrcHlZbnBLV21FeVVraFdiRnBoVG14S1ZWRnNXbGRTVm5BMVYyeFdZVmxYVWxkVmJrNVZZa2RTY0ZWc2FFTmhSbGw0V2tSQ1YwMVdWalZWYlhSclYwZEtSMk5HYkZwaVdHaG9WbXBHVTFZeFpIUlNiRnBUWWtad1YxWlVTalJUTWtwSFYyNU9WR0ZyV2xoV2FrNXZVa1phY1ZKcmRGZGlWVFZLVjJ0YWExVXlTa1pqUld4WFZrVndObHBWV2xwbFZrcFpZMGRHVTAxR2NGVlhWM1J2VVRKSmVGZHJaRmhpUjFKVlZGWmFkMWRHV25SbFJ6bHBVbXR3V1ZaWGVITldiVXBaWVVST1YwMUdjSGxhUkVaclpFZFNSMXBGTlZkV00yTjVWbTE0YTA1R1JYaFhXR3hVWVRKU2NWVXdWbmRYUm14WVpFZEdWRkp0ZERWYVZXUXdZVzFLVjFkcmFGZFNNMDE0VmxSR1MyTXlTWHBhUm1Sb1lURndiMVl4V210U01rNXlUVlprV0dGNlZsaFdiVFZEWld4YVdHVkhSbFJOVmxZMFdXdGFiMkV4U2xsVmJHeGFZVEZ3VEZZeFdsTmpNV1J5VDFkb2FHVnJXbUZXVm1RMFlqRlplRk5ZY0ZKaVJVcFpWbTE0VjA1R2EzbGpla1pYWWxVMVNGa3daRzlVYlVwR1kwaGFWMDFXY0doV2JURlhVMFpTZFZWc1ZtaE5ibWgyVmxjd2VHSXlUa2RXYmtaVFlUTlNWMVp0ZUhkVFJscDBaVWQwVlUxVmNIbFpNRlp2Vm0xS1ZWWnNVbHBXTTJoTVdrVmtWMUpyT1ZkalIyeFRUVzFuZUZZeWVGZFpWMFY1Vkc1T1dHSnJjRkZXYWs1RFkwWldjMVZyV214aVIxSlpXa1ZhYTFack1WZFhibkJYVFZkb2VsWnRNVVpsYkZaeldrWndWMDB4U205V2ExWmhaREZrU0ZacmFHdFNNMUpVVm10YVlWZFdXWGxrUjNST1VteHNOVlV5ZUhOWGF6QjVZVVpvVjJKWWFETldhMXB6VG14S2NrOVhjRTVXYTNBMVZtcEtORlV5UmtoVGEyUnFVakpvV1ZadE1WTk9iRkpYVjIxR1UwMXJOVWRaVlZVeFZqSkdObFpzV2xkaVdFSkVXa1JHVDJNeGNFbFRiVVpUVmpGS1dWZFdhSGRTTURGSFYyeG9hbEpZVWxoWldIQkhUVlpXV0dSRVVsZE5hMXA1V1RCYVUxWXlSbkpqUldSaFZucEdVRlZxUmxka1IwWklZa1pPYVdFd2EzZFdiVEUwVlRGRmVHSkdaRlZYUjNoVldXdGtVMkZHVlhkWGEzUlZUVlpzTTFac1VrZGhiRnB6VTJ4b1dsWldXbEJXTUdSTFVqSk9SbUZHYUZoVFJVcEpWbTE0WVZsWFRuTlhia1pWWWtad1QxbFhkRXBOUmxweFUyNXdiRkpyTlVsVmJYUnpZV3hLYzFkc2FGZGhhMXBNVmxaYWEyTnNXblJTYkZKT1lrVndXVlpxU1RGVk1rWnpVMnhXVjJKclNsZFVWVnBoVTBaU2MxZHNjR3hTYkZwNVdUQmtNRlJ0U2taWFZFWlhZVEpSZDFkV1pFWmxSazUxVTIxd1ZGSlZjRmRXYlRWM1VqRmFSMVpxV2xOaVIxSllWbTEwWVdWV1pISmFTRTVvVm10c05sWldVa2RXTVVwelkwZG9XbFpGV2xSWmVrWlBWMWRHUjFWdGJGUlNWWEJaVm10YWEyUXhXWGhhUldSWFYwZDRjMVZzYUVOak1WWjBZM3BHVGxadGRETldNakExWVVaYWMyTkZhRmROYm1oNlZqQmtSbVZIVGtoaFJuQnNZVEJXTkZacVFtRlRNazV6VjI1T1ZHSlhlRlJVVkVwdlZWWlplRmt6YUU5U2F6RTFWbTAxVDFsV1RrWk9WbXhhVjBoQ2Vsa3dXbk5qTVZwVlVteG9WMkpHY0RaWFZsWnZWREZaZDAxWVNsaGlia0pZVkZjMVQwNUdXbkZTYlVaVFlYcFdXbFV5ZUhkaFZtUklZVWhzV0dFeFdsZGFWVnByVmpGV2RWVnRjRk5XUmxwYVZsZDRWMlF4YkZkWFdHeHNVbTFTY0ZSV1ZsZE9WbFowVGxWMFZXSkZOVWxaVlZwVFYyMUtWVlpyVWxkaVJuQm9XWHBHZDFKck9WWlBWazVwWVRCd1MxWXllRmRpTWtWNFYydGtWR0pyTlhGVmJUVkRWakZhY1ZSc1RsZFNiVkpZVm14b2EyRXdNVlpPVkVaYVlURndjbFpITVV0a1IwWkpZa1prYUdFeU9IZFhhMk40VmpGT1IxUnNiR3BTTW5oVVdXeGFTMlF4WkZoa1IwWnJUV3RzTkZZeU5VZFZiVXBJVlc1S1ZWWXpVbnBVYTFweVpERmFkRkpzY0ZkaE0wRjNWbXhqZUdJeFpIUlRhMlJYVjBkb1YxUlhOVzlXTVhCWFZsUkdXRkpyY0RCWlZWcFBWR3hPUmxOc2NGZGlXRUpMVkZaYVNtVkhTa2RhUmxKcFVqRktkbGRzWkRCWlZteFhWMjVHVldKVWJITlphMXB6VGtaWmVXUkhkR2hOVm13elZHeFdjMWxXU2xkalNFcFhVak5PTkZwRlpFZFNWbVJ6V2tab1ZGSlZjRVpXTVZwVFVXc3hWMVJyWkZaaWEzQm9WV3BLYjFReFVsaE9WemxZWWtkU1dWUldVa05XUlRGeVRsVm9WMkpVVmtoV1ZFcExVMFpXZFZOc1ZsZGlTRUpKVmtkNFlXRXlUblJTYTJoVFlraENXRlpyVm1GVGJHUnpWbXhrVjAxV2NIcFdNalZUVm0xS2NtTkhSbGRoYXpWMlZsVmFWMlJGTVZaUFZsSlhZbXRLU1ZkVVFtRmhNVlY0V2tWYVZHSklRbGhaVkVwU1RVWmFjVkZVUmxOTlZUVjVWMnRhVDJGWFNrZGpSemxYVmpOQ1VGWlVSbXRTTVZaelYyMW9VMVpVVmxGV2JURTBZekExVjJOR1dscGxiRnB2V1d4V2QxWXhVbGRWYXpsWVlsVldORll5TlhkV01WbzJVbXQ0WVZKWFVsaFZNVnBIWXpGYWMxcEhlR2xTYlRrMVZtcEtNRlV4U1hsU1dHaGhVbTFvVlZsVVJuZFdWbXh5Vm10MFdGSnNjSGhXUnpBMVZrWmFjMk5GV2xaaVZFWXpWa2Q0WVdSSFZrZGhSbVJPWW10S2IxWnRjRXRUTWs1eVRsWm9VMkpHV2xoVVZFSkxVMVphVlZGdFJsWk5WbkI2VjJ0b1YxbFdTblJWYXpsV1lUSlJNRmRXV2xwbFYxSklaRWQwVG1FeGNGbFdha293WWpKS1IxTnJaRlJpUjJoV1ZtNXdWMlJzYTNsbFIwWlRWbXRhV2xsVldrOVViRm8yWVhwS1dGWXpVbWhXYWtwSFZqRmtXV0pIYUZSU01taFpWbTEwVjFNeFdYaFZiRnBoVW0xU1ZGUlhkSGRUYkZWNVRWVmtWazFyY0VwVlZ6VnJWakZLYzFkdVdsZFdSVnBYV2xWa1MxTldTbk5WYld4WVVtdHdWMVl4WkRCV01WbDNUVWhvVjJKc1NrOVZhMVpoVjFaV2RHVklaRk5OVjNRelZtMHdOVmRzV25KalJXUmFUVVphY2xkV1dtRmpNazVJWVVad1RsWnVRbTlYVkVsNFZERkplRlZ1VGxWaVJUVllWakJXUjA1R1duUk5XR1JTVFZaV05GWkdhRzlYUm1SSVpVWmtXbUV5VWxSWmFrWlRWbFpPY1ZWc1dsZGlTRUkwVm10a05GUXlSa2RUYms1cVVrVktZVlJWWkc5VlJteFlaVWRHYTFKc1ducFpWVnAzVmpGYWMyTkdSbGhXTTFKeVZYcEdXbVZHVW5WVWJXeFRUVVp3V1ZadGNFZFNiVkY0VjI1R1UySkdjSE5WYWtaTFYwWmFkRTVXWkZkV01IQlhWako0YjFkdFJYbFZhbHBoVmxad2NsWXdaRmRUUjFKSFZHczFWMDFWY0V0V2JUQjRUVWRKZVZOclpGUmlSM2h2VlcxNFMxWnNXbkpXYm1ScllrWktWbFZ0ZUhkaVJrcHpWMjVzWVZKV2NETldha0Y0VWxaYWNtTkdaRmRTVnprelYxZHdSMWR0VmtkalJWcFlZa1pLYjFSV1duZGhSbHAwVFZSU1dsWnJOVWhaYTJoVFlrWktWV0pHYUZwaE1YQk1XbFphWVZORk1WVlZiR1JPWVROQ05WWlVTWGhTTVZsNVUydG9WbUZyTlZkWlYzUjNVMFp3Umxkck9XcE5WbkI2VmpJeGMxWXhTbk5qUnpsWFlURndXRmxVU2twbFJsWnlXa2RvVGsxc1NtOVdWM2hoWkRKTmVGZHVVbXhUUjFKelZXMTRkMDFHYkRaVWJUbFhZbFZaTWxWdGRHdFhiVVp5VGxST1YwMUhVa2RhVldSUFUxWk9jMWR0ZUdoTk1FcFNWakZvZDFNeFVYaFRXR3hVWVRKb2IxVnNVbGRVTVZaeVYyMUdWVlpzY0hwWGEyaHJWVzFHTmxKc2JGWk5WMmgyV1ZWVmQyVldWblJoUmxwb1RWWndUVmRVUW1GV01rNVhVMjVTVTJKSFVsaFpiWFJMVWpGYVZWTllhRTVTTUZwSlZUSjBZVlF4V2xoVmJVWlZWbFp3VEZaRldscGxWVEZXVjIxNFYySkdiM2hYVkVKaFpERlpkMDFJYUZSaVJWcFpWbTV3UTA1R1drVlNhM1JxVFZVMU1WWlhlRTloVmtwVlZteENWMUp0VGpSWmJYTjRZekZrV1dGSFJsTlNhM0IyVmtaYVlXTXdNSGhWYkdSWFlsUnNWMVJYZEZkT1ZteFdWMnRrVjAxcldubFViRnBUVm0xS1IyTkljRnBsYTFweVdUSXhVMU5IVGtaT1ZtUk9WbGQzZWxacVJtdE5SbGw0VlZob2FWSnRhRlZaVkVwdlZWWmFjbGR0UmxoU2JYaDZWbGQ0YTFkR1NuUlZiR2hYVFdwRmQxWlVTa3RXYXpWV1lrWldUbFl4U2tsV2JGSkhWMjFXUjFSdVRtbFNiVkpQV1ZkMFNrMUdXbkpWYTJSVlRWWnNORlpYTlZkV01rcElZVWhDVjJGcmNIWmFSRVpoWkVVeFZWVnRkRTVpUm5CSlZqSjBiMU14V1hsVGEyeFNZa1ZLV0ZsWGRFdGhSbkJZWlVoT2FtSkhVakZXUjNoaFlWWmFXVkZZYUZkV2JVMTRWWHBHV21WV1NuVlRhemxZVW01Q2FGZHNaREJaVmxGNFkwVldVMkpGTlhKV2JYTXhaVlpSZUZwSE9WVmlSWEJJVmpGb2QxWXlTa2RqUjJoYVZrVndSMXBWV2xOa1ZsSnpWR3hvVTAxVmNGZFdNVnByWldzeFYySkdaRlppUjJoeFZXeFdkMVF4V25SbFJYUlhUVmRTZVZadE5XdGhWa2wzWTBWb1YwMXFWblpXYWtwTFZsWktjVlJzWkZkU1ZWa3dWbTF3UjJFeVVsZFhiazVoVW0xU1dGbHRkRXRWYkZwelYyeE9VMDFXYkRSV01XaHZZV3hLV0ZWc2JGcGhNbEoyV1RCYVYyUkZOVlpVYkdST1ZqRktXVlpzWkRCVE1WSnpWMjVPYWxOSVFsaFVWbVJ2Wkd4WmQxcEZXbXROUkZaWVZsZDRkMVl4U2xWV2JGWlhWa1Z2TUZacVJtdFRSbEp5V2tkR1UySlhhRmxXYlhSWFdWVTFSMXBHYUd0U2VteFRWRlprVTJWc1dYbGpSMFpXVFd0d1NWbFZaRWRXTWtwMVVXdG9WMkV4Y0ZoWk1uaDNVbXhrZEdSRk5XbFNXRUpKVmpGU1ExbFdUWGhWYms1VVlrZFNjVlZyVm1GWFJscHlWbTFHV0ZKdGVGWlZiWGhoWWtaYWMxTnNjRnBXVjFJelZtdGFTMk15VGtkaVJtaFhaV3RWZDFZeFdtRmpNVmw1Vkd0a1lWSnRVbTlVVm1oRFZWWmFkRTFZY0U1V2JHdzBXV3RhWVZZeVJqWmlTRUpXWWxob2VsUlVSbk5qYkZaMFVteGtUbFp0T0hsV2JUQjRZakZrYzFkcldsaGlSVXBYVkZWa1UxZEdWbk5YYkU1cVRXdGFTVmxyV2s5V01VcHpZa1JTVjJGclduSmFSRVpHWlZaV2RWVnNaR2xTTVVwNFZsZDRhMkl5VFhoV2JrWlVZV3hLY1ZWdGVIZE5SbkJXWVVkR1ZXSkdjSHBaYTFKVFZqQXhjVkZVUmxkaVdFNDBXVEl4VDFKdFJrZGhSMmhvWld4V05sWnRlR3BsUmsxNVZXdG9WMkV5ZUZOWmExcGhWMFp3V0dWSFJsTldiVkphV1RCV2EyRkZNVmRqUm1oWFZucFdVRlpzWkV0V2JHUjFVV3hhYUdGNlZsUldSbHBoV1Zaa1JrMVZWbE5pVjJoUFdWUkdkMDVXV2tkV2JUbHBUVmRTU1ZVeU5WZFZiVXBJWlVkR1dsWkZXbGRhVlZweVpVWmtkVlJyT1dsU1ZtOTRWbXRrTkZReFVuTlRhMmhzVWpCYVdGUlhOVk5qYkZKeVYyMTBVMDFWTlRGVk1qRnpZa2RGZUdOR2JGZFNiSEJvV2tSS1QxWXhWbk5hUjBaVFlsWktlRlpHWkhwTlZrNXpWMnhvYkZKVk5WbFZiWFJ6VG14c1ZtRkhkRmROYTNCSVZUSjBORlpXV2xoVmJFNWhWbFp3VEZZeFpFdFRSMHBIVkd4a1dGSlZjREpXYlhSaFZqSkZkMDVWWkZSaVIxSllXV3RrYjFWR1dYZFdWRVphVm14d01GUldXazlXUmtwelZtcFNXbFpYVFRGV01HUkhUbXhLZFdGR1dsZGlWMmg1Vm1wQ2ExSXlUbk5hU0VaVllrWndUMVZxUmt0WFZscFZVV3hhYkZKdFVrbFdWM1JyV1ZaSmVtRklRbFppVkZaRFZGVmFZV015UmtsYVJrcE9WbXRaTVZacll6RlVNVnBYV2tWb1ZtSkdjR0ZaYkdoVFRURmFWVkp1VG1wTmExcElWa2N4ZDFVeVNrZGpSRkpYWVRKT00xUnNXbE5qTVU1MVZXeGFhV0pyU21oV2JYaGhaREZXUjJKR1pGZFhSMmh4V1d4V2QxSnNXblJsUjNSWFRXdHdTRmxyVWs5V01ERlhZMGRvVmsxcVJsaFZha1ozVTFaYWMxZHRiRk5oTTBKYVZtMHdkMlZIVm5SV2EyUmhVbTFvY2xWcVRsTldWbEpZWlVWMFZGSnNjRmxVYkZwclYwWkpkMk5HWkZkTmJtaFVWbXhhWVdNeVRrVlViVVpUVm01Q2FGZHNWbUZXTWs1MFZXdGtWV0Y2Vm5CVmJGcHlaVVphZEdSSFJtbE5iRVkwVmpGb2MxWkhTbkpqUmtKWFlXdHdkbFl3V25Oak1rWkdWRzE0YVZORlNsbFdha2w0VFVkR2NrMVlTbGhoTTBKWVZXNXdSMU5HYkZkWGF6bFRZa1UxV2xkcldtOVdNREI0VTJwS1YyRXhTa2haZWtaYVpVWmtjMkpIYkZOTmJXaFdWbFJDVjFNeVJrZFhibEpPVTBkb1YxUldXbUZUUm14eVlVVTVXbFpyY0ZsV1YzaHpWbTFHY2xkdGFGWk5WbkF6Vm0xNFlXTldWbk5hUlRWWFZucG9OVll4WkRCV2JWWkhWMjVLVGxadFVsbFphMVpMVmpGYWNWUnRPVTVpU0VKR1ZUSjBNRlV5U2xaalJXaFdUV3BHZWxsV1dtdFRSMFpGVkd4a2FFMVlRbFZXVjNCSFZHMVJkMDFXYkZWaVdFSlVWbTAxUTJSc1dsVlJiRnBPVmpBMWVsWlhlR3RoUmtwV1RsWm9WMkpZYUdoV01GcGhWMFUxVms5V1pGTk5TRUpJVjFSQ2IyTXhXbkpOV0VaVFlUSm9XRmxzVWtkVVJsbDRXa1ZrVTAxcldraFhhMXBQVlRGYWRWRnJiRmROYm1oWVYxWmFXbVZXVWxsaVJsWm9UV3hLV2xkWGRGWk5WbVJIWWtoS1dHSnNjSE5XYlhoelRrWmFXR1JGT1doV1ZFWjVWRlpTVTFkck1VaGhSbEpYWVRGd2NsVXdaRmRTTVZwelkwZHNXRkpyY0haV01WcFhXVlpzV0ZSc1pGTmlSbHBUV1d4b1UxUXhXblJrU0dSVVVteHdlVmRyVWtOV1ZURnlWMnRzVmsxdVVuWlhWbHBMVWpGa2MyRkdXbWxpYTBwRVZrWmFZVmR0VmxoV2EyaHJVbXMxY0Zac1VsZFRiRnBIVjIxR2EwMVdTbnBWTW5oWFZtMUdjMk5HYUZWV2VsWkVWVEJhY21WVk1WZGFSazVvWlcxNFdWZFdWbXRrTVZWM1RWaFNhRkpzV2xoVmJYaGhZVVp3U0dNemFGZE5WMUphVjJ0YVlXRkhWblJsUmxKWVZqTm9WMVJXV2twbFJtUnlZVVU1VjFaVVZsaFhWM1JoWXpBMVYxZHNhR3RTUlVwWVdXdGFkMUl4Vlhsa1JGSllZWHBHTVZsVmFIZFhhekYxWVVST1ZrMUdjRXhaTW5NeFZqRndSazVXVWxOV1ZtdzJWbTB3ZUUxR2JGaFNXR3hUVjBkb1dGbHJaRk5YUmxsM1drWk9WMVp0ZUZsWk0zQkhWMnhhYzFOc2JGcE5SbHBNVmtkNFlXTXhUbk5hUm1ob1RWWnZlbGRYZEd0VE1VbDRXa2hXYUZKdFVuQldhMVphWld4YWMxVnJTbXhTYkd3MFYydG9SMVpIU2tkalNFNWFWa1ZLTTFaV1dtdFdNVlp5WkVaU1RsWlVWa2xXYTJNeFZqRmFkRk5yWkZoaWEwcGhXVlJLYjFKR2JIRlNiVVpZVWpBMVIxZHJXbmRXTURGSlVXeHNWMDF1VW1oV2FrWmhVMFpLV1dKR1dtbGhNMEpYVm0xd1QxUXdOVWRWYmxKc1VqQmFjbFZzVWxkV01WRjRWMjVrVjAxcmNFcFZWM0JUVjBaWmVsVnVXbHBsYTFweVZUQmFUMk50UmtoaFJsSlVVbFZ3WVZZeFpEUmlNa2wzVFVob2FsSldjR2hWYkdoVFZsWmFkR1ZGZEU1U2JGb3dXbFZrUjFaWFNsWlhWRXBYWWtaS1RGWnFSbUZTYkdSellVWmtUbUpyTVRSV2FrSmhWakZrV0ZOclpHRlNNbmhVVkZSS2IxZFdXWGhaTTJSc1VsUldTRmxyV210WFIwcHpWMjVHVm1KVVJsUldWVnB6WTJ4d1IxUnJOVk5pUlhCWVZteGtOR0V5UmxkVGJrNXBVa1UxWVZSVlduZFhSbGw1WlVkR1UyRjZWbGRXVjNoaFlVVXhjMU5yYkZkaVZFVXdWWHBLVTFKck5WZGFSbHBwVWpGS1dWWnRkR0ZaVmtwelYxaHNiRkl3V21GV2FrWkhUa1prY2xkdGRGZE5hM0I1VmpKNFUxZHRTa2hoUlZKYVRVWndhRmt5ZUd0amJWSklaRVprYVZJelkzaFdNblJYWVRBeFIxVllhRlJYUjFKeFZXMHhORmRHV25GVWJUbHJZa1p3UmxWdGVIZGlSMHBHVjI1c1ZWWnNjR2haVldSSFRteGFjVk5zYUdoTlZYQkpWMVpTUjFsV1dYaFZibFpXWWtVMWNGWXdWa3RXVmxwSFZtMDVVazFWTlhwV01qVlRZa1pLTm1KR1dsVldiRlY0V2xkNFZtVlhWa2RhUm1ST1lURndOVmRVUW10U01XUjBVMnRrVkdFeWFGaFpWM1JoWlZad1JWSnRSbXBoZW14WldXdGtjMVl4V2tkWGEyeFhZa2RPTTFwVldrcGxSbHBaV2tVMVZGSXphSFpXVjNSaFpERmtWMWR1UmxWaVZHeHhXV3RhZDJWR1ZsZGhSemxYVW10d2VWa3dhSE5YYkZwWFkwVlNWMkZyUmpOYVZWcFBZMnhrYzJGR1pFNU5iV2gyVm14b2QxTXhVblJXYTJScVVsZDRWMWxzWkRSV1JscHpWV3hrYTAxWFVsbGFSV00xVldzeFdGVnNhRmRXZWxaUVYxWmFTMUl4VG5SUFZuQnBVbXh2ZWxadGNFZFhiVlpJVW10b2ExSnRhRlJVVldoRFUxWmtWMkZJWkZOTlYzaFlWVEo0YjFadFJYcFZiV2hYWWxob00xWXdXbkpsUm1SeVpFZDBVMDFJUWtsV2EyUjZUVlpaZVZOdVNsUlhSMUpZV1ZkMFlXRkdXbFZTYXpWc1VtMVNXbGRyVlRWV01rcEpVVzVzVjFZemFISlVhMXBXWlVkS1IyRkhkRk5OUm5Cb1ZtMHdlRTVIVm5OWGJHaHNVak5TYjFac1VrZFhWbkJXWVVoa1dGSXdWalJaTUdSdlYyeFplbFJxVWxaTlIxSllWVzB4UzFOR1NuTlViR1JPVmxaWmVsWnFSbXROUm14WFYyNVNWMkpIYUZaWlYzaDNWbFpzY2xadVpGVk5WM2g2V1ZWak5WVXhTbk5pUkZaYVRVWmFVRmxYYzNoV2JVNUdZVVphYVZaR1drbFdiR040VXpGT1NGWnJXbEJXYmtKd1ZqQmtiMVJXWkhOYVJGSm9UV3N4TkZkcmFFdFZSbHB5WTBjNVlWWjZSVEJXTUZwclYwZFNSMXBIYkU1V2JrSmFWbFJLTkdFeVJuTlRXR1JZWWtad1dGbHROVU5UUm5CSVpVaE9hbFpyY0RGVk1qRTBWakF4U1ZGcmFGZFdSV3cwV2tSR1dtVkdaRmxqUjJoVFZqRktXVmRXVWtka01sSnpZa1JhVTJFelVsVlZiWFIzWld4WmVXVkZPV2hXYkhCSVZqSjRZVll5U2xsaFJtUlZWbXh3VEZWcVNrOVNiRnB6Vlcxb2JHSllhRFZXYkdRMFZUSk5lRmR1VGxkaVIyaFBWakJWTVZac2JGbGpSV1JYVFZkNFZsWkhNRFZYUmtwelkwVmtWazFxVmt4V2FrcExWMWRHUlZOdFJsZFdia0pKVjFod1IxWXlUWGhVYmxKcFVtczFXRmx0ZEV0aFJscDBUVWhvVDFKdGVGbFdWbWh2VjBaa1NHRkdiRnBXUlhCMldUSjRWMk14Vm5WVWJHaFRZa2hCZDFaR1dtRlVNV1JIVTI1T1dHSkhlR2hWYkdSVFUwWmFjMWRyZEdwaGVsWlhWMnRhWVZSc1duSmpSV3hYWVd0S2FGVjZSa3RrUmtweFYyeE9hVk5GU2xsWFYzaGhVekZPVjFwSVNsZGlWVnBoVm1wR1MxTldXa2hrUnpsb1RWVndlVmt3VlRWV1ZsbDZZVVY0VlZac2NHaFpNVnBMWXpGU2MxUnRhR3hpUm5CaFZteGpkMDFXVlhoV1dHeFRWMGQ0YjFWdGVFdFpWbXh6Vld0YVRsSnNiRFZhVlZwUFZqRmFjbGR1YkZoaE1sRXdXVlphUzFaV1duTmhSbWhYWWtad2IxWnJVa2RqTVdSSFZHNU9XR0pIVW05WmExcDNWMVprV0dWSE9WSk5WMUpJVmpKMGExZEhSWGhqU0VwVlZteFZlRlJXV2xka1IxWklUMVphVGxaWVFtRldWbVEwVWpGa1IxZFljRkpoTW1oaFdsZDBZV05zV25GU2JFNXJWbXhhZWxsVlpITlhSa3BXWTBaV1YyRXhjSEZVVmxwV1pVWldjMXBHWkZoU01taFpWMVpvZDJNeFZYaGlTRXBhWld4YVQxUldaRFJsVmxwMFRVUldWMDFyY0ZkWk1HaHpWbGRLU0ZWdVdsZE5ha1pNVmpGa1IxTkhSa2RXYkdScFUwVktOVlp0Y0VkaE1VMTRVMjVPVldKck5WTlphMlJUVjBaU1ZWTnRPVlZTYkhCNlZqSXhkMVJzV1hkTlZGWldZbGhvYUZaSGVFOVRSMFpIVm14d1YwMHhTWHBYVmxaaFZqSk5lR05GYUZCV00yaHdWVEJXUzFJeFdsaE5SRVpvVFZac05GVXlOVk5WUmxwSFYyeGFWVlpzY0dGYVJFWmhVMFV4Vm1SR1pFNVdWRlY0VjFSQ1lXSXhXWGxXYmtwVVZrVktXRmxzYUVOVVJscHhVbXh3YkZack5YbFhhMlJ6VlRKS1NWRnVaRmRoYTBweVdXcEdjMVl4WkhKYVIwWlVVakZLVlZaR1ZsTlNNbFp6V2toS2FGSllVbTlWYlhSM1RVWmFXRTVWWkZkV2JIQXdXVlZXVTFZd01VZGpSazVoVmxkU1NGVnRNVk5TTWs1SFdrZHNWMkV6UWt4V2Frb3dWakpKZUZkWWFGaGlSMUpWV1d0YWQxVkdXbk5YYTNSWVZtMTRlbFpYZEd0V2JFcHpWbXBTV0dFeFdYZFdWRVpoWTJ4a2NWRnNjRTVTTVVvMlZtMXdSMWxYVWtaUFZsWldZa2RTVDFacVNtNWxiRnBaWTBWa2FrMVhVa2hXYlRWWFZtMUtSMWR1UWxwaE1Wb3pWbFZhWVZaV1JuTmFSbEpPVm10d1dWWnFTalJoTVdSMFZtNU9XR0pyU21GWlZFWldaVVphY1ZKdFJsUlNNVXBIV2tWYWQxWXhXa1pYYWxaWFVqTm9WRlZVUmxwbFZrNXpZa1pLYUUxVmNHaFdiWFJYV1ZkT2MxWnVVazVXVkd4VVZtMTBkMlZzV2xobFIzUlhUVVJHVjFrd1dtRldNREZZWVVST1ZtRnJjRk5hVmxwWFl6RndSMkZIYkdsU2JrSmFWakZrTUdJeFJYbFVXR2hZWW10YVZWbHNVbGRqTVd4eVdrWk9iRlpzYkRWVVZsSkRWakZLVlZKdWNGWk5ibWgyVmpJeFJtVkhUa2xYYkdSVFRUSm9hRmRzWTNoU01VcHlUbFprV0dKSFVsUldiR2hEVkZaWmVXUkdUbE5OYTFZMFZUSjRhMVpYU25KWGJFNWFZa2RSTUZacldsTldNV1IxV2taa2FWSnRkekZYVkVKV1RsWlZkMDFZU2xoaE1sSldWbTB4YjFWR1dYZFhiVVpUWWtkU2VsWnRlRmRXTWtwSFZtcE9XR0pIVVRCWlZFcFBWakZPZFZSc1ZtbFhSa3BWVm0xMGEwNUdiRmRYYmxKT1UwZG9WRlJXV25kbFZsSlhZVVprVjJKVldUSlZiWGhyVmpKRmVGZHFTbUZTUlZwWVZteGFUMk5zWkhSbFJtUm9aV3haTVZZeFdsZGhNRFZIVjJ0a1ZHSnJjSEZWYm5CelYwWnNXR1JGZEdoU2JGa3lWVEo0VDJGck1YSmpSWEJXWWxob1ZGbFdXa3RYVmtaelYyeGtVMkpJUWpKV1ZsSkhWREZaZUZwSVZsWmhlbFpWVldwS2IxWnNaRmhrUm1ScVRVUldXRll5ZUc5VU1WcFZZa1pzV21KR1dqTldiWGhYWkVkV1NFOVdjRmRpU0VJMlYxUkNiMlF4V1hkTlZtUnFVbTFvYUZWc1pGTlhSbFp4VTJ0MFUyRjZWbGxaYTJSelZqQXhkRlZVU2xkaVZFWXpWV3BHVm1WR1VsbGhSbWhZVWpOb1dGZFhkR3RpTVZwelYxaGtZVkpHU2xsVmJURTBaV3haZVU1WGRHaFNhM0F3V2xWb2QxZEhSWGhUYkZKYVlUSlNURlV3V2xka1YwNUhXa1pPYkdFd1ZqUldNVnBoV1Zaa2RGVllhR0ZUUlRWd1ZXcENZVmRHV25GU2ExcHJUVmRTV0ZZeU1UQldSVEZYWTBod1dHRXlhRWhXVnpGTFUwZEdTVkZzV21sU2EzQlZWa2N4TkZkdFZsaFVhMXByVW14YVQxWnNVbGRYVmxweVdYcEdWMDFXV2pCVk1uaHZZa1pPUmxOc2FGcGhNWEF6VkZkNGQxSldTbk5qUjNoWFRWWndTRlpFUmxaTlZsSnpWMnBhYUdWcldsaFpWRXBPWlVaYVZWSnRSbGhTYXpVeFZrY3hkMVV3TVhSaFJtaFlWbTFSZDFkV1dtdFNNazVIWVVkNFUxWkhlRmxYVjNoWFdWWkplRlZZYUZkV1JWcFhWRmQwZDFkc2JGWmFSV1JYVFZad1Ixa3dVazlXYkZwR1YyeG9WMkZyV21oWk1WcHJZekZPZEdGSGJGTlhSVXBaVm0xNGEwNUdXbkpOVm1SVVlUSlNjRlZ0TVc5VU1WcHpZVVZPYWsxWGVIbFdNalZyVkd4YWMyTkVRbFZXYkVwRVZtMXplRlp0VGtaYVJscE9WbXR3UlZadE1IaFdNazV6V2toT1ZtSlZXbFJVVkVwdlZVWmtjbFZyZEZSTlZYQjZWbTAxVDFaSFNraFZhemxhWVRGYU0xWkdXbUZqTVZaeVZHeGtUbFpVUlhwV1IzaGhZVEpHVjFScldsaGlSbkJoV1ZSR1ZtVkdhM2xsU0U1cVRWZFNlVnBGV2xOaFZrbDZZVVJXV0Zac1duSlVWVnByWXpGa2RWUnNaR2hoZWxaWVYxZDBZVk14WkVkWGJrcFlZbFZhV0ZSWGN6RlNNVnBZWlVkMFZXSlZjREJaVlZWNFYwWmtTVkZyYUZoV2JWSlFXVEp6TlZZeGNFZFZiV2hzWWtad1dsWXhXbE5VTVVWNVUxaG9XR0pzU25OVmJURlRWMFpTVjFkdVpFNVNiRlkwV1ZWak5XRkdTbFZSYWxaYVZsWndTRlpxUVhoU01XUnlaVVp3VGxKdVFqWlhhMVpyVmpGS2MyTkZhR3hTTW5oVVZtdGFZVmRXV25GVGFrSlhZWHBXV0ZscldtOVdSMFY1WVVoS1ZtRXhjR2hYVmxwaFl6RndSMVJ0ZEdsU00yaGFWa1phVjAxR1ZYaFhXR1JxVWxad1dGVnFUbTlYUmxwVlVtMUdWMVpzY0hsV2JYaHZWakpLVjFKWVpGaFdla0kwVm1wR1dtVkdXblZXYkZwcFVsVndXVmRYTVRCVE1XUnpWMnhvYkZKNmJGTlVWM2hMVTBaa2NsZHNaRlppVlZreVdXdFZOVlpXV25SVVZFWlZZVEZ3ZWxac1dsTmtSVGxYVjJ4T2FWSXpZM2xXYkZwcVpEQTFWMWR1VWxOaWEzQlZXV3hrYjFac2JISlhibVJxWWtaYWVsWXllRTloYlVwR1RsUkNXazFHVlhoV1ZFRjNaVmRHUm1SR1pHbFhSa3A0VjJ4V1lXTXhaRWRUYmtwaFVtMW9iMWxyYUVOWFZscHhVVzEwVmsxV2NIcFdiVFZQVmpGYVJsZHNVbFppVkVVd1ZqRmFkMVpzYkRaU2JXeFRZa2QzZWxkVVFsZGtNVmw1VTJ4V1UxZEhVbGhXYWs1UFRrWndSMWRzWkdwaGVrWllWakp6TVZZeVNrbFJiRXBYWWtad2NsUnJaRk5rUmxaWllrWlNhRTFZUW5aV1Z6RTBaREpPUjJKR2JHcFNiVkp3VkZaa1UxZFdVbGRWYkU1WVlrWndWbFZ0ZUc5WFIwVjRZMGh3V2xac2NFeFdiVEZQVWpGS2MxcEhiRk5OVlZZelZteFNTMDVHV1hoYVJWcFBWbTE0Vmxsc1pHOVhSbHB5Vm10d1RsSnNjRlpWTWpWclZrVXhXR1ZHYUZaTmJtaDJXVlZhVDFOV1JuUmhSbHBvVFZad2IxWkdVa2RaVjA1eldraFdXR0pZYUZoV2EyUTBWMFprY2xac1drNVdNRnBZVmpJMVMyRnNTa2RqUm1oVlZtMVNVRlJVUm5kV2JHUnpZMGQ0VjJKSVFqWldNblJyWXpGVmVWTnNiR2hTYldoWlZtcE9iMlJzYkhGU2JYUnFUVlphZWxadGVFdGhSVEI0VTJ4R1YySlVRalJVYTJSWFVqRmFXV0pGT1ZkTk1VcDJWbTB4TUdRd01VZGpSVnBXWWxWYVdGUldXblpOYkZaMFRWYzVXR0pHY0hwWk1GWXdXVlphZEZWc2FGWk5WbkJNV1hwS1IxTkhTa2RVYXpWVFVsWldNMVp0Y0V0T1IwVjNUbFZvVmxkSGFGbFdNR1JUVlZaYWRFMVhPVlZOVm5CNFZUSXdOVmRHU25OVGJGcFdUV3BCTVZsclpFdFRSbFp6VjJ4a1UyVnNXbEZYVmxaclV6RmFjazFXVmxWaVNFSnZWRlphZDJWV1duTldiVVpvVFZVMVNGWnROVmRXVjBwSVZXczVWbUpVVmtSV1JscGhVMGRXU0ZKdGFFNVdiWGN3VjFkMFUxbFdWWGxUYkd4b1UwVktWMVJWV21GVE1YQkZVbTFHVTFacmNEQlVNV1IzVkcxRmVHTkdiRmRpV0doMldYcEtSbVZHVW5KaFJscHBVbFJXVjFadE5YZFNhekZIVm14V1UySllVbkZXYlhSaFRWWmFTR1ZGT1ZaTmExWTBXV3BPYjFkR1dYcFZia3BXWVd0YWNsVnFSazlrVms1MFlrWk9VMkV6UW1GV2JURXdWakpOZDAxSWFGWmlSbkJaV1cxNGQyTXhWbkZSVkVaVFRWZDRWMWRyVWxOV2F6RnpWMjVzVjAxcVZucFdha3BMVmxaYWNWUnNaR2hoTTBKUlZtMXdSMVV4WkZkalJXaFRZa1UxVDFWdE5VTk9SbHB6V2toa1VrMXNSalJXUjNoclYwZEtjMU5zUWxkaVZFWlVWakZhYzJOc1pIVlhhelZwVW14dmQxWkhlRlpPVmxsNFYyNUthbEp0VWxaWmExcGhWa1prVjFkcmRGTmlWVFZJVlZjeFIxVXhXWGhUYXpGWFZrVmFhRmRXWkU1bFZsSnlXa2RHVTAweWFIWldSbHB2VVdzeGMxZHVVbXRTYlZKWVZGWmFSMDVHVm5OaFNFNVhUV3R3U1ZaWE1EVldWbHBHWW5wQ1YxWnNjR2haTVZwVFl6RlNkR0ZHVG1sVFJVcFlWbTEwYW1WRk1VaFNiR2hVWVRKb2NscFhkSGRYUmxaeFZHMDVWbEp0ZUZkV01uUjNZVEF4UlZac1dsWmlXR2h5Vm1wS1MxZEhSa2RTYkdSWFVsYzRkMVpVU1hoVmJWRjNUbFprVjJKR1NuQldiRnAzVmxaa1dHVkdXbXhTVkZaSVZqSjBhMVl5U2toVmF6bFdZbGhvYUZSVldsWmxSMFpJWkVkb1RsWllRalZYVkVKaFZURmFWMWR1VGxoaGF6VldXV3hvYjJOc1dYZGFSazVVVWpBMVNWcFZXazlVYkU1R1UydDBWMkpZYUhKVVZXUktaVlpLY2xwR1ZtaE5iRXA0Vmxkd1MySXhXWGhYYmxKT1ZucHNWRlZ0TVRCT1ZuQldXa1JDYUdGNlJscFZWM1J2VjJzeFNGVnJhRmRTTTJob1ZHMHhSMDVzU25OYVIyeFhVbFpzTmxac1dsTlNNa1Y0VjI1S1RsWlhlR2hWYWs1RFZsWldjMVZzWkZoaVIxSllWMnRTUTJFd01YTlhibkJhVFVad2RsWkhlR0ZqYXpWWFZteGthVmRGTVRSV1JsWmhZekZhYzJORlZsSmlSbkJQVld0V1dtVkdXWGxqUlRscVRWZFNTRll5Y0dGVk1XUkpVV3hhV21FeVVsUlZNRnAzVW14a2NrOVdhRmROU0VKSlZtcEplR014WkVkVFdHeG9VbFJzV0ZsclduZFdSbFkyVTJ4a2FtRjZSbHBXUjNoUFYwWkplbUZJWkZkV00yaFlXa1JLUjFJeFZuTlhiVVpUVW10d1ZWWnRNVFJaVm1SWFZXNU9ZVkpGU205VmFrSjNWakZyZDFkdFJsaGlSbkJIVkd4b1MxWXdNWEZTYTJoYVRXNU5lRlpxUmxkak1WcDBZa1pPVGxaWVFsTldiWGhUVVRGc1YySkdaR0ZTVjFKeFZXeGtVMVpHYkhKWGJtUlZUVlphZWxsVlZrOVdNVXB6WTBSQ1drMUdXbkpXYWtGNFYwZFdSMkZHWkU1aGJGcFJWbTB3ZUZNeVRuUlVhMlJZWWtoQ2IxUldhRU5pTVZweFVtMUdXbFl4U2tsV1YzUmhZVEZLY2s1Vk9WZGlSa3BIV2xkNGExWXhXbk5hUmxaT1ZtdFpNRlpxU1RGVk1XeFhVMnRrV0dKR2NGWldiVEZUVmtad1dHVklUbGRpU0VKSFdrVmFhMVJzV1hoVFdHaFhWbnBDTkZWcVJsWmxSbVJ6Vm14a2FHSkdjRmxXYWtKdlVURktSMkpFV2xOaE0xSlVWRlpXZDJWc2JGWmFSV1JXVFZkU1IxVXllRmRXTVVwelkwWm9ZVkpGUlhoWmVrWnJWMWRLUms1V1RsTldia0phVm10YWEwNUdUWGhhUldScFUwVndWMWxyWkZOV01XeHlWMjVrVkZadVFsZFdiWEJEVmpKR05sSnJhRmROYmxFd1ZteGtTMUl5VGtsalJuQk9WbTVDVlZkWWNFZFZNbEpJVld0b2FWSnRVbTlVVkVKTFZGWmFjVkp0ZEU1U01HdzFWV3hvYjJGV1NuUlZiR2hYVFVkUk1GbFZXbFprTVdSMVdrWmtWMkpZYUZwWGExWnZZVEpHZEZOcmFHeFRSM2haV1ZSR2QxVkdXbFZSV0doVFZqQndTRmt3V25kaFJURnpVMnRzVjJKWVFrTmFWV1JPWlVaU2RWSnNWbWxTTW1oYVZsUkNWMU14VmxkWGJrNVdZVE5TV0ZSV1duTk9WbFY1WkVkMGFGWnJjSHBaTUdoRFYyeGFSbE5xVG1GU1JWcG9WV3BHZDFOV2NFZGFSVFZvVFRCS1dsWnFTakJaVmxsNFYydGtXR0V5VWxsWmJGSnpWbXhhZEUxWE9WTlNiSEI2VmpJeE1GWXhXbk5UYm14VlRWWndWRmxXV2t0WFZrWnhWV3hvVjAweFNsVldhMUpIWXpGWmVGcElWbFppVjJoVVdXdFdkMkl4V25STlZGSnJUV3hhZWxZeGFHdFdNVnBHVjJ4c1YyRnJSWGhWTVZwWFpFVXhXVlJzWkU1V1YzY3lWakZTVDJJeFdYZE5WbWhXVmtWS1dGVnJWbmRWUm5CR1YyeE9hbUpIVW5wV2JURnpZVVV4U1ZGc1ZsZGlWRVl6VlhwR1ZtVkdVbGxoUm1ScFVteHdWRmRXVWs5Vk1WWkhWMjVTVGxack5YTlphMlEwVmpGWmVXTjZWbGRXTUhCSVdXdFNUMVpYU2tkVGExSlhZa2RTUjFwV1dsZGtWazV6WVVaa2FWTkZTazFXTW5ocVpVWkplRlJzWkZkaWJFcFVXV3RWTVdOR1duTlZhMXBPVW14c05GWXlNVEJVYkVwVlVtdG9WazF1VW5aV1ZFWnJVMFpXZFZOc1dtbFNia0pOVjFkd1IxVXhXbk5YYmxaaFVqTm9XRmxzV2t0WGJHUnlWbTEwVGxKc1JqUlZNV2h2VmtkRmVXRkhSbFZXVm5BeldsZDRZV1JGTVZaa1JtUlhUVWhDUzFaV1pEUldNVmwzVFVoc2FGSlhlRmhaVkVaaFlVWnNWVk5yT1dwTmF6VkhWMnRrUjFVd01YVmhSbXhYWWxoQ1VGbHFSazlqTVdSWllrZDBVMDB4U2xGV1YzQkRWakExUjFaWWJFOVdWMUp2Vm0xek1WSXhVbk5hUnpsWFRXdHdTVlpYTldGV2JVVjRZMGhzWVZKRldqTlZiWE0xVjBkU1IxUnRiRlJTVlZsNlZtcEtNRll4YkZoVVdHaFdZbXhLVlZsVVJuZGpWbFYzVjI1a1dGWnRlSGxXTWpWcllUSktSMk5GYkZWV2JGb3pXVlJCZUdNeFRuSmhSbVJwVmtWYU5sWnJaRFJVTVVsNFZHNUtiRkp0VWxoWmExWjNVbFphV0dORmRGUk5hekUwVmxjMVQxZEhTbGhoUmxKWFlrWktXRnBYZUdGa1IwNUdWRzF3VGxKR1dqWldha28wWWpGUmVGZFlaRmhpVkd4V1ZtMTRWbVZHVlhoWGJtUlhZa1phZVZReFdtOVZNREZKVVd0b1YxSXphRmhXUkVaaFZtc3hWMXBHYUdsaWEwcFlWMVprTUZsV1RrZGlSRnBVWVhwc1ZGUldXa3ROUm14eVYyczVhRlpyTlVkVk1uaFBWakpLV1dGSGFGZFdSVnBMV2xWYVlWZFhSa2hTYkZKVFZrWmFXbFl4V2xOU01sRjRXa1ZrV0dKc1duRlZNRlV4WTFaYWRHVkdaRTVOVjFKNVZsZDRUMkZHV25OalJFSmhWbGRvZGxadGMzaGtWbFpaV2tad1YwMHlhRzlYYTFwaFVqSk5lVk5yWkdGU2F6VlBWRlZXZDFKc1duUmtSbVJhVm14c05GZHJWbUZWUmxwMFlVWkNWMkpZYUV4V01GcGhZekZXYzFwR1RsTmlSM2N4VjFSQ1YyRXlSWGROVmxwUFZsZDRXRmxzYUZOa2JGcElaVVp3YkdKR1ducFpWV1JIVmpBd2VXRkhPVmhpUmxwb1ZtMHhWMUl4WkhWVWJGSnBWMFpLVUZadE5YZGphekZYVjI1S1lWSkZTbkZVVmxwM1UxWlZlVTVWT1doaVJUVkhXVEJhYTFkdFNsVldhMUpoVm14d00xVnNXa3RrVm5CSFdrVTFhRTFZUWtsV2JYUnFaVWROZUZaWWFHRlNWMUpWV1ZSR2QxZEdVbGhPVlU1VVRWWktXRll5TlU5V01rWTJVbXh3VjFJemFIWldNRnBLWlVaT2MyTkdaRmROTVVwWlYydFNSMkV4U1hoV2JsWlVZbFZhVkZaclpEUldiRnBZWTBWT2EwMVZOWHBaYTJoTFdWWktXRlZzYUZWV1ZrcElWbXBHY21ReVJrZFViR1JPVWtWWmVGWnNZekZUTVZwMFVtNUtVMWRIYUZoVVZWcDNWa1pyZUZkdFJtcE5helZIVkd4Vk1WVXhTbk5qUlRWWFlsaG9jVnBWWkZKbFZsSlpXa1UxVkZJeWFIaFdWekI0VlRKSmVGWnVVbXBsYTFweFZGWmFkMDFHVWxkVmJFNVlVbXh3ZWxVeU5YZFhiRnBZWVVoS1YwMXVhR0ZhUkVwUFVqRmtjMk5IYUU1V1dFSmFWbTF3U21WR1RYaFRia3BQVm0xNGNGVnROVU5VTVZaMFpVaGtWbFp0VWxaVlZ6RkhWVEF4V0ZWcmFGcE5SbHBvV1ZkNFMyTnRUa1pQVmxwcFVqQXdkMWRzVm1GWlYwNVhWRzVHVm1KWGVFOVdiWGhhWld4YVIxZHRSbWxOVm5CWlZUSTFUMVpIU2taVGJHUmFWak5TTTFaclduTldiR1J6V2tkd1YySkZiM2RXUkVaclRVWlZlVk51U2xSaE1uaFlWRlprYjAweFZuRlRhMlJVVW10d1dsa3dXbUZoUlRGWFkwZG9WMkpZVWxoVk1qRlNaVVphZFZOdFJsTldia0o1VmtaYVZrMVZNVmRXV0d4c1UwZFNiMVZzVWtkbGJGWnpZVWQwV0ZJd1ZqUldNakZ2V1ZaS1JsZHVTbGRoYTFwb1drWmFWMk14Um5OYVJUVnBZbGRvVWxacVJtdE5SbGw0WWtaa1ZtSkhVbGxXTUdRMFkyeFdjVlJzVGxoU2JFcFpXa1ZvYTFZd01WaGxTR3hYWWxSQk1WWXllR0ZqYlVwRlYyeHdWMVl5YUUxV2JUQjRVekZrVjFKdVZtbFNNRnBVVld4YWQwNVdaSE5YYkZwc1VtMVNXRlpYTlZOaFJrcHlUbFU1VmsxR1dreFZNbmhoWTJ4V2NscEhhRTVTUlZwSlZqSjBiMVF4YkZkVGJHaG9VMFUxVjFsVVJuZE5NVnB6VjJ4T1YySkdjRlpWYlRFMFZqSktSbUl6WkZoaE1WcFhWR3hrUjJNeFRuVlRiR2hwVWpOb1dsZFdVa2RaVlRCNFYyeG9hazB5YUZSWmJGWnpUbXhyZDFkdE9WZE5WWEJaV2tST2QxWXhTWHBoUm1SaFZsWndVRlZxUmxOak1rcElZMFpPYVZORlNqSldNV1F3V1ZkUmVWWnJaRmhpUjJoeFZXeGtVMWRHVWxoa1NHUnNZa1p3TUZwRlpEQldNVmwzVm1wT1ZXSkdjSEpXYWtwTFZsWktjMVZzWkdoaE1YQm9WMnhhYTFZeFRrZFRiazVoVW0xU1QxVnRlSE5PYkZweVdrUlNXbFp0ZUZoV01XaHJWR3hhZEZWdVJsWmlSbkJNVm1wR2MyTXlSa2RUYlhST1ZteFpNRlpxU2pCaE1rWnpWMjVPYWxOSVFtRlpWRVpXWlVac1ZscEZkRmhXTUZwR1ZrZDRhMVJzV25WUmJtaFlZa1phYUZZeU1WZFdNVTUxVm14YWFWSnVRblpXUmxwWFpESlNjMWRyWkZkaVZHeFhWRlpWZUU1R1duUmxSbVJXWWxWV05WWlhOVU5YYlVWNFZsaG9WMkZyV25KWk1uaHJZMnM1V0dGSGFHeGhNWEJvVm14YWEyUXhTWGhYV0d4VVlrWmFXRmxyWkc5WFJsSllZMFZrV0ZKc2NEQmFWVll3VmpGYWMyTkljRmRXTTJoeVZtcEJlR1JIUmtaWGJHUk9ZbTFvYjFkV1VrZFVNbEpIVjI1V1ZXSkhVbkJaYTFwM1YyeGtXR1ZIT1ZaTlZuQllWbTAxUjFaWFNsVldiazVhWVRGd2VsUnNXbmRXYkZwVlZtMW9WMDFJUWxoWFYzUlRWREZrZEZKdVNrOVhTRUpaVm0xNGQxTXhjRmhOVldSVVZtczFlbFl5TVhOWFJrcFdZbnBHVjAxdVVsUlZha3BQWkVaYWMxZHJOVmRpV0doWFYxZDRhMkl4V2tkVmJGcG9VbFUxVlZadGVIZFNiRlowVFZSQ1ZXSkZjREJXVnpWM1YwZEZlRmR1V2xwaE1YQk1WV3BLVDFJeFduTmpSMnhYVWxaWk1sWXllR3RPUjBWNVZHeGtWR0pzU2xCV2FrNXZZMFpXYzFkdVpFOVNiSEF3VkZWb2IxUnNTbk5qUldoV1RXNW9lbFpYTVV0ak1rNUhZa1prYVdKclNrUlhiRlpoV1ZaS1YxUnVTbXRTYldoVVdWaHdWMWxXWkZWUmJVWldUV3RhV1ZVeWRHRmhiRXBWVm14b1dtRXhjRXhXUlZwVFZteGtjMVJzVGs1V2EzQTJWbXBLTkZZeVJrWk5WV3hTWWxSc1dGVnRlR0ZqYkZKeVYyczVhazFXY0ZwWmExVXhWakZLY21OSVdsZFNiSEJYVkZaYVQxSXhaRmxpUjNCVFlsWktXbGRYZUZka01XUlhZMFphVjJKRk5WbFphMXAzVWpGcmQxWnFVbGRoZWtaSVdUQm9TMWRyTVZkalJYaGhVbGRTVEZVd1pFdFNNWEJIV2taT1YySllZM2hXYlRFMFlqSlJlRk5ZYUZSWFIzaFhXVzF6TVZac1dYZGFSemxYVW0xNFZsVXlNRFZXTURGWVpVUkNXazB6UWtoWlYzaExZekZrY1ZKc2NFNVNiSEI1VjFaa2VtVkdaRmRTYmtwaFVtMW9iMVJYYzNkbFJtUlhWV3QwVkUxVk5WaFZiVFZMVmxkS1NWRnJPVlpoYTFwSVZGUkdXbVZHWkhSU2JHaHBWbXh3U2xaVVNqQmlNVkY0VjFoa1dHSkdTbWhXYWs1VFlVWlplRmR0ZEdwTlYxSXdXa1ZhVjJGV1duTmpSbkJYVmtWdmQxbDZSbXRUUms1ellVZDRWRkpWY0ZoWFZsSkxWV3N4UjFWc1ZsTmlXRkpaVld4U1IxTnNiRlpYYm1SWFRVUkdWMWt3VWxkWFIwVjRWMnhvVjFaRmNFaFZNRnBoWkZaU2RHTkdUbGRpU0VKdlZtMHdlRTVHYkZkVWEyUnBVMFpLYzFWc1VuTlhSbXh5VjJ0MGJGWnNjRWxVVmxKRFZsZEtWbGRVU2xkaVIyaHlWbXBHUzFKc1pITlZiRnBYVWxoQ1NWWnRNWHBsUms1WVVtdGtWbUpIVWxSV2JUVkRZakZhY2xkc1pHaE5WbFkwVmpGb2IxbFdUa1pYYkZKYVZrVkZlRll3V2xka1IxSklVbTE0YVZKc2IzZFhiRlpxVGxaWmQwMVdaR3BTUlZwWFZtcE9iMlJzV25GVGExcHNWbXhhV2xkcldtdFZNVXBYWTBjNVYySllRa2hhUkVaS1pVZE9SbHBHVW1sV01taFFWbXBDVjFNeFVYaFhiazVXWVRBMVdGUldWVEZsVmxKWFYyMTBXbFpyY0ZoV01uaFhWakpGZUdOSGFGcGhhMXBvV1RGYVIyUkdTbkpPVms1cFUwVkdNMVpyV21GaU1rVjVVbXRhVGxac2NGaFpWM2hoWVVaV2MxZHNjRTVTYkhCNVZqSXhSMVl5UmpaV2JHUlhVak5vZGxsVlpFWmtNazVGVjJ4a1YxSlZjRzlXYlhCTFZURlplRlp1VmxaaVJUVndWbXBPYjJReFdsaE5TR1JQVmxSV1NGWXlOVWRWTWtwVllraEdWVlpzV21oYVZscFNaVVprZEZKdGFGZGhNMEphVjJ4V1lWUXhaSFJUYkZaVFZrVktZVlJWV25kV1JscHpWMnQwYW1KV1NrZFViR1J6VmtaS1ZtTkZiRmROVm5CWVdXcEdVbVZXU2xsYVJUVlhZbGhvVkZkWGRHRlpWbVJYWWtab2ExTkZjRTlXYlhoYVRXeFdWMkZIZEdsU2Eyd3pWR3hXZDFZeFNYcGhSRTVYVW5wR1NGbDZSbXRqTVVwellVWmtVMVpZUWpWV2JGSktaVVpaZUZkdVNrOVdiVkp2VlcweGIyTkdXbkZUYlRsWVZtMVNlbGRyVWxOWGJGcFZVbXRvV0dFeGNIWldSRVpyVW1zMVdFOVdjR2xTYkZrd1ZrWlNSMk15VG5OWGJsSnJVbXh3VkZsc1drdFRiRnB6V1hwR1ZVMVdiRE5VVmxacllXeEtXV0ZHV2xwaE1YQXpXVEo0WVdOV1NuVlVhemxwVWxoQmQxZHNWbXRqTVZwSFUyeGFhVkpGTlZoWlZFWkxVMFpzY1ZOck5XeFdhM0I2VjJ0YWExZEdTWHBoU0d4WFZrVktjbFpVUmxabFJsWnpZVVUxVjFKcmNGUldSbHByVlRKV1IxWnNhRTlXVkd4WFZGWldkMlZXV1hsalJXUllZbFZXTlZaWGRHOVdNREZIWTBWNFdrMXFSa3hWYkZwWFl6SkdSMXBHVGxkTk1sRXlWbTEwWVZZeGJGaFZibEpYWVRKb1ZsbFVSbmRpTVZaeFZHMDVWMUp1UWxsYVJXUkhZa1phYzJORVFsVmlSMmh5Vm1wQmVHTnJOVmRoUm1SVFlsZG9lVlp0ZUd0VE1rNTBWR3RrVjJKR1dsaFdiWGhYVGtaYVIxWnRSbHBXYlZKSFZGWmFWMVp0U2tsUmJHaFZWbFp3TTFZd1dtRldWazVWVW14a1RsWXhTa3BXVkVvd1lqSkdSMU51VGxSaVIzaGhXV3RhUzFOR1ZYZFhiRnByVFZkU2VsZHJaREJWTWtwWFUxaGtXRlpGU2xkVVZtUkhVMFpPY2xkdGJFNU5ibWhaVm1wQ2IxRXhUa2RYYkZaVVlrVTFjVlJXV2t0WGJHUnlXa2hPVmsxV2NIbFpNRnBUVmpKS1dWRnJlRmRXUlZwUFdsVmFZVmRXY0VkYVJtUlRWbTVDTlZacldtRmlNVVY0V2taa1ZtSkhVbGxaYkZaaFdWWmFjMVZyWkZkTlZsWTFXbFZhYTFZeVNrZGpSRUphVmxkb00xWnFSa3RTYkdSMFlVWmFhR0V6UWsxV1Z6QjRWakZKZUZadVRtRlNiVkpZVlcxNGQxSnNXblJqUlhSclRWVldOVlpHYUc5V1YwcElWV3hvV21KWWFFeFdNVnB6WXpKR1JsUnNWazVXTTJoYVYyeFdWMDFIUlhoWGJrNXFVbTFTV0ZSWE5VNU5WbHBZWXpOb2FtSkhVakZaTUZwdllVZEdObFpxV2xkaVdHaHlWWHBHWVZkR1RuSmhSazVwVWpGS1VGWlhNVFJrTURWeldrWm9UbFpHU2xaWmJGcGhWMVpWZVdSSFJsZFdNSEJhV1ZWb1ExWXlTa2RqUkU1WVZteHdjbFpzV2tka1IxSkdUMVpPYUUwd1NrdFdiR040VGtac1YxWlliRlJpUmxwWVdXdGFZVmRHYkhKWGJGcHNVbXhhZVZZeU5XdFhSa3BWVW14a1lWSlhVak5XVkVwR1pVZE9SMXBHYUZkTk1VcFpWMnRTUjFsV1NYaFVibFpVWWxoQ1ZWVnRkSGRYYkZweFVXMDVVazFWTVRSV1YzaGhXVlpLV1ZGdVNsVldNMmhNVlRCYVZtVlZNVmxVYkZacFZsaENXVlpVU2pCT1JsbDRWMjVPVkdFeFNsZFpWM1IzVkVac05sTnJkRk5OV0VKSlZXMTRUMkZYUlhkalNGcFhZVEZ3V0ZscVJsWmxSbEp5V2taYVdGSXlhSFpXVjNCUFZUSk9SMVp1VWs1V2F6VlZWVzE0VjA1V2EzZFhiWFJZVW10d2Vsa3dVa05XTVVwMFlVaGFXRlpzY0dGYVZ6RkhVbFpTZEZKc1RsZGlSbFkwVm0xd1IyRXhUWGhVYTJoVVlUSlNXVmxzYUc5alJsWjBUVVJXVDFKc2NEQlpNRll3VkRGSmQySkVVbGRpUjJoMldWZDRUMUl4VG5OVmJIQlhVbGhDTWxadGNFZGpNazE0V2toV1lWSXpRbGhaYTFaM1YyeGtWVkZ0UmxWTmExWTFWVEowYjJFeVZuSmpSbVJWVm14d1RGVnJXbk5YUjAxNllVWlNVMDFXY0VoWFZFSmhZVEZWZVZadVRsaGhNVnBaVm1wT1UyTnNWalpTYkhCc1VtMVNNVlp0TVVkVk1rcEdZMFpzVjJKVVJYZFdNakZYWXpGa2NsWnNUbWxTTVVwNFZrWmFWMlF4U1hoVmJHUlhZbXMxYjFWdGRIZFhiR3hXVjIwNVYySlZjREZWVnpWM1ZqRktjMk5HWkdGV1ZuQm9XVEp6TlZZeFRuUmlSazVzWWxoUk1sWnFSbXROUmxsNFZsaG9WMkpyTlZsV01HUTBWakZzVlZSc1RsZE5WbkI1Vm0xME1GWldTbk5UYm5CWFRXcEZkMWxYYzNoamJHUnlZVVprVTAwd01UUldiWEJDWlVaS1YxZHNiR0ZTYlZKVVZGUkdTMlZXWkZkVmEyUlZZbFphV0ZZeU5VOWhSa3B6VjIwNVZWWkZjSFpXYlhoaFpFZFdSMWRyTlZkaE1Wa3dWakowYjFJeFZuUlRia3BQVm14YVdGbHNhRTVsUmxKV1YyNWtWMkpJUWtaVlYzaHJWVEpGZWxGcVdsaFdlbFl6VldwR2ExSXhaSEZYYkU1cFltdEtXRlp0ZEZka01XUkhZMFZhV0dGNmJISldiWFJoWlZaUmVGZHRkRlpOVjFKSFZUSXdOVll5U2xWU2FrNVhVa1Z3VEZwRldtRmpiSEJJVW14U1UxWkdXbGhXYlRFd1ZqRnNXRk5ZYUZaaVIxSnZWV3hWTVZkV1duUmxTR1JVVm14S2VsZHJWbXRYUjBwSFkwaHNXbUV4U2xSV2FrcExWbFphZEdGR1pHaE5WbGt3Vm0weE5HRXlUbGRVYms1WVlsaG9iMVJXWXpWT2JGcHpWV3RPV2xadGVGbFdWM1JoVkd4YWMyTklSbFppV0doTVZtdGFZV05zWkhOalIzaFhZa2QzTUZZeWRHOWhNVnBXVFZoS1YyRnNTbUZVVldSdlZrWmFWVk5yV214V01GcElWMnRhZDJGV1NuVlJXSEJZVmpOQ1NGZFdaRk5YUmxKeVdrZEdVMDB4U2xWWFYzaHZZbTFXUjFwR2FHdFNNMEpQVm1wQ1lXVnNWWGxsUm1Sb1ZtczFTRll5TVVkWGJGbDZWV3BPV2sxdWFGZGFWbVJYVW14a2RHUkZOVmRYUlVZelZtdGtORmxYVVhoVmJsSlRZbXR3V1ZsclpEUlhSbFowWlVkR2FtSkdjRlpWYlRFd1ZqQXhWMU5xUmxkaVdHaHlXVlZWZDJReFRuTldiR2hYWWxVME1GWkdVa3RXTWsxNFkwVnNWV0pIYUhCV2EyUTBWMFphUjFwRVVscFdiVkpJV1d0b1MxZEhTbFZpUmxwVlZtMVNWRlV5ZUZkWFJURllUMVpvYVZaWVFrbFdWRWt4WkRGYVdGTnJaR3BUU0VKaFdsZDBZVlpHV25OWGEzUnJVakZhU1ZscldtdFdNa3B5VTJ0NFYySllVbFJWYWtaV1pVWldXV0ZIUmxOaVNFSlFWbXBDWVZNeVNYaFdXR1JYWW0xU1dWWnRlR0ZsVmxwMFRsZDBhVkl3Y0VwVlYzUnZWakF4Y1ZadVNscFdSVnBNVm14a1MxSnRTa2RXYXpWWFlrZDBNMVp0TUhoT1JteFdUbGhTVkdFeGNFOVdiWGgzVkRGYWNWTnRPVTlpUm5CWVZsZDBhMVpyTVZoVmEyaFhVak5vZWxsV1drdGphelZaVVd4a1RsSnVRazFXYTFaaFdWWmtSazFXYkdGU00wSlBWV3RXU2sxR1pGVlJiVVpvVFd0YVNGVXlOVXRVTVdSR1RsWm9XbUpHU2tkVVZWcGFaVVprYzFSdGNFNWhNWEJMVmpKMFlXUXhXWGROVld4U1lrZFNXVlpxVGxOV1JscHhVbTEwYTFKck5YbFdNbk0xVmpGYWNtTkhhRmhpUjFGM1drUkdUMUl4WkZsYVJtaG9aVzE0ZVZadGNFTmtNVTVIWVROa1dHSlViRmRVVmxwMlRXeHNWbFZzVGxkTlZuQjZWVEowTUZsV1dsZGpSbVJoVm14d1VGa3llSGRUUjA1SFZXeE9WMWRGU2xaV2FrWnJUa1pzV0ZWWWJGVmhNbEpZV1cxNFlXTldWWGRXVkVacVVteEtXRmRyV2s5aVJscHpZa1JTVjFZemFISlpWV1JIVG14S2RXSkdaRTVpYldnMlZtMHhlbVZIVGxkWGJsWnFVbTFTVDFsdE1XOWxWbHBZVFVob1ZFMUVWbnBWTWpWUFZtMUdObFpzVWxkaE1YQmhWRlphWVdOc2EzcGhSVFZUWWtWWk1WWnJaREJoTVZWNVUydG9hRkl5YUZkWmEyUnZVa1phVlZKc1RsZGlSbkF4Vmtkek1WUnNXWGhUYkdSWFZrVmFWRlZxU2tka1JrcHhWMnhrYVdKWWFGbFdWelYzVmpGS1IxZHNhR3hTYmtKelZtMTRZV1ZXY0VaWGJVWlhUVlZ3VjFrd1ZuTlhSbG8yVWxSQ1YxSkZXbWhaZWtaWFpGWk9jMVZ0YkZkV2JrSlJWakZhYjJReFdYaFViazVZWWtkb1QxWXdaRk5WTVZKWVpFZEdWRkpzV25wWlZXUXdWbXN4VjJORmFGZE5ibWhZVm1wS1MxTkdWbkpQVmxaWFlraEJlbFpxUW10Vk1VcFhWbTVTYTFKdFVtOVVWbU0xVFRGWmVGZHNaR2hOUkVaSVZteG9hMVJzWkVkVGJHUlhUVWRTZGxZd1dsTlhSVFZYVkcxd2FWSXpZM2xXVkVvMFlURmtSMU51U2s5V1JWcFlWbXBPYjFWR2JGZGFSWFJUWWxVMVNWUXhXbXRoVmtweVkwVXhXRll6UWtOVVZtUk9aVlpTY2xwSFJsTk5iV2hWVm0xMFlWbFhWbGRYYmxKcVVsVTFjbFJXWkZOWFJscFhZVWM1V2xacmNFZFZNakExVmxaYWMyTkljRlZpV0doNlZtMHhSMUpyT1ZkaFIyeFhZa2hCTVZadGNFdGtNV3hYV2toU1ZHSkdXbFJaVkU1VFlVWmFjVlJ0T1ZSU2JrSkhWMnRhYTFaR1NYZGpSV3hhWVRGd2NsbFdXa3RPYlVaRlZXeGthR0V4Y0ZWV1ZsSkhWVEpPY2sxV1pHaFNhelZ2VkZkNFMyVkdXbGhsUjNScFRWWnNORmxyYUZOaVJrNUlWVzVHVm1KVVJUQlVWVnB6VG14U2RFOVdWbWxTYmtGM1YydG9kMU14V25KTldGWldZbXR3WVZac1pGTlVSbHAwWTNwR1YxWnJXbnBXTWpGelZqRktjMk5HV2xkaGExcG9WMVphYzFack5WbFViR2hwVWpOb2IxWlhjRU5aVmxwSFlraE9WMVpGU25OWmEyUlRaVlpaZVUxVVFsZFNWRVpaVmxkMGExWlZNVmRqU0ZwYVZrVmFTMXBFUm10ak1rWkhWbXhrVTFkRlNYaFdhMXByVGtac1YxTnVUbWxTUm5CVVdXdFdkMVF4Vm5KWGJVWllZa1p3ZWxkclVrTmhhekZYWTBWc1ZrMXVhSFpaVlZwUFVteE9kRkpzY0dsU01taFFWMnhXWVdReFNuTmFTRlpWWWxoQ1dGbHJWbmRPVm1SeVZtMTBUbEpzVmpSV01uQmhZVWRXY2xOc2FGWmlXR2hvV2tkNFlXTldTblJrUm1Sb1pXdGFXVlp0TUhoak1WcEhVMjVLYWxJeWFGaFpiRkpEVGtaYVdHTXphRk5OYTNCS1ZUSjRiMkZXV2tkWGJuQlhWak5vVkZsNlJrOWpNVnB6WVVkMFUyRjZWblpXVnpFMFpERlplRmRZYkU5V2JWSllXVmh3UjFkR1dYbGxSVTVYWWtac05sbFZVa3RaVmtwR1kwVjRWbUpZYUZoWmVrWlBZekZ3Ums1WGJGTlhSVVkxVm0wd2QyVkhVWGhUV0d4VlYwZDRWVmx0Y3pGalJsWnlWMjVrVjJKSGVEQlpNM0JIWVdzeFdHVkdXbGRTZWtFeFZrZDRZV014WkhOaVJsWnBVbXhWZUZacVFtdFRNVTVIVm01S2FGSnNjRTlaVjNoaFZsWmFjVk5ZYUZOTmF6VjVWR3hhWVdKR1NYZFhiRkpYWWxob2VWcEVSbXRqYkdSMFVteGFUbUY2VmxsV1Z6QXhWREpHYzFOdVVtaFNiRXBZV1cwMVEyVldjRmhsUm5Cc1VqQmFTbGRyV2xkVWJVVjRWMVJHVjJFeVVYZFpha1poWkVaS1dXSkhhRk5OYldoWFZtMXdUMUV5Vm5OWGExcFlZa1UxV1ZWc1VsZFhWbEY0V2tSQ1ZXSkdiRFpYYWs1clZqRkplbUZIYUZwV1JWcFRXbFZhVDJNeVNrZFRiR1JUVm01Q2IxWnRjRU5pTVVWNVVtdGtWMkpyY0doVmJHUlRWMFpzY2xadVpFNVNiRXA2VmpKNFQxWXdNVmRqUmxwWFlsaFNWRlpxUVhoa1ZrWnlWV3h3YkdFeGNFMVdWM0JIVXpKTmVWSnJhRk5pUlRWWlZXeFdkMVpXV25KWGJHUlhUVmQ0V1ZaWGVHdFdNV1JJWVVab1dtSkhhRlJaTVZwVFYwZFNTVnBHWkU1V00yZzFWbTB3TVZReFduUlRiRnBxVW0xNFlWWnNaRzlVUmxwMFRWVmthbUpWTlVwVk1uaDNZVlprU0dGR2JGZFdNMEpJVm1wR2ExWXlUa1poUms1b1pXeGFWbFpYZUZkV01EVkhWMjVHVTJKVWJISlVWbVEwVjBaVmVXUkhPVlpOYTNCSVdUQmFVMWR0U2tkVGJHaFhZa1p3YUZsNlJtRldWa3B6VTJzMVYwMVZiekJXYkZwcVRWWlJlRlpZYUZSaWEzQlpXV3RrTkZkV2JGVlNiVVpPVFZad1dWbDZUbTlWTWtwSVZXcEdWMkpZYUdoV1IzaGhZekpPUjFKc1pGZGlWa1YzVjJ0amVGVnRWbGRVYmtwWVlrWndjRlZzYUVOa01XUllaRVprYTAxV1NraFdNbmh2WVRGS2NrNVdUbFZXTTFJeldsZDRhMk5zWkhOYVJtUlRUVWhDU0ZaSGVHOVNNVnBYVjFod1ZtRnJOVmRaYTFwM1ZrWnNObEp0UmxoV01GcEpXVlZhYTFZeFNsZGlla1pYWWxoQ1MxUldXazVsUm1SWllVWlNhVkl5YUZoWFZ6QXhVVEZzVjFkdVVrNVdhelZYVlcwMVExSXhXWGxrUkVKb1RWWnNNMWt3Vm5OWlZscFhZMGRvVjFKNlJreFdNRnAzVWxaYWMxcEZOVmRoTTBKU1ZqRlNTMlZ0VmtkYVJXUlhZa2Q0YjFWcVNqUldSbXh6WVVjNVdGSnRVbGxhVlZwUFlXc3hWMU51Y0ZwaE1taFFWbXBLUzFac1pIVlNiRnBwVmtWV05sWkdaRFJaVms1SVZXdGFVRll5YUZSWlZFb3pUVVphVlZOcVFtcE5WMUpKVlcwMVMyRkhWbkpYYkdSaFZqTlNTRlJyV21Gak1YQkdaRVpPVjJKRmIzZFdWekUwWVRKR1YxZFliR2hTYkhCWVZGYzFiMkZHWkZkYVJUVnNVbTVDUjFZeWN6VldNa3BaWVVob1YxWXpRa1JYVm1SUFVqRmtkVk50UmxOU1ZGWlFWbTB3ZUZVeFpGZGpSbHBYVmtWYVZsbHJXbk5PUmxsNVkwVk9WMkY2UmpGVlYzaHZWakF4ZFZScVRtRlNSVnBRV1RKemVGWXhjRWRhUjJ4WFZrVkpNRlpxUm1wbFJUVkhWVmhvV0dKck5WZFpiWFIzVmxac2MxWnRSbFZOVmxwNFZrY3dOVlV5U2tkalJtaFhUV3BGZDFsVlZYaFdhelZaWTBaYWFWSXlhSGxXYkZKTFV6RmFWMWR1VGxkaVIxSndWVzE0VjA1R1dsaGtSMFpxVFdzMWVsa3dWbUZoTVVwelUyeG9XbUV4V2pKYVJFWnJZekZhZEZKc1NrNVdNMmhZVmtaYWIxSXlSbGRVYTJSWVlrZFNWbFp0ZUhkaFJscFdWMnhrV0ZJeFdrcFdNakV3VkcxRmVsRnJhRmRpUjFFd1ZYcEdXbVF3TVZsVWJGSm9UVEpvV1ZadE1UUlRNVXBIVm01R1ZHRXpVbkZVVmxwTFpXeFplV1ZHWkdoU1ZFWktWVmN3TlZZeFNuTlhia3BWWVRGd1RGWnFSbUZqTVhCSVVteE9UazFWY0RKV2JUQjRUa1paZDAxSWFGZGlhelZYV1d0a1UxZEdWblJsU0dSWVZteHdXVnBWVms5WFIwcEhZMFZrV2sxR1dUQldiWE40VTBaV2MxUnRSbGROTW1odlYxaHdSMWxYVFhoVmJsSnNVako0V1ZWcVNtdE9WbHAwVFZoa1ZFMUVSa2hXTVdoclZERmFXR0ZHV2xwV1JYQlVXVEJhVm1ReFpIUlNiR1JYWWxob05sWXlkR3BPVjBaelYyNVNiRkpGU2xaV2JYaExVa1pzVlZOcmRGUlNNVnBLV1ZWYWExVXdNSGROVkZKWVZteEtTRll5TVZKa01EVlhWMjFzVTJKSVFuZFdha0pYVXpGS1YxcEdaRmRpVlZwVVZGVlNWMlZzV1hsT1ZtUm9VbXR3TVZWWE1EVlhiRnBHVGxWU1ZXSllhSEpaTW5ocll6RndSazVXVG1obGJGcGFWbXhqZDAxV1ZYbFNhMlJVVjBoQ1YxbHJXa3RXYkZwMVkwVmtWMUpzU2pCYVZWcGhZa1pLYzJOSWJGVk5WMUoyVmtkNGExSnNUbGxhUm1Sb1RXeEdNMWRZY0V0U01WbDRWRzVLV0dKR1NuQlpWRVozWVVaa1dHUkhSbHBXTUZwSVZsZDRhMWRIU25KT1ZrSmFZVEZWZUZSVldsZGtSVEZWVVcxb1YySklRbGRXYlhodllURlplRk51VGxoaWJIQllXVmQwZDFOR2EzbGpNMmhZVm10d01GbFZXbE5WTWtwSlVXeGtWMkV4Y0doV2JYTjRWMFphYzFwR1pHaGlTRUpVVjFjeGVrMVdXa2RXYmxKclVqQmFXVlp0TVZObFZscDBUbGQwVjJKVldUSlZiWFJyVmpBeGNWWnNhRmRpV0U0MFZtcEdhMk14Um5OWGJHUk9UVzFrTlZZeWRGTlRNVTE0VTI1T1YySnJOVlZaYTJSVFZERnNjbFp1WkU1TlZuQXdXbFZqTldFd01WZGlSRTVWWWtkb1VGZFdXazlTYXpWWVQxWmFhVmRGTVRSWFZsWmhZekpOZUZkdVZsVmhlbXh3VlcxNGQxZHNaRlZSYkdSVlRXdGFTRlV5TlU5aFYxWnlZMGRHV2xaRldreFZNRnBoWTJ4YVdXRkdUbWhsYkZwaFZsUktOR1F5U2toU1dIQlNZVEo0V0ZsWGRFdGhSbHBGVTJ4T1ZGSnNTbmxXTWpFd1ZUQXdlV0ZHYkZkV2VrVXdXa1JCTVdNeFpGbGhSbkJPVFd4S2VsWlhNVFJTTURWWFYyeG9UMVpVYkc5WmExWjNWMVpzVmxkdE9WZE5hM0F4VlZjMWQxWXhTbk5qUjJoWFlrWndWRnBGWkZOVFIwcElZa1pPVGxaWGQzcFdiWFJoV1ZkSmVGVlliRk5YUjJoWldXMTRZVlV4YkZWVGJUbFhZa1pLV0Zkcll6VldiRXAwWlVaa1YwMXVhRE5aVkVGNFkyczFWbGRzWkdsWFIyZ3lWbTF3UzFNeFpFaFNhMXBPVm0xU1ZGUlVTbTlYVmxwSFZtMUdWRTFWYkRWV1IzUmhZVVpKZWxGc1VsZE5SbkJNV2xkNFlXUkhUa1pQVmxwcFZteHdTVlpxUm05ak1rcEhVMWh3VW1GNmJGaFpWM1JMWVVaU1ZsZHNXbXhTTUZwS1ZrZDRhMkZXV2xsUmJVWllWbXhhVjFwVldtRmpNV1J5VjIxc1RrMXNTbTlXVjNSWFdWWkplR05HWkdGU1dGSlVXV3RWTVUxR1ZuUmpla1pXVFVSQ05WbFZWbXRXTWtwSFkwZG9XbFpGY0VkYVZWcFRaRlpTYzFSc2FGTk5WWEJXVmpGa05GVXhXWGhhUm1ScFUwVndhRlZ0ZEhkVU1WWjBUVlJDVGsxV2JEVlViR1F3WVVkS1JtTkliRmROYmtKSVZqSnplRk5HVmxWUmJHUk9VbTVDVFZadGVHRlRNV1JZVW10a2FGSnRVbFJXYkdoRFRsWmFjbHBFUW1oTlZXdzBWa2QwYTFZeVNuSmpSemxXWWxSR2Rsa3dXbk5qYlVaR1ZHMTRVMkpXU2xwWGJGWmhWREZXY2sxVlZsTmlSMmhoV1ZSR1MyRkdXbk5hUlhSVFlYcFdXVlF4V21GaFIwVjNWbXBTVjFKc2NHaFhWbHByVW1zMVYySkhSbE5OYldoUVZsZDBWMWR0VVhoYVNFcFdZWHBzYjFSV1pGTmxiRmw1WlVkR1ZVMVhVa2hXTWpGSFYyMUtTR0ZJV2xWV1JWcFhXa1JHYTJOdFVraGtSbVJPVTBWS1MxWXlkRmRXYXpGWVVteGtZVkpYYUdoVmExcExWMFphY2xadVNteFNiWGN5VlRKek5XRnRSalpXYkhCV1RXNW9XRmxXWkVaa01rNUhWV3hrYVZkRlNrMVdiRkpIVkcxV1IxZHVUbGRpUlhCdlZGZDRTMlF4WkZoa1JscE9WbXhzTkZZeWRHOWhNVXBaVlcxR1YySkdTa2hWTVZwM1ZteGFjMXBHWkdsU2JrRjNWbXhqTVZNeFduSk5XRlpvVWxob1ZsbHNhRzlUUm5CR1ZsUkdWMDFYVW5wV1J6RnZZa2RLUjJORlpGZGhhMXBvV1ZSQk1WTkdWbGxoUmxab1RXMW9XVmRXVWt0T1JscHpZa1pzYWxKWFVuQlVWbHBMVm14VmVVMUVSbWxTYkhCNldXdFNVMVl3TVhGU1dHUlhZbGhPTkZacVJrOWpNa3BIVjIxc1dGSXlaM2xXYlRFd1lURk5lVlZyYUZkaE1taFVXV3RrVTFReFZuUmxTRnBzVm14d1NGWXlNVWRXVjBwWFVtcFNXbUV4U21oV2FrcExWMWRHU0U5V1ZsZFNXRUl4VjJ4V1lWbFdXWGhoTTNCb1VqSjRUMWxVUmxwTlJscFZVbTA1YWsxWGVGaFZNblJoVjBkS1ZsZHNhRnBpVkZaRVZWUkdVMVl4WkhWVGJYUk9WMFZLU0ZkclZtdGtNVlYzVFZWa2FsSllVbGhVVnpWVFlVWndSVkp0ZEZOTlZUVXhWVEl4ZDFVeFNsbFJiR3hYVmpOb2FGZFdXbGRTTVZwellVVTFWMWRHU25oV1JscHFUbFUxYzJFelpGaGhNMUp2VldwQ2QxTkdhM2RoU0U1WFRWWndSMVV5ZUc5WlZrcEdZMFYwWVZaWFVreFZNVnBYWTJzNVYxcEdaRk5OTW1kNlZtMHdlR1F4UlhsVVdHUlBWMFUxV0ZZd1pEUlZSbHAwWTNwR1YySkdjSGhWVnpWclYwWktjMVpxVWxkV00xSnlWakJrUzFac1duRldiR1JYWld4WmVsWnFTalJaVjAxNFdraEdWV0pHV25CVmFrWkxVMFprYzFwRVVsTk5helY2Vm0wMVUyRkdTblJWYkdoWFlsUldRMXBWV21Gak1WWnlXa1prVGxacldUQldWekF4VkRKR1ZrMUliRlppYTBwWFdXdGFkMVJHV2xWU2JVWnFWbXMxZWxaSE1XOVZNa3BKVVdwU1YyRXlUak5VYkZwU1pWWk9jbUZHV21saWEwcFpWbTAxZDFZeVJrZFhia3BYVjBkb1ZWVnFSbUZTTVZwMFpVZEdWMDFyY0ZoVk1qVnpWakZhUm1KNlFsWmlWRVpUV2xWYVQyUldWbkpQVm1ScFVsaENXbFp0TVRSVk1WbDRVMnRrV0ZkSGVIRlZiRlV4WTFaU1YxWnVaRlJTYkZvd1dsVmpOVmRzV25KaVJGWmhWbFp3Y2xac1dtRldNV1J6V2taV1YySklRbGhYYkZaaFdWZFNTRlZyWkZkaGVsWnZWRlphY21WR1duTlZhM1JPVWpCc05WVnNhR3RVYkU1SVlVWnNXbUV4Y0ROV2FrWnpaRVUxVmxSdGVHbFNNMmcwVmxjd2VFMUhSblJUYTJScVUwZG9XRlp1Y0VkTk1WcFZVMnQwV0ZadE9UWlpWVnByVmpGS1dHUjZRbGhXTTBKTVZXcEtVMUl4VW5WV2JGcHBWMFpLVmxaWE1ERlJNa1pIV2taa1lWTklRazlXYlhoSFRrWnJkMVp0ZEZwV2EzQldXV3RhVjFadFNsbFZhazVoVmxad1dGWXdWWGhYUlRsWFYyMXNWMkpJUVRKV2JYQkxaREZWZUZwRlpGaFhTRUpUV1ZST2IxbFdjRmhrU0dSWFVteHdNRlJXV2s5Vk1rcFdZMFZvVmsxcVJucFdha0Y0WkVkR1JWWnNaR2xTTVVsNlZsaHdTMUp0VmxkWGJsWlZZa1phY0ZWdE5VTldNV1JZWlVjNVZrMXJXa2haYTJoUFZqRmFSbGRzVmxwaE1sRXdXbFphWVZkSFVrWlBWMmhUVFVoQ1dGZFVRbUZoTVZsM1RWaFdVbUV5YUZoVVYzQkhWMFpyZVUxVk9WUlNNRnBKVlcxNFQySkhSWGhqUmtwWFRXNVNXRlp0TVZkU01WSnpXa1pvYVdKRmNGVlhWM1JXVFZaUmVGVnNhRTVXZWxaUFdXdGFkMVpzVlhoVmEyUm9ZWHBHZVZSc1VrTldNVWw2Vlcxb1YySkhVa3haTW5oUFl6RlNjMXBIYUdoTk1FcFdWbXhvZDFJeFdYaFhiR1JUWW10d2NsVnFUa05VTVZsM1ZtdDBXRkpzYkRWYVJWcGhWREZaZDFkc2FGWk5WMmh5VmtSR1lWZFdSbk5oUm1ScFZrVmFWVmRVU2pSWlZscFhVMjVTYTFKc1NsUlVWVnAzVXpGYVdFMVVVbWxOYTFwWVZURm9jMkZHU2xkWGJHaFdZbGhvYUZreWVGZGpWa3AwWkVaT2FHVnRlRmxYVjNSaFlUSkdWMU5zV21wU2VteFlWVzB4VTAweGJEWlRiRTVYVFZad1dsbFZXbXRoUjFaMFpVWlNXRll6VW5GVWJGVjNaVWRLU1ZOc1pHbFNWRlpZVjFkMFlXTXdOVmRYYkdoclVrVktXRmxZY0VkVFJsbDVZMFU1V0dKVldubFdNalYzVmpKR2NtTkZhRlppV0UweFZqQmtTMUl4VW5OYVJUVk9ZbGRvVEZadE1UUlpWMFY1VlZob1dGZEhlRlJXTUdSdlZteHNWVkp1WkdwV2JGb3hXVEJvVDFkc1duUmxTSEJYVmpOb2NsWnRlRXRrUjFaSlkwWm9hRTFXYjNwWFYzUnJVekZLY2s1V1ZsTmlSMUpZVkZSS2IxVldXbkZSYlVaVVRWZFNXRlZ0ZUZkVk1rcElZVVpvVlZaRlNreFdWbHBoVmxaT1dXRkdVbWxXYTFreFZsUkdiMlF4YkZkVGJrNVlZbXRLWVZsVVNtOVNSbkJYVjIxR2ExSXdOVWRVTVdSelZHMUdObFpxV2xkaE1sRXdWMVphYTJSR1duVlRiR2hwWVROQ2FGZFhkR0ZrTVZKSFZtNU9XR0pIVWxsVmJGSlhWakZSZUZwSE9WZE5WbkJIVmpKd1YxWXlSbkpoTTJoV1pXdGFhRlZxUm10ak1rWkhWMnhrVTFaWVFtOVdhMXBYV1ZkUmVWWnVUbXBTVjFKWldWaHdjMk5zVm5GUmJVWlVWbTEwTTFkcmFFOWhSbHAwVld0b1ZrMXVRa2hXYWtwSFkyeE9jMVZzWkZOU1ZuQklWMnRTUWsxV1dYbFNhMlJZWWxkb1QxbHRNVzlXTVZsNFdrUlNhRTFyYkRWV1IzUnJZVlpPUjFOdVJtRldNMUpvV1RKNFYyUkZNVlZWYlhoVFlraENTbGRyVmxOUk1rWkdUVlphYWxKdVFtRldiR1J2WTJ4WmQxZHRSbE5oZWxaWFZsZDRZV0ZGTVZsUldHeFlZa1p3VjFSc1dtdFNhelZYV2taYWFWSXhTbGxXYlhSaFdWWktWMWR1UmxSaWJWSlRWRmR6ZUUweFVuTlhiWFJXVFd0d2VsWXllR3RYYkdSSlVXdG9XazFHY0hwV01XUlBVakZ3U0dWSGJGTk5WVzh4Vm0wd2VFNUhVWGhWV0doWVYwZG9WVmxYZEV0WFJsWnhWR3hPYkdKR2NEQlVWbFl3WVcxS1JrNVVSbFpXTTJoWVZtcEJkMlF4VG5OV2JHaG9UV3hGZDFaclVrdFVNVmw0Vlc1V1ZXSlZXbFJVVkVaTFYxWmtXR1ZIT1dsTlYxSjZWako0VjFaR1drWlhiRnBWVm0xUk1GWXdXbHBsVlRWV1drZG9VMVpGU1RGV2JHTjRVakZhVjFkWWNGSmhNbWhYVkZWYWQyVnNXWGRhUm1SVVZtNUNTRmRyVlRGVk1VbDZZVWRvVjJKWVVuRmFWV1JPWlVaV2RWVnNVbWxTYmtKUlZtMTBWMWxXWkVkV2JrNWhVbFJzVUZWdGVIZGxSbFY1WlVVNVYwMUVSbmxXYlhCaFYyMUZlR05GVWxkaGEwWXpXbFZhVDJSRk9WZGFSMnhUWVROQ1RsWXhXbE5UTVZaMFZtdGtWMkpyY0ZsWmExcGhZakZTVmxWc1pHdGlSMUpaV2tWa01HRkZNVVZXYkdoWFRXNVNkbFpIZUV0U01XUnpZa1p3YUUxc1NsVldWM0JIWTIxUmVHRXpjR2hTYldodldsZDBZVk5HV2tobFJ6bFhUVmQ0V0ZZeWVHdFhSbVJJVld4b1dsWkZjRlJWYWtaM1VsWk9jMVJzVG1sV1ZGWkpWbFJLZWsxV1ZYaFhibFpTVjBkb1dGbHJXa3RUUmxweFVteEtiRkpzV2pGV1J6RnpWR3N4ZFdGR1dsaFdNMUpvVlhwR1YxSXhaRmxhUjJoVFZsUldkbFpYTVRSak1EQjRWMWhzYTFKRlNtOVdiWGgzVFVad1ZtRkhPVmROVld3MlZsZDRRMVl4U1hwaFJYUmhVa1ZhY2xsNlNrdFNNVnB5VGxaa1RtSlhhR0ZXYlRFd1ZqRnNWMU51VWxkaVIxSllXVzE0WVZac2JISmhSVTVxVW14d2VWWnRNVWRXUmxwMFZXeG9WMDFxUlhkV2ExVjRWbXMxVm1GR1pFNWhiRnBWVm1wQ2ExTXhXbk5hU0U1b1VqQmFXRlJVU205aU1XUnpWbTFHYUUxV2NGaFdSM2hYVlRKS1dWRnJPVnBoTVZwaFZGWmFZV014Y0VWUmJXaE9WbXh3U1ZacVNuZFpWbGw1VTJ4b2FGSnRhR0ZaYkZKWFVrWlpkMWR1VGs5aVJYQXhWVEl4TkZZeFdrWlhiR2hYVFc1U1YxUldXbFprTURGV1lVZDBiR0V6UWxsV2JYUlhXVmRPVjFWc1pGaGlSVFZaVlcxek1XVnNaSEpYYlRsb1VqQldORmt3V25kV01rcFpWV3hvV2sxdVRqUldha3BMVWpGYWMxUnRiR2xXYTNCYVZteGpkMlF3TlZaT1dFNVhZa2RvY1ZSVVNtOVdNV3haWTBWa1UwMVhkRE5aVldNMVZqQXhSVkpyYUZaTmJsRXdWbXBHUzFKdFRrWmtSMFpYVmpGS1RWWlhjRXRUTVVsNFZtNVNhVkp0VW5CWlZFSjJUVVphZEdWSFJsWk5WVEUxVld4b2ExUXhXbGhWYkZwWFRVZFNkbFp0ZUhOa1IxSkpXa1prVjJKRmNGaFdNblJUVlRGVmVGZHVUbGhpUjJoWldWUktVbVF4V25KYVJYUlRZa1p3ZUZaSGVGZFdNa3BXVFZSU1YyRnJiRFJWZWtaTFkyc3hWbUpIYUZOTlJuQlpWa1pTUzJKdFZuTlhia1pUWWxWYVdGUlhlRXRUUm1SeVlVWk9hRlpyY0ZaV2JYTTFWbTFLU0ZWWWNHRldNMmhoV2xWYWEyUkdTblJoUjJoc1lrWndZVlp0ZUd0T1JteFlVbGhvVkdKSFVsVlpiR1J2VmpGc1dHTjZSbGRTYlhoNFZXMTRkMkV3TVZkalJscFdZbFJHZWxaSGVGcGxSazV6WTBaa1UySklRbFZXYkZKTFVqRlplRlJ1VmxaaVZWcFVWVzE0ZDFZeFdrZFhiWFJXVFd4YWVsZHJXbXRaVmtwWlZXeG9WMkpZVWpOYVZWcFdaVmRXU0U5WGFGTldSVm8yVmxSS05HTXhXWGROV0VaVFZrVkthRlZyVm1GamJGWjBZM3BHVjAxcldrbFpNRnBQVkdzeFJtTkVUbGROVjFFd1dXcEtTMlJHV25WVWJVWlVVbGhDV1ZkV2FIZGpNa2w0WWtoT1dHRXpVbGxWYlRFd1RURlplVTFFVmxkV1ZFWllXV3RTWVZac1dqWldhMUpYWWtad1lWcFhNVWRTYlZaSFkwZDRhRTFZUWxGV01uUlRVakZWZVZWc1pGVmliRXB4Vld4U1YxWkdVbFZUYlRsVVRWWndNRnBGWkhkaVJrcDBaVVpvV0dFeWFFeFdSM2hyVWpGT2RFOVdXbWxpYTBvMlZqRmFZVlV4WkVaT1ZtaHFVbFJXV0ZsdGRFdFNNVnBYV2toa1VrMVdWalJXTWpWTFlXeEtkVkZzWkZkaGF6VlRWRlZhWVdSSFZraFNhemxwVmxoQ1MxWnRNVFJaVmxKelYyNU9hbEpyV2xoV2JURlNUVVp3U0UxV1pGZE5WVFV4VmtjeGIxVXlTbGhoUm14WFVtMVJNRlY2U2xKbFJuQkhZVWQ0VTJGNlZuaFhWM2hoVWpBMVIxZHJhR3hTTUZwWldXeGFZV1ZzV1hsT1ZUbFlZa1p3UjFSc2FHRldWbHB6WTBab1YwMUdWalJXTUZVMVYwZEdSazVXWkZkTk1rNDBWbTF3UzAxR1ZYaFRXR2hoVWxkU1dWbHRlRXRXTVd4VlZHMDVhRkpzY0RGWk1GWnJWbXhLYzFacVRsZE5ibEYzV1ZkNFlXTnNaSEZSYkhCWFZtNUNUVlpyWTNoVE1WbDRWR3hzYUZKdFVtOVVWbHAzWlZaa1dXTkZkRk5OYkVwSVZsYzFTMWRIU2xobFJsSlhZbGhvTTFaVldtRlhSMUpJWkVVNVUyRjZSVEJXYlRBeFZqSkdjMVJyV2s5V2EwcGhXVlJHZDFSR1ZYaFhiRTVxVFZad2VWUXhaRzlWTWtWNVpIcENWMVpGYjNkWmVrWnJVMFpLZFZOck9WZGlWMmhaVmtaak1XSXhiRmRqUlZaVVlYcHNWRlp0TVZObGJHdDNWbFJHVmsxRVJsZFpNRlozVmpKRmVHTkdhRnBXUlZwTFdsVmFUMk50UmtkVWJXaE9ZbTFvZGxac1kzZE5Wa1Y0V2taa1YySnNTbkpWTUdSVFZERnNjbGRzY0U1aVJsb3dXbFZWTldGRk1YSmpSV1JWVm14S1VGWXlNVVpsUm1SelZXeGtWMDB5YUdoWGJGcGhWakpPZEZWclpGaGlSMUpVVm14b1ExTnNXWGhaTTJoUFVteEdORll5TlU5V2JVcHlZMFphV21KSGFGUldhMXBhWkRGd1NFNVhlRk5pU0VJMVZqRlNUMkl4VVhoVFdHUlhZV3hLVjFSWGNGZFRSbXhYVjJ0MFUySlZOVWxWYlhoWFZqRlplRk5xU2xkaVdGSm9XVEl4VW1WSFRrWlhiWEJUVFRKb1dWWnRkR0ZaVms1elYydFdVMkpIVWs5VmJYaExaVlpTVjFadFJtaFNWRUkxV1ZWYWMxWXdNVWhoUlZKWFVsWndlbGt4V2s5amF6bFhWR3MxYUdWc1drcFdNVnBYWVRBMVIxWllaRTVUUjJoVldXeFdZVmRHVm5SbFJYUlRVbXhaTWxVeWRIZGlSa2wzVGxWa1YwMXFSa2hXVkVwWFl6RmtkVnBHYUZkaVJYQlJWMWR3UW1WR1NYaGFTRlpXWVhwc1dGbHNXa3RYYkdSWFlVaGtVMDFzV2toWmEyaExZVVpLV1ZWc2JGWmhhMG96VldwR1UyTXlSa2RhUm1ob1pXdGFTVlpxUmxOUk1WcDBVbGhvYWxKWGFHaFZiWGgzVFRGV2NWTnJPVk5OYTFwSVZrY3hiMVJyTVVaWFZFWlhZbFJGZDFacVNrZGtSbHB5V2tab1dGSXphRmhYVjNSclZUSkplRlZzVmxSaGJFcFhWbTE0ZDJWR1draGxSVGxvVW10d2Vsa3dXbUZXYXpGeFVsaGtXbFpGUmpSV2JYTjRWbFpXYzFkdGJGZFNiSEIyVm1wR1lWWnRWa2RVYTJoWFlURndXRmxyV25kWFJteHpWMnQwYkZadFVsaFhWRTV2VmtVeFYySkVVbGhoTVhCNlYxWmFTbVF4WkhOVmJIQnBVakZLTWxacldtRmhNazV6V2toT1lWSXpRazlXYkZKWFUwWmFSMWRzWkZwV01GWTBWVEo0YTFaSFNuSlRiR1JhVmtWd1UxcFhlSGRYUjFaSVpFZHdUbFl4U1hkV1JFWmhXVlpTZEZOclpHcFNiWGhaVm1wT1UyRkdiSEZTYkVwc1VtNUNSMWxyV2t0aFZsbDVZVWRvV0ZZelVtaFZla3BYWXpGV2RWUnNhR2xoZWxaNFZrWmFZVk15VmxkV1dHeHNVbFUxV0ZSV1duTk9iR3hXVm01T1YwMVZjRWRXTWpWaFZqRktSbU5GYUZkaVdFNDBWakZhVDJNeVJraGlSMmhPVFVWd2FGWnRlR3ROUmxsNVZXNUtUbFpYVW05VVZFcFRWMVpzZEdONlJtcGlSbkF3V1ROd1IxUnNTblJsUm1SWVlUSm9jbGxWV2xwa01rNUhZMFprVjAwd1NrMVdiVEI0VmpKT2MxcElTbWhTTUZwVVZXeGFkbVZzWkZsalJYUlVZbFphTUZVeWRHdFpWa2w1WVVjNVZWWlhhRVJaVlZwaFkyeGtkR1JGT1ZOaVdHaFlWa2Q0WVdFeVJrWk5TR3hzVWxSc1YxbFVSbmRoUm13MlVtMUdhMUpVUmxsYVJWVTFWakpLUm1OR2JGaFdiRnAyV1ZSR2EyTXhaRmxoUm1ocFVqRktXRmRYZEdGVE1XUkhWMjVLV0dKVldsaFVWM1JhVFd4V2RFMVZaRlpOVlhCYVZWZDRjMVl5Um5KWGJXaFhZV3R3VkZZd1drOWpiSEJJWTBaT2FWWnJjRFpXTVdRd1dWZE9kRlpzWkZoaWExcFZWakJrVTJOc1VsWlZiR1JZVm14d01GcFZZelZXTVVsM1kwVm9WazF1YUVSV2FrcExaRlpHYzJGR2NGZFdia0pvVjJ0U1IyRXlUblJWYTJocFVtMVNjRlp0ZEhaTmJGbDRWMnhrVjAxRVJrbFZNblJyVjBaa1NGVnVRbFpoTVhBelZtcEdVMWRIVGtaYVIyaFRZbGhvV1ZacVNYaE5SbFY1VW1wYVYySklRbGhaYkdodlZFWmFTRTFWZEd0U2JFcGFXVlZhYjFZeVZuSldXR1JZWVRGS1NGbFVSbHBsUm1SMVZteGFhVkl5YUhkV2JYaGhaREZrYzFkc2FHeFNlbXhUV1Zod1IxZEdaSEpYYlRsb1lrVndWbGxyV2xkV1ZscDBZVVZTVlZaV2NGZGFWbVJYVTFaU2MxcEdaRTVUUlVwWVZtMHdlR1ZyTVZkYVNGSlVZa2Q0VjFsWGN6RlpWbkJZWkVkR2JHSkdTakJhVlZwUFlXc3hWMU51YkZWTlZuQnlWa2Q0UzFJeFpISmtSbVJwVmtWVmQxZFdVa3RTYlZaSFYyNU9ZVkp0VWxsVmFrWkxWbXhrV0UxVVFscFdiVkpZVm0wMVMxWXlTblJWYkdSV1lsUkZNRnBWV2xka1JUVldUMVpvVTJKSVFqVldSM2hUVVRGWmQwMVlSbE5oYXpWWVZtcE9iMk5zVm5SbFJUbHFWbXhLZWxsVldtdGlSMFYzWVROa1YwMVhhRE5WVnpGWFVqRk9XV0ZIYkU1Tk1FcDRWbGN4TUdReVNYaGlTRXBZWW0xU2MxWnRlSGRXYkZaWVpVZDBhRTFFUm5sWmExSlRWMjFGZVdGR1VsZFNSVnBvVm14a1MxTldSbk5hUjJob1RVaEJNbFpyWTNoT1JscDBWbXhhVDFadFVsWlphMXBoVmtac1ZWSnNjRTVXYlZKNVZtMTRhMVF4U25KT1dIQmFZV3MxTTFaWE1VdGphelZZWVVaYWFXSnJTa2xXVkVKaFl6QTFjMUp1UmxKaVJrcFVXV3RXZG1WR1duRlRXR2hxVFZkU1NGVXllR0ZoYkVwR1RsWnNWMkZyTlZSWk1uaGhaRVV4Vm1OSGVGTk5TRUpMVm14a05GUXlSbGhUYmtwVVlsUnNXRmxzYUZOaFJtdDVUVlpLYkZKc1dubFpWVlV4VmpGa1JsTnNRbGhXYldnelZtcEdUMVl4WkhOaFJUVlhVbXR3V2xkV2FIZFNNbFpIWWtoS2FGSllVbGxWYWtKM1VqRlNjMkZIUmxoaVZWWTFWbGQwTkZsV1NsZGpSbEpoVW14d2NscEZXa3RqTVZKeVRsWmthV0V3YTNoV2JYaHZaREZKZUZWWVpFNVRSMmh3VkZSS1UyTkdWWGRXYlVacVRWWldNMWxWVms5aGJVcEhWbXBPVjJKVVZuSlpWRUY0VjBkV1JWRnNWbGRpVmtsNlZtdFdWbVZHVGtoV2EyeGhVakJhVkZWc2FFTmxWbHBaWTBWS2JGSXdNVFJYYTFwWFZXMUtTR0ZJUWxaaGExcE1WbFZhYTFkRk1WVlJhelZUWWtoQ1NsWlhNWGRaVmxKelUxaHNiRkpXV21GWmExcDNXVlp3VjFkdGRGZE5XRUpHVmtjeGMxUnNXWHBWVkVaWFVrVmFkbFpVU2tkak1VNVpZa2Q0VkZORlNscFhWM1JXVFZkU2MySkdaRmhpYXpWWlZtMTRTMDFHY0ZaV1ZGWm9VakJ3UjFZeGFHOVdNREZZVldwT1YwMXVUalJWYWtwUFVtMUdSMXBIYkZoU1ZYQXpWbXRhYTA1R1RYbFVXR2hWVjBkU2FGVnRNVk5qYkZwMFRWUkNUMVpzUmpSWGExSkRWMnhhYzJKRVVsWmlWRlp5Vm14YVMxWnJOVlpVYkhCWFlraENSVlpVUm1GVk1rNVhVbTVTYWxJeWVGaFVWRXByVGtaYWNWTlVSbXRoZWtaSlZXMTRZV0pHU2xkVGJFNVhZbTVDV0ZsVldscGtNWEJJVDFkd1RsWXhTbUZYVjNSclpESkdjMU5zYkZaaVJUVlhWVzE0UjAweGJGZFdhemxyVW14d2VGVXllSGRXTURCNVZXcEtWMDFXU2t0VWJHUlRVMFpTY21GSGJGUlNWRlp2Vm14U1MySXlUa2RhUm1Sb1VsUnNjRlZzVWxkbFJscFhZVVprV0dKVlducFpWRTVyVjBkRmVWVnNhRnBXZWtaTFdsWmFWMlJIVmtabFJrNU9WbTA1TkZacVJsTlRhelZZVWxob2FsSnRhRmRXTUZaTFZHeFdWVkZyWkdwU2JGcEhXVlZWTlZSc1NYZE9WRUphWVRKb1dGZFdaRmRqVmxaMVVXeFdVMVpVVmtSWFZ6RTBaREZrV0ZKcmFHeFNia0p6Vm1wQk1VMHhWalpTYTFwUVZtdEtWVlV4VmpCWlZtUkhZMGM1V21Fd05YWlpWekZLWlZVeFdWcEhhRmROTW1oNlZYcENhMU15UmtoVVdHeFhWa1Z3VUZWWWNGZGpSbEowWTBaT2FFMVlRbGxXUnpWaFdWWkplRlp1V2xoaVIwMTRXVmN4U21WV1ZuUmxSMFpTVFc1U05sVXhWazlUYXpsSVZGaHdWbUp0ZUc5V2JuQlhaRlpXU0dKRmNHcE5SM2hGVjJ0a05HSkdTWGhYYmtaVVltMTRlVmt3VGtwVE1YQlpWMjFvYVZFeWFIRlpha2w0WkRKR1dHVkhlRXhTTUhCdldYcEtWazFyTlVST1YyeFBZV3hLY2xkc1pFOWtiSEJJVmxjNVlWWjZWbkZaYWtwVFlrWndSR0V6VGtwUk1HczBXWHBPVTJWWFJsaE9WelZSWVZWc2VsTlZUbXRpUjFaSVZtMXdTMlZYZEhkSlozQnNaRzFHYzB0SFRuWmlXRUp3WWtkVmIxbHRSbnBhVkZrd1RHMUpNazVIVW14Wk1qbHJXbE5vZGxRd09IZGlNamwyVkRBNGNFeERRV2xRU0U0d1kyMXNkVnA2TkdsTVEwRnVXbGhvYkZsNVkzQkxVVDA5SWdwbGRtRnNLR052YlhCcGJHVW9ZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaHZUMDh3YjI5dlQwOHBMQ0FpUEhOMGNtbHVaejRpTENBblpYaGxZeWNwS1E9PSIKZXZhbChjb21waWxlKGJhc2U2NC5iNjRkZWNvZGUob09PMG9vb09PKSwgIjxzdHJpbmc+IiwgJ2V4ZWMnKSk="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))