import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVTFoc1FtUkZkSEJOUjJSYVRXcHNjbGxXWXpGaWF6bHdVV3BHYTFJeGJEQlVNRTVDWkVWMGNFMUZkRXBsVlZKRVkxWk9RbVZWTVVWU1ZFWktVbFZhZFZsV1pEUmlSV3hHVTJwR2FrMXRlREZYYkdoUFpXdHNSbHBJYkdsTk1Wb3pVMVZTTkdJeVVrbFZibVJRWVZSb01scEVUbXROTUhoMFVtMDFhRll6YUhOWFZ6RnFaRlpyZVU5WVVsRmFNamx4VTFVeFRHTkZiRVZUV0dST1ZrWldibFZXWkRSaVIwMTZWRzVDYVdWVlNrbFhiR2hMWVVacmVWWlhaRkZTTUZwNlYyeG9UMk5IVFhsUFNGWmhUV3hhTlZkV1pFOWlSa1pJVW0wMWFGWXphSE5YVnpGcVpGWnJlVTlZVWxGYU1qbHhVMVV4VEdORmJFVlRXR1JPVmtac2JsVnFUa3ROVjA1SVQwZGtVMVpyTlZGVldHeERVMjFLZEZwSGVHbGlWM2h6V1ROT1VHUkdiRlJSYlhSaFZUQktWVmRzYUV0TmJVWllWRzVDYVUwd01YcFRWVnBPWkZaU1JFNVdXazFoVlVZd1UxVldkMkZIUmxsVGJscEtVbGhvZWxscVRrTmpSMDR6WWpKd1NsSlZOVEpaTUdoelpWZEdXRnBIT1d0Uk1FWTFWRlZTUmsxcmJFWmxSMmhxVFVob2IxZFhOVTVhTVU1WVRsZHdUVm95T1hGVFZWWTBZMFpyZVZadVZtcE5iRlp1VlZaV2ExVldVa1JOU0hCTllXdEdibGxxVGtwYU1rcElVbXBDWVZkRmJHNVRNR1J2VFVkU1NWRlVXazFsVkd0NldrUk9hbVJXYjNsT1ZFWk5ZbFJzTlZkdWF6VmpNa1pZVkcxNGFXSnJOWE5aTTJzMVlVWnZlbEZ1VGsxaVYyZDNXV3hrTTJORmVHNWlNSFJvVm5wR00xbHFUa3ROUld4SVQxaHdSR0pYZURCWk1HTTFaVmRTUkZGdVVtbE5helY1VVRKa2QySlhUblJQV0ZKS1VqRktiMXBGWkZkTlIwWllUVmQ0U2xJeWVEQlpNR00xWlZkU1JGRnRkRnBYUmtweldrVmtjMlJHY0ZKalJ6RnFZbFJzTUZOVlpFOWtiVXAxVlcxNGJGTkdTbnBaVm1SS1dqSkdXRTFZWkdsTk1HOTNVMVZrVDJSdFNuVlZiWGhzVTBaS01GZFdZekZoUm05NVZtNXNSRm96UW5SWk1qQTFaRVZzU0U5WVpHRldlbFp6V1RJMVFtUlhVa2hXYm5CclUwVXhibGxXWTNoa01rbDZVMnBDU2xJd05USlpiR040WkcxS2JtTkhNV3BpVkd3d1UxVmpOV1F4Y0ZoT1YzaHFZbXRHYmxsV1kzaGtNa2w2VTJwQ1NsSXhXVEJYVkVwWFpESlNTR0pJV21saWF6RjZVMVZvVTJSdFNYbGxTSEJFV2pOQmQxa3lOWEpPYTA1d1VWZGtTbEV3U25kWmJHaERaRzFPZFZWWFpHcFRSM2cyVjIwMVUyUXdUblJXYWxKYVRXeGFNMXBGVGtOVGJVcFpVVzVhYW1Kc1NrZFpNalZMWkcxT2NXSXdkRXBSTUVadVUxVm9RMkZIVFhwVVZYUkVXak5DTUZscVNsTmlSMHBFVVZSc1NsRXlVakpaTUdSWFpGWndXVk51WkUxaVZWcHlWMnRqTldSWFRqVk9WMmhyVjBaS01sZEVTa3RoUm10NVpFUkdhbEY2VmpCWmFrcFRZa2RLU1ZSWVZtRlNNSEJ0VjFjeFIyRnRSWHBXYm1STFpESTVURkV5TVU5ak1XeFpWRzV3U2xKc1NuTlplazVUVWtkSmVVNVlWbUZXTURSM1dWWmpOV1JXU2xsaFIzQmhWMFZKZDFsV1l6VmtWWFJKVVdwV2FrMXNiM2RaTUUweFVrZEplVTVZVm1GV01EUjNXVlpqTldSV1NsbGhSM0JoVjBWSmQxbFdZelZrVlhSVllqQjBTbEV3Um01VFZXUlRZa1p3Y0ZGdFdsbE5iWGd4V1Zab1UxcHNhRFZoU0hCaFZqTm9kRk14VW5aVE1HeEVVVmRrU2xFd1JtNVRWVTVEWlcxU1dWRnRlR3BoVjJoV1YyeG9UMDFHUlhsUFdGWnBZbFphY1ZwRlpITmtiVXB5Vm1wU1drMXNXak5hUldSelpHMUtjR1F5WkdwTmJGcDZWMjFzY21SV1ozaFBXRUpwWWxkM2QxZEVSVFJpTUc5NlZXMTRhazB4Um5WVVJVNUNZbTFTU0ZadWNHdFJNazUzVVRKa2RsTXhhM2xsUjJocVRUQXhibFpyWkZkbGJWSkdWVzFzVW1KVlduRlpWRTVYWkRCMFNGUnVXbWxXZWtZeVdXMXJNVlpYVG5SU2JsWnFUV3RhY1ZwRlpITmtiVXB5Vkcxb2FrMXNWbmRVTW1SMlV6QnNSRkZYWkVwU01VcHpWMjFzUTJWc2NGbFZiRnBxVVRKb05sZHNaRFJpVlhSVllqQjBTbEV3Um01VFZVNUNXakJzUkZGdWNHdFhSVXB6V1RKc2IxWldjRmxVYWtKVFVqQndSRmRXWkU5amJWSlpVVmhPU2xORk5YTlphMlJhWTBWNGRWUnRlR3RTYkZvelV6Qk9jbE13YkVSUlYyUktVVEJHYmxOVlRrTmxiSEJZWlVjeFRXRjZSakpYYTJSWFl6QnNSVTFIWkdwTmJGcDZWMjFyTVdKSFNuVlhiVXBLWWxaS2NGUkhNVXRoUm10NVpFUkdhbEV3Y0d0Uk1tUjJXakJzUkZGWFpGSlNNRFV5V1cwMVUySkhWa2xWYmxKYVZucFdiMWRxU2xkbFZVNXdVVmRrU2xFd1NuSlhiR1JhV2pKS1dFOVhjR2hOVkd4dldYcE9UMkpIVWtsVVZ6bHFUV3hhZWxkdGJISk9hMDV3VVZka1NsRXdSbTVUVlU1Q1dqQnNjRk5YYkVwU1YzZDNVMVZvUTJWWFNYcFhia0poVWpGYU5sTlZZM2hrYkd0NVpFZDRZVkV3U25GWmFrNUxZa1ZzU0ZKdWNHcE5iRmwzV1ROc1FtRlZiSEJUVlhSS1VUQkdibE5WVGtKYU1HeEVVVzV3WVZZemFIUlVSelZEWVVkU1NHRkhXbWhpVkd4M1dXMTNOVTFzYkZoa01tUlJWVEJHZFZSRVRsTmlNa1paVkZoYWFGZEZNVEpYVmswMVpERnNXVlZ0T1V0a01qbHVVMVZPUWxvd2JFUlJWMlJLVTBkU2QxcEZaRzVhTWtwWVQxZHdhR1ZVVmpOWFZtaFRZVzFHUkZveU5VdFhSVEV4VjJ0a1NtSnJiRVJXVjJScFZucHNjbGRzWkROalJXeElVbTV3U2xJeFNuQlVNbVIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmFrNW9WMFpLZGxOVlkzaGtiR3Q1WXpOV2FsSXdXWGRYVkVwdVlqQndOVlp1Y0UxaVZHdzJVMjVzUW1KRmJFaE5XRnBoVWpGYWVsTXhUa05oUjA0MVVXNWFhbVZ0T1V4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1UwZFNkMXBGWkc1YU1rcFlUMWR3YUdWVVZqTlhWbWhUWVcxR1JGb3lOVXRYUlRFeFdYcEtiMDFYVWtoaVNFNUxaVlZHYzFOVlkzaGtiSEJJVm01T1RGVXdTbTlaTTJ4RFpXMUdTVlpxUW1oV00yTXlVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakpKZWxSWVZtcFNNRmwzV1ZWTk1XTlhTWGxpU0ZaTlltdHdjMXBGYUZkbFYwcHpUMVJLV2xZelozaFhiRTVDVDFWc1NWUnRlR2xTTVd3eFdUQmtSMDFIUmtkUFdFWnBUVzE0TVZkRVRtRmhSMHBDWWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBkNGQxZHNaRFJoTUd4Sll6QjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HOTVWVzFzUzJWdE9XNVhhMlJLWXpCT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1clpHMU9OVmw2V2twU2VtdzJWRVZHZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVoxV1hwS2IwMVhVa2hpU0U1TFpXMDVibGw2U205TlYxSklZa2hPVFZGWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlozZFRNRTV3VVZka1NsRXdTa0pYVkVrMVpGZFNTRlpxVW10U2VrWnZXVzB4UjJKc2NGbFRWWFJLVVRCR2JsTlZaRk5pUm5Cd1VXNWtXbGRHU25GWlZWazFZbGRHV0dWRVFtRlhSWEJ6VjJ0Wk5XVnNjSFZWYm1STVUwVTFjMWxyWkZwak1HeEpVMjE0V2sxcWJEVlhhMDR6V2pKS1dFOVhjR2hOTURBMVZrY3dOV1JXY0ZSaGVscEVZVlZHYmxOVlRrSmFNR3hFVVZka1NtRlZiSEJUVlZaelRVVnNTVkZ0YUd0U01EVjJWMnhvVGxveGNIUmlTRTVyVWpGYU5WZHNaRkphTWs1MFZtMXdhVTB3Y0hKVFZXUkhaRlp3UkZGdVpHcGlWR3Q1V1Zaa1UySkhUalZSYldoS1VucEdNbGRVU25wYU1HeHdVMWRzUkdGVlJtNVRWVTVDV2pCc1JGRlhaR2hXTVd4dVdXeGpOV0Z0UlhwVVYyUm9WMFV4YmxaSE1EVmtWbkJWWWpCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVXV3hqTldGdFJYcFVWMlJSVlRCS2FWTnFUazlpVjFKSlVXMWFXazFxYkRGWmJURlhZVzFTU0dKSVdtbGhWMUpyVVRKc1Fsb3diRVJSVjJSS1VUQkdibGxzWXpWaGJVVjZWRmRrVVZVd1NUTlpiRkoyV2pKS1dFOVhjR2hsVkZaR1ZXeFdZVkZzV2xabFJsWktVakZ3TWxreWJFTmtSV3hJWWtoV1NsSjZSakpYVkVvd1pXMWFVbUl5WkVwUk1FWnVVMVZPUWxvd2JFbGFTRUpyVWpKa2JsbHNZelZoYlVZMVRsaGtXbGRHU25GWlZVMHhaR3hzZEdOSGVGcE5NVVoyV1RJeFYyRnRTWHBUYlhSTlVUQkdkVmR0TVhOak1sSklWbTVzWVZZeFJuVlRNVTVEWVVkT05WRnRNV2hXTTJkM1YyeG9TMkpHY0VWaU1IUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVhUkVwelRVZEdSRkZ1VW1sTmF6VjVWRWMxUTJGSFVraFViVGxOWWxSc2NGbFhNVmRoYlZKRVlVaHNZVll3TlRKWk1qRlNZekJzUkZwSGJGcFdNRFY1V2tab1ExcHRTa2hQVnpWTFpWZHpNbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVsNldWWm9VMkl3YkVoTldGcGFUVzVPTVZrd1pFZE5SbXQ1V2pOV2FWZEdXbnBhUldSelpESktTRlpYT1dwaVZscHhXV3BPUzJFd2VFUlJXRVpNWWxSR01sZFVTakJsYTNSVllqQjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQktkRmxXWkRSTlJuQlpVMjE0WVZGNlZqWlpWbVJUWWtabmVWWnRNV0ZpVmxweFdrVk9RazlWYkVka1IxSk5VVEJLYVZreU1WZGhiVWw2VTIxMFdWVlhPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZhSE5qUm5CWVpVZDBTbEl4Y0hkWmEyaFRZa2RPZEZadGRFUmFNamx1VTFWT1Fsb3hjRWhXYlRGS1VucFdjMXBFUlRWbFZuQllWRzVhYW1KV1JuWlpla3BYWXpGd2NHUXlaR2xXTVZsM1dWVmpOV0V4UWxSYVNIQmhZbXhLTTFOdWJISk9hMDV3VVZka1NsRXdSbTVUVlU1Q1dqSlNkRkp1VG1wbFZVVTFVMVZvZWxNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTMDFxVm05WmJHUldZbXM1Y0ZGcVJrdE5WbEpGWTFjMVQwMUZiRWhUYldoYVRXNVJlRmt3VG1wak1FNXdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTWxJd1YyeG9VMkl5U1hsVlZ6VlFZVlZLTUZkc2FGTmlNa2w1VlZoT1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkcxVlZ6bHVVMVZPUWxvd2JFUlJWMlJLVWpKNGRGTlZZM2hpUjFKSVlVaGFZVkV3UlRWVlJrNUNZbTFOZVZkcVFtcFJNazB5VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEpWMjFvYVZORk1URmFSbWhEWVRGc1dWVnRlRXhUU0U1TVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXlValpYYlRWVFpERm5lV0ZJV21wTk1VWjFWREpzUW1KdFVraFdibkJyVW1wc2RsbHFUazlOUlhBMVpEQjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJhU0hCaFlteEtNMWRFVGtOa2JVNTFWVmMxVUdGVlJuVlVWM0JLWlZWd05XUXdkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFV2tod1lXSnNTak5YUkU1WFpXeHdXVk5YTlZCaFZVWjFXa1ZvVjJWc2NGbFRWelZOVVZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFdE5NRFYwV2tWb1ExcHRUa2hTYm5CcVRUSlNNbGt5TVZKaWF6bHdVVmMxYWxJd1dqWlplazVyWkcxT2RGVlhOVTFSVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1MwMXNjREpaYTJSVFlrZE9jRmw2V2twUk1rNHlWMjB3TldNeGNFaFdibXhOWlZkT2VsRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU1UxSVFrUmhWVVp1VTFWT1Fsb3diRVJSVjJScVRXeGFlbGR0YXpGTmJHeFlaVWh3U2xKRVFtNWFSekZIWXpKT00ySXlaRXBSTUVadVUxVk9RbG93YkVsVGJYaHJVMFphTlZsdGJFTmxiSEJZWlVjeFRXRjZSakpYYTJSWFl6QjRkRlJ1YkdGV01GbDNWMnhPYjAxc2JGaGxTSEJNVlZjNVRGTlZUa0phTUd4SVZXMTRZV0ZWU1hkWGJHaFBUVVpuZVZSdVdtbFhSVWw0V2tWa1YxcHRTblJTYmxKaFZtcHNObGR0TlZOa01IUkpWRzE0YVZJeGJIZFVNbVIyV2pCc1JGRlhaRXBSTUVadVUxVk9TbUZWYkhCUmEzQnJVVEJLTmxsVll6Vk5WMHBJVlZka1drMHdjSE5YVm1oVFlrVnNTVkZ1YkdsTk1FcHpXVEpzUTFaR1NuTlZiRVpLVW14YVZGVXhUa0poVld4d1UxVjBTbEV3Um01VFZVNUNXakJzUkZGdWJHRldNRFZ0V1Zaa1Vsb3hRbFJSYm5CaFZqTm9kRlJITURGaVIxRjRUMWhzWVZZd05USlpNakZTWWpCMFVtSXlaRXBSTUVadVUxVk9RbG93YkVsVWJYaHBVakZzTVZkV2FFOWxiSEJaVTJwQ1UxZEZXWGhYVm1RellqQk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRKU05sZHROVk5rTURsd1QwaGFTMVV5WjNoWmVrcFhaVlYwV1ZSclJrdFZNbWgyV1dwT1QwMUZkRmxVVkZwTFZUSm9NMWxxVGt0TlJYUlpWRmQ0VEZJeGNESlphMlJUWWtkT2NHSkljRXRsVlVaelUxVm9lbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1clRWZE5lVlp1YkV0bGJUbHVXWHBLVjJNeGNIQk9WRXBhVmpOb05sWXpiR3RsYkhCMVZXNWtXVTB4V2paWGJHaEtZbXhvVkdRd2RFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVXa2M1YVUwd05IZFRibkIyV2pKTmVWWnVUbUZoVkZWNVYxWmtOR1ZzWkRWYVNIQmhZbXhLTTFkRVNtOWtiVTE2VlZjMVdWVXpaRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRKU00xbHFUa3ROUlhBMllqSmthazFzV25wWGJXc3hUV3hzV0dWSWNGaGxWMUkyVjIwMVUyUXhaM3BSYmxwcVlteEdkVmRHVGpOVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9hMkpYU1hsbFIzUmhWMFZzZFZReWJFTmxiSEJZWlVjeFRXSnNjRzlaYTJoUFdXdHZlVmR1V21sU01VcHpXVEpzYTFwRmVFSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3U1RWVVJVWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYm14aFZqQTFiVmxXWkZKa1YwcDBVbTVTWVZVelpFeFRWVTVDV2pCc1JGRlhaRXBSTUVaM1VUSmtkbG93YkVSUlYyUmhVakZhZEZOVmFGTmlSMDE2VlcxYVdrMXRhSE5YVkVvd1dteHdkRTlZVG1GU01WbzFVekJvVDJKSFNraFhXRUpRV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3YkhCVFYyeERVMjFTUkZGdWNHaFNlbXQ0V1d0a1Vsb3lTblJQVkVKS1VqQmFlbGxyWXpWTk1HeEpVMjE0V2sweFdqVlpla3B6VFd4d1ZGRnRiRnBXTURWNVdrWm9RMlZyYkVSVFYyeEtXakk1YmxOVlRrSmFNR3hFVVZka1NsTkZjSE5YVkVVMVkwWndSRkZVYkVwVFJUVnpXV3RrV21SWFNuUldhazVaVFRCd2MxZFVTVFZsVm5CRVdqSTFhVko2YkhGWFZtUXpZbXQwVW1JeVpFcFJNRVp1VTFWT1Fsb3diRWxhU0VKclVqSmtibGw2U2xkak1YQndUbGRvYWswd05YTlpNalZUVlRGc1dHSkljR0ZYUlRGMlYyeG9iMkZzY0ZsUmFrSm9WbnBzTVZremF6RldNV3hZWlVoQ1lWSXdXWGRaVm1NMVpGWktXVk51YkdsTk1HeDNWREprZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXNXNZVll3TlcxWlZtUlNaRmRSZWxOdVFtdFNNVloyV2xoa2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRha3BoWkcxS1NGVnRlR3BoVjAweVUxVk9hbUpIVGpWUFYyaHBZbFJyZDFsVlpGZGxWWGQ2VVcxb2ExSXlaSFZUVlU1V1dqSlNTRTlZV21sVFJURXhWMVJKTldSV2NIUmlSelZOWWxad2QxbHJaRmRsYlZKSVQxaHNZVlV5WkV4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtObGJIQllaVWN4VFdKV1dqRmFSMnN4WVcxT2NFNVhkRnBpVkZadldXeGtWbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1eVl6Qk9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBSQ2QxRXlaSFphTUd4RVVWZGtVbEo2UmpKWFZFcDZaRmRPU0ZKcVFscE5iV1IyVTI1c1YyVnJlSE5QUnpWS1VURldibGxzWXpWaE1YQllaRE5DUkdGVlJtNVRWVTVEWVRGd1dGZFhaR3RTTVZvMldrVlpOV0ZHYTNwVmJrSnBUV3BXYlZsNlNtRk5SMDVIVDFSQ1lWZEZOSGRYUkVwUFpHMUtkRTVYZUZwTk1VcDNXV3BKTVZwdFRYcFdiWEJhVFd4YU5sa3piRzlsYkhCWVpVY3hUVkV3U20xVE1WSjJVekJzUkZGWFpFcFJNRVp1VTFWT1FtRlZiSEJUVjJSVVYwWkdibGw2U205a2JWSllaVWQwU2xORmNHOVpWbWhQWWtWc1NGUnVXbWxpVkZaelYxUk9VMk5IU1hsT1IyUnFUVEZhY1ZkVVNsZGlSbkJJVm0xMFNsTkhVbTlaTWpBeFkwZEtkRmt5WkVwaFZXeHdVVEpzUWxvd2JFUlJWMlJLVVRCR2Jsa3lNVmRoYkdkNVlrZDBTbEpFUW01WmVrcFhZekZ3Y0U1WVZtRlhSMUp0V1RJeFYyRnRTWHBUYlhSTVVUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1NYcFpWbWhUWWpCc1NFMVlXbHBOYms0eFdUQmtSMDFHYTNsYU0xWnBUV3R3ZUZkc1pFOU5SWFJKVTIxNFdrMVViSGRYYTA0eldqQnZlbFJ0TVd0VFJVcHRWMVJKTldSWFNuUldiWEJyVWpKNE1sbHRiR3BqUlRsdVlqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRWw2V1Zab1UySXdiRWxVYlhocFVqRnNNVmRXYUU5bGJIQlpVMnBDVm1KVlduZFpla3BYWld0MFNGWnFVbHBOYkZveldrVmtjMlJ0U25WVVdGWlhUV3RhTlZsdE1YTmtWbkExWVhwYVJHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJibXhoVmpBMWJWbFdaRkprVm14WVZHcENhRlo2YkRGWFJFNVBZbGRTU1ZGdFdtdFNNVm8yV2tWWk5XRnRTWGxPV0ZaaFZqQTBkMWxXWXpWa1ZYUkVZVEIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVYwaHJNV0ZIVFhwVWJYaHFZbXhLYlZkVVNrZGpNa3BJVm0xMFdVMXFiREZYVkVwWFdtMVJlV0pFUW1oUk1tUndWVlJKTldSWFNuUldiWEJyVWpKNE1sbHRiRU5XVm5CWlZHcENTbEpyTkhoWFZFcFBZa1p3V0ZWdGVHRlJNRlp3VXpGR2RsTXdiRVJSVjJSS1VsVktNRmxxU2s5amEzaDFVVzFvYTFJd05YWlRNRTVxWWtkT05VNVhXa3RsVlVaelUxVmplR1JzY0VoV2JrNU1WVmM1YmxOVlRrSmFNWEJJVm0weFNsTkdTbk5aZWs1VFdteHNXRlJxUW1oV2Vtd3hWMFJPVDJKWFVrbFJiVnByVWpGYU5scEZXVFZoYlVsNVRsaFdZVll3TkhkWlZtTTFaRlpuZVZkdGFHaFdNMlIyV1hwS1YyTXhjSEJrTW1SWlpWZHpNbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWMnhLWVZWc1JtSkVRa3BUUlRWMldXcE9WMk14Y0VSUmJteGFWako0Tmxkc1RrTmhiVWw1VGxoV1lWWXdOSGRaVm1NMVpGVnNTRmR0YUdoV00yUnVXa1JLUjJWWFNuUmlTRlpoWlZWR2NGTlhiRXBUTUd4RVVWZGtTbEV3Um01VFZVNURaVlp3V0ZSdFdtaFdNVVp1VlVaT1EyVnNjRmhsUnpGTllsUldjMXBFUlRWbFZuQllWRzVhYW1KV1JuWlRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVm9hMk5IVWtoYU1tUnBWbnBzY1ZsWWF6RmtNV3haVlcxd2FGRjZWakpYVnpGM1lrWnJlbFZYT1dwaVZscHhWMFJLYzJFd2VFUlJWelZxVFd4dmQxa3dXVFZoYlVsNVRsaFdZVll3TkhkWlZtTTFaRlZ3TldFeVpGcFhSVEZ1VjFSSk5XUlhTbkZpTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVhWRWsxWkZkS2NGb3pRazFpUkd4dFYyeGpNVTFHY0ZsVGJWcFpaVlJXTmxsV1pGTmlSbWQ1Vm0weFlXSldXbkZhUlU1Q1QxVnNSMVZ0ZUdwTk1VcEZXV3BKTVdSV2NGaFVha0pvVm5wc01WVnNhRzloYkhCWlVXcENhRlo2YkRGUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWxhU0VKclVqSmtibGw2U2xkak1YQndUbGRvYWswd05YTlpNalZUVlRGc1dHSkljR0ZYUlRGMlYyeG9iMkZzY0ZsUmFrSm9WbnBzTVZremF6RlhSbXhaVTI1V2FGWjZWblZUTVZKMlV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZhRXRpUm10NFQxaENZVkY2Vm05WFZFNVRZMGRKZVU1WFdtcE5iRzkzV1RCWk5VMUdjRmxVYWtKWlRXczFNbGx0TURGaVJtdDZWVzVDYVUxcVVuWlRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJWcE5ZbFZhTmxsNlNsZGxWMUpIVDFkd1dsWXphSHBYYkdSVFdtMUplVTVYY0dGV2FtdDZXVlpvVTJJd2RFUlRhMUpwVFdwV01WZHNaRTlOUjBaWVQxaFdTbEpzU25OWmVrNVNXakZLZEZKdVFtbFNNVnB5VTFaT1NtTkZUbTVpTW1SS1VUQkdibGRyWkZkaVZXeEpWVzE0YWsweFNtMVhWbVJQVFVkR1dFOVlWbGxOYTNCdlYxUktNRTFYVGtkUFdFNXBUV3MxYjFsclRtOWxiSEJZWlVjeFRGWkhPVXhUVlU1Q1dqQnNSRkZYWkVwUk1FWndVMWRzU2xveFRsbFZWMlJxVFcxb01scEdaRFJoTUd4SVUyMW9XazF1VVhoWk1FNURZekpKZVZSdGFHbFJNRXB5VjFab1UyRkdiSFJTYm5CaFZUQkdjRk5YYkVwVE1HeEVVVmRrU2xFd1JtNVRWVTVEWlZad1dGUnRXbWhXTVVadVZVWk9RMlZzY0ZobFJ6Rk5ZbFJXYzFwRVJUVmxWbkJZVkc1YWFtSldSblpUYWtvMFpHeHJlVkp1VGt0bFYzUk1VMVZPUWxvd2JFUlJWMlJLVVRCS2RGbFdaRFJpUjBwMFVtNVNZVlV3UlRWVFZXaExZa1pyZUU5WVFtRlJlbFowV1Zaa05HSkhTblJTYmxKaFZUSm9jbGRXYUZOaVIxSklZa2hTWVZWNlZqRlphazVxWWpCMFZHRXdkRXBSTUVadVUxVk9RbG93YkVSUmJteGhWakExYlZsV1pGSmtWbXhZVkdwQ2FGWjZiREZYUkVwTFlVWnJlV1JFUm1wUk1tUjNVVEpzUWxvd2JFUlJWMlJLVVRCR2JsZHFTbGRrVm5CWlUyMW9hMUl4V25KWFJFcExZVVpyZVdSRVJtcFJNRVUxVTFWYU1HSlZiRWhYYmxwcVlWVktkRk5WWkhOa1ZXeElUMWh3VFdKWWFIZFplazVUWVRKR1dWTlhPV3BpVmxweFYwUktjMkV3ZUhSWGJscHBVakZLYzFreWJISlRNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVlrY3hTbEl4Ykc1VlIyOTNXakZ3ZEdKSVRtRldlbFp2V1d4a1YxcEZUbkJSVjJSS1VUQkdibE5WVGtKYU1rMTVWbTVPWVdGVVZtOVplazVQWWtkT2RWVnJXbXBYUmxwdldXdE9ibVZGZUVSUmJrNWhWbnBTZGxkcVNsZGtWbkJaVTIxb2ExSXhXbkpYUkVwTFlVWnJlV1JFUm1wUk1uUjNVVEprZGxvd2JFUlJWMlJoVWpGYWRGTlZhRk5pUjAxNlZXMWFXbFl3TkhkWlZtTTFaRlpuZVZOdGFGcE5ibEY0V1RCWk5XVnNjSFZWYm1SWlRXcEdlVmRyWkhObFYwNDFZVWh3WVZZemFIUlRNVkoyVXpCc1JGRlhaRXBSTUVadVUxVk9RbUZWYkhCVFYyUlVWMFpHYmxsNlNtOWtiVkpZWlVkMFNsSXdOVFZYYkdSSFRVWndWRkZ1YkdGV2VrWXlXa1ZrVmxveGNFaGlTR3hxWlZWR2NGTlhiRXBUTUd4RVVWZGtTbEV3Um01VFZVNURaVlp3V0ZSdFdtaFdNVVp1VlVaT1EyVnNjRmhsUnpGTllsUldjMXBFUlRWbFZuQllWRzVhYW1KV1JuWlRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVm9hMk5IVWtoYU1tUnFUV3hhZWxkdGF6RmtSMGw1Vkc1S1dVMXJXalpaZWtwWFRVZE9OVm96UWxCYU1qbHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05OTWtaWlZXMDVTbE5GTlhOWmEyUmFaRmRPU0ZKcVFscE5iV2h0VjIweGMyTXlVa2hXYm14aFZqRktiVmw2U21GTlIwNUVZVWhzWVZZd05XMVpWbVJTWTBVNWJtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNV3Q1VDFoV2FXRlZSVFZUVldoTFlrWnJlRTlZUW1GUmVsWTJWMjAxVTJReFozbFVibHBwWWxSV2MxZFVUbE5qUjBsNVRrYzVURlY2Vm0xWFJFcFhaRmRTU0ZadWJGbE5WR2gyVXpGR2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVpNakZYWVd4bmVXSkhkRTFpVlZweFdrVmtjMlJ0U25OUFYyeGFWakExZVZwR2FFSmlNSFJTWWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveGEzbFBXRlpwWVZSV01GZFdaREJpUm5CSVlraHNhbVZVVm05WmVrNVBZa2RPZFZWdFdscE5hMXA2V1d0a1YyRXhaM2xQV0ZaYVRXeGFiVnBFU25OTlIwWkVZVWhzWVZZd05XMVpWbVJTWkZad2RFOVlUbUZTTVZvMVV6RkdkbE13YkVSUlYyUktVakZLYzFkdGJFTk5SbkJaVkdwQ1dVMXJXbkZhUldSelpHMUtjMDlYYkZwV01EVjVXa1pvUTFwdFRYbFhha0pxVW1wc01GbFVTbE5qUjA1MVZHMWFXazFxYkRGWmJYYzFZa2RXU0ZSdGVHcFRSa3AzV1dwSk1HSXlUWGxXYms1aFlWZHpNbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWMnhLWVZWc1JtSkVRa3BUUlRWMldXcE9WMk14Y0VSUmJUVnJWakJhTlZkclRrTmlWMDUwVDFoU1NsSlZOVEpaYlRBeFlrWnJlbFZ1UW1sTmFsWkhXbFZrVDJKSFRrbFZia0pwVFdwU2JsbHFTVEJhTWs1MFZtNVNhVTB4U25OVVJ6QjRZMnh3U0dKSWJHcGxWVVp3VTFkc1NsTXdiRVJSVjJSS1VUQkdibE5WVGtObFZuQllWRzFhYUZZeFJtNVZSazVEWld4d1dHVkhNVTFpVkZaeldrUkZOV1ZXY0ZoVWJscHFZbFpHZGxNeFJuWmFNR3hFVVZka1NsRXdSbTVUVldoclkwZFNTRm95WkdwTmJGcDZWMjFyTVdSSFNYbFVia3BaVFd0YU5sbDZTbGROUjA0MVdqTkNVRm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EwMHlSbGxWYlRsS1UwVTFjMWxyWkZwa1YwNUlVbXBDV2sxdGFHMVhiVEZ6WXpKU1NGWnViR0ZXTVVwdFdYcEtZVTFIVGtSaFNHeGhWakExYlZsV1pGSmpSVGx1WWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveGEzbFBXRlpwWVZWRk5WTlZhRXRpUm10NFQxaENZVkY2VmpaWGJUVlRaREZuZVZSdVdtbGlWRlp6VjFST1UyTkhTWGxPUnpsTVZYcFdiVmRFU2xka1YxSklWbTVzV1UxVWFIWlRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxkVVNUVmtWMHB3VGxoU1dsWXpVbk5YYTJSelpWZE9OVTVZY0doV01VcHpWMFJLVjJKV2NIUldiWEJyVVRCRk5WTlZXbE5pUjAxNlZXdFNhVTFxVmpGWGJHUlBUVWRHV0U5WVZsTlhSMmh4VjJ4b1EwMUhSbGhQV0ZaRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnViR0ZXTURWdFdWWmtVbVJXYkZoVWFrSm9WbnBzTVZkRVNrdGhSbXQ1WkVSR2FsRXlaSGRSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2NWTlZWVEZrYTJ4SVZtNXNhbUpVYkRWVFZXaHJZVWRPTlZGdWJGcFdNbmcyVjJ4a1VtTXdiRWxWYlhocVRURkdibGt3WkVkbGJVNHpZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG95VFhsV2JrNWhZVlJXYjFsNlRrOWlSMDUxVld4V2FtSnNXbk5UTUZwVFpWZFNXRlpZUWtSYU1qbHVVMVZPUWxveGNFaFdiVEZLVTBaS2MxbDZUbE5hYkd4WVZHcENhRlo2YkRGWFJFcExZVVpyZVdSRVJtcFNhbXcyVjIwMVUyUXhaM3BUYlhocFZucHJkMWRzV1RWa2JVNUlWbTVXVEZORk5YTlphMlJhWTBVNWJtSXlaRXBSTUVadVUxVk9RbG93YkVSVFYyeEtZVlZLUzFwRlRrTmxiVVpJVDFSR2FWSXhSbTVaYWs1RFlrZEtjRkZ1YkdGV2VrWXlXa1ZrVmxveGNIUmlTRTVoVlRCSmVsUkliRU5rTWs1MFQxaGtZVmRGYkc1WFZtaExZbTFPTlZGWGJFcGhWV3hNVTFWT1Fsb3diRVJSVjJSS1VUQktOVmRzWkU5YWJVWllWVmRrVVZVd1NqWlhiR1EwWWxWNGRFNVhlR3ROVkd3MVYyeGtUMlJ0VG5SVlZ6bE1WVmM1YmxOVlRrSmFNR3hFVVZka1NsTkhVbmRhUldSdVdqSk5lVlp1VG1GaFZGWXdXV3BLVDJOc1ozbFNibkJxVFd4WmQxa3piRzVqUld4SVVtNXdTbEl3V2paWmVrcFhUVWRPTm1Jd2RFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibHBFU25OTlIwWkVVVzV3WVZZemFIUlVSelZEWVVkU1NGUnRPVmxOYkhCM1dXdG9VMkpIVG5SV2JYUlpUVEExZEZwRmFFSmlNazUwVm0xd1dVMXRlSEpUTVZKMlV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZaRTlrYlVwMFRrZGtVVlV3U2pWWGJHUlBXbTFHV0ZWWVZtcE5iRzkzV1RCWk5XRnRTWGxPV0ZaaFZqQTBkMWxXWXpWa1ZYUkVZVE5XV1UxVWJITlpiVFZUWWtkT2MwOVhXa3hSTW5STVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsTkZjSE5YVkVVMVkwWndSRTVYYUZwTk1VcDNXV3BKTVZwc2JIUlNiWEJvVFRGYU0xTXdUbkpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWa1QyUnRTblJPU0ZacFRUQktjMWx0YXpGaFIwMTZWRzE0YW1Kc1NtMVhWRXBIWXpKS1NGWnRkRmxOYW13eFYxUktWMXB0VVhsaVJFSm9VVEprVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJGSFRYcFViWGhyVTBVMWFWTnFTVFZsYTI5NFRVaFdhbEl3V1hkWlZVMHhZMWRKZVdKSVZreFJNblI2VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCdmVscEhiRXRrTWpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1RGVlhPVXhUVlU1Q1dqQnNTRlZ0ZUdGaFZVbDNWMnhvVDAxR1ozbFNiWEJyVWpKNE1sbHRkelZoVm14WVZHNUthMWRGU20xWmVrcGhUVWRPUjA5WWJHRldla1l5V2tWa1YxcHRTWHBSYlhocFlWZG9ObGRzWkRSaVZYUlZZakIwU2xFd1JtNVRWVTVDV2pCc1JGRlhiRXBoVld4dVZURm9VbG95VFhsaFNGcHJWak5vY2xOVll6VmtNWEJZVGtka2FtSldXakJaYWs1VFlrVnNTRmR1UW1sU01WWnVXa2hyTkZveVRrbFRibHBxVWpGYU5WTlZaRWRsVm05NlZGZGtTbUZWYkhCUk1teENXakJzUkZGWFpFcFJNRVp1V1RJeFYyRnNaM2xpUjNSS1VrUkNibGw2U2xkak1YQndUbGhXWVZkSFVtMVpNakZYWVcxSmVsTnRkRXhSTW5STVUxVk9RbG93YkVSUlYyUktVVEJKZWxsV2FGTmlNR3hKVkcxNGFWSXhiREZaYkdNMVlXMUZlRTlYYUdwTk1EVnpXa1ZvVG1Jd2RGUlJiV2hxWlZWS2IxbDZUazlpUjFKSlZGUmFSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWb2EyTkhVa2hhTW1ScVRXeGFlbGR0YXpGa01XeFpWVzF3YUZKcWJIUlpWbVEwVFVad1dWTnRlR0ZTYW13MlYyMDFVMlF3ZEVsVGJYaGFUVlJzZDFkclRuSk9hMDV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJGdFNYbE9XRlpLVWtSQ2Jsa3lNVmRoYkdkNVlrZDBUV0pyTlhSYVJXaERXbXhyZVU5WVZtbGlWbHB4V2tWa2MyUnRTbkJhTTBKTllrUnNiVmRzWXpGTlJuQlpVMjFhV1dWWFpIZFJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJLTlZkc1pFOWFiVVpZVlZoV1dsWXdOSGRaVm1NMVpGWm5lVk50YUZwTmJsRjRXVEJPYm1ORlRuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURZVzFKZVU1WVZrMWlWR3d6VjJ4ak1HUldiRmxVYm5CaFYwVnZkMWRFU2s5aFIwcElaVWQ0WVZKcWJESlpiVEZQWWtabmVscElRbXRTTW1SMlVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqRnNXVlJ1Y0dGWFJrbzJWak5zYTJSdFRqVmFSMUpOWW10S2IxcEZaRzVrVjBaMFQxaENhV0ZYWkhkVVJVWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVXa1JPV21GWFRreFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEowVEZFeWJFSmFNR3hFVVcxMFlWWXhiRzVhUldSWFpXMVNSMDlYYUZwTk1VcDNXV3BKTVZwc2JIUlNiWEJvVFRGYU0xZEVTa2RqTWtwSFQxaHdZVll3V2pWWFZFcHVZakpOZVZadVRtRmhWM015VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5YYkVwaFZXeEdZa1JDU2xORk5YWlphazVYWXpGd1JGRnVjR0ZXTUZvMVYxUktibG94YkZobFNFNUtVMFZ3YzFkVVNUVmxWbkJKVkZka1NtRlZiSEJSTW14Q1dqQnNSRkZYWkVwUk1FWnVXVEl4VjJGc1ozbGlSM1JLVWtSQ2JsbDZTbGRqTVhCd1RsaFdZVmRIVW0xWk1qRlhZVzFKZWxOdGRFeFJNblJNVTFWT1Fsb3diRVJSVjJSS1VUQkplbGxXYUZOaU1HeElUVmhhV2sxdVRqRlpNR1JIVFVacmVWb3pWbWxOYTNCNFYyeGtUMDFGZEVsVGJYaGFUVlJzZDFkclRqTmFNRzk2VkcxNFdsZEZjSEZaVlU1cVkwVTVibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCS05WZHNaRTlhYlVaWVZWaFdXbFl3TkhkWlZtTTFaRlpuZVZOdGFGcE5ibEY0V1RCWk5XRkhTa2hrTWpsTVZWYzVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWlZad1dGUnRXbWhXTVVZeFdYcEtWMkZIVG5SVWJUbE5ZbFZhTmxsNlNsZGxWMUpIVDFkd1dsWXphSHBYYkdSVFdtMUplVTVYY0dGV2FtdDZXVlpvVTJJd2RFZGtSMUpNVlZjNVRGTlZUa0phTUd4SVZXMTRZV0ZWU1hkWGJHaFBUVVpuZVZKdGNHdFNNbmd5V1cxM05XRldiRmhVYmtwclYwVktiVmRXWkRSak1XZDZVMjE0YTFOR1dqVlpiV3h2Wld4d1dHVkhNVXhXUnpsTVUxVk9RbG93YkVSUlYyUktVVEJHY0ZOWGJFcGFNVTVaVlZka2FrMXRhREphUm1RMFlUQnNTVk50ZUd0VFJsbzFXVzFzUTJWV2NGbFVha1pwVTBaR2JsbHFTbHBhTVd4MFVtMXdhRTB4V2pOVFZXTTFaREZ3V1ZOdGFHdFNNbmd5V1cxc1FtRlZiSEJUVlhSS1VUQkdibE5WVGtKYU1HeEVVVzVzWVZZd05XMVpWbVJTV2pGQ1ZGRnVjR0ZXTTJoMFZFY3dNV0pIVVhoUFdHeGhWakExTWxreU1WSmlNSFJTWWpKa1NsRXdSbTVUVlU1Q1dqQnNTVnBJUW10U01tUnVXV3hqTldGdFJqVk9XR1JhVjBaS2NWbFZUVEZrYkd4MFkwZDRXazB4Um5aWk1qRlhZV3huZVdKSGRFMVJNRVoxV1hwS1YyRkhUblJVYlRsTFpWZHpNbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1NWTnRlR3BsVlVVMVUxVm9TMkpHYTNoUFdFSmhVWHBXYjFkVVRsTmpSMGw1VGxkYVdtSlZXbkZaVkU1WFpERm5lVkp1VG1sUk1tUjNVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SlZHMTRhVkl4YkRGWFZtaFBaV3h3V1ZOcVFsTlhSVmw0VjFaa00ySXdUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWlZad1dGUnRXbWhXTVVZeFdYcEtWMkZIVG5SVWJUbE1VVEowTVZkV1pFOU5SMFpZVDFoV1dVMXJjRzlYVkVvd1RWZE9SRm96UWsxUk1FbzFWMnhvVGxNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtURlZYT1V4VFZVNUNXakJzUmxGdVVtbE5helY1VkVjMVEyRkhVa2hVYlRsTVVUSk9jMWt6YXpGa01sWlpWRzB4YTFORlJuVlRWVTVXV2pKS1dFOVhkR0ZXTTJSM1VUSnNRbG93YkVSUmJYUmhWakZzYmxwRlpGZGxiVkpIVDFod1lXSnNTak5YUkVwUFpHMUtkRTVYZUZwTk1VcDNXV3BKTVZwdFJsaE9XRUpyVW1wc00xZFdhRTlsYlZGNVZWYzVhazFzV25wWGJXd3pXakpPU1dKSWNHRmliRW96VXpGU2RsTXdiRVJSVjJSS1VUQkdibE5WVGtKaFZXeHdVMWRrVkZkR1JtNVpla3B2WkcxU1dHVkhkRXBTTW5neFdWWm9VMk5HYkZsVmJYaEtVbXMxU0ZacldrSmFNV3Q1VDFoV2FXSldXbkZhUldSelpHMUtjRkZxVGsxbFZVb3pXVEl3TldReGNGbFRWMlJhVjBWd2RWa3piRU5oUjBwMFZWZGthbEl3V2paWk0yeENZVlZzY0ZOVmRFcFJNRVp1VTFWT1Fsb3diRVJSYm14aFZqQTFiVmxXWkZKYU1VSlVVVzV3WVZZemFIUlVSekF4WWtkUmVFOVliR0ZXTURVeVdUSXhVbUl3ZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hKVTIxNFdrMVViSGRYYTAweFpXeHdkVlZ1WkZsTmF6VXlXVzB3TVdKR2EzcFZia0pwVFdwU2RsTXhSblphTUd4RVVWZGtTbEV3Um01VFZXaERUbGROZVZkcVFtcFJlbFpGV1dwSk1XUldjRmhVYWtKb1ZucHNNVlJITVVkbGJVMTVWbTVzYTFKcWJIRlhWbVEwWXpGd1dGVnRXbWxOYWxaeFYyeFpOVTB5UmxsVmJUbE1VVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFlqSkplbFJxUWxGWFJYQnpWMVJGTldOR2NFUk9XSEJoWW14S00xZEVTbTlrYlUxNlZWaE9SR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWb1YyVnNjRmxUYmxaYVZucEdjMVZHYUV0aVJtdDRUMWhDWVZGNlZqWlhiVFZUWkRGbmVsWnVjR0ZYUld4NlVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hKVVc1YWFtSnNSVFZaTWpGWFlXeG5lV0pIZEUxaWF6VjBXa1ZvUTFwdFRraFBXR3hyVVROa1RGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakpPU0ZKdWNHcE5NbEl5V1RJeFVrOVhUblJXYlhCWlRXMTRjbFJITlU5aVYxSkpVVzFhYWxJd1dqWlplazVyWkcxT2RGVllUa1JoVlVadVUxVk9RbG93YkVSUlYyUk1WVmM1VEZOVlRrSmFNR3hHVVc1U2FVMXJOWGxVUnpWRFlVZFNTRlJ0T1V4Uk1rNXpXVE5yTVdReVZsbFViVEZyVTBWR2RWTlZUbFphTWtwWVQxZDBZVll6WkhkUk1teENXakJzUkZGdGRHRldNV3h1V2tWa1YyVnRVa2RQV0hCaFlteEtNMWRFU2s5a2JVcDBUbGQ0V2sweFNuZFpha2t4V20xR1dFNVlRbXRTYW14NVYyeG9jbUl5VFhsV2JrNWhZVmhrYmxrd2FITmxiSEIxVlc1a1RGWkhPVXhUVlU1Q1dqQnNSRkZYWkVwUk1FWndVMWRzU2xveFRsbFZWMlJxVFcxb01scEdaRFJoTUd4SVlraFdhRmRHU25kWFZtaFRZa1ZzUjFSclpGZFNhMFp1VjFSSk5XUlhTblJXYlhCclVqSjRNbGx0YkVOTk1IZzFVVzVrYW1KVWJETlhiR2hLV2pGc1dWTnROV3BsVlVwdldXMHhVbG95UlhsV2FsWktVVEJzY0ZOWFpIWmFNR3hFVVZka1NsRXdSbTVUVldoTFlrWnJlRTlZUW1GUk1FVTFVMVZvVDJKSFNraFhXRlpwWWxaWmVsZEVUa3RpUm10NVQxaHNZVkV5WkhkUk1teENXakJzUkZGWFpFcFJNRVp1V1RJeFYyRnNaM2xpUjNSTlltMVNOVmxXYUZOaVJYUkpZekIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUycE9UMkpYVWtsUmJWcHFVMFZ3ZDFwSE1VZE5SbkJYVDFoS1lWZEhkSFZVTW14Q1ltMU9TR1JIZUd4Vk1rNTZVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVdraHdZV0pzU2pOWFJFNURZVWROZWxScVRtbE5NSEJ5VTI1d2Rsb3diM3BSYmtwaFYwZDRNMWRXYUU5bGEzQTFaREIwU2xFd1JtNVRWVTVDV2pCc1JGRnFiRXhWVnpsdVUxVk9RbG93YkVSUlYyUktVMFZ3YzFkVVJUVmpSbkJFVGxod1lXSnNTak5YUkVwUFpHMUtkRTVYZUZwTk1VcDNXV3BKTUdJd2RGSmlNbVJLVVRCR2JsTlZUa0phTUd4SlVXcFdhazFzYjNkWk1FMHhVa2RKZVU1WVZtRldNRFIzV1Zaak5XUlZlSFJTYm5CcVRXeGFOVnBGV1RWaGJHeFlaVWhPWVZZeFNtMVpha2t4WVd4d1YwOVVUbWhYUmtwMlV6QkdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVcwNWFVMHdOSGRWUm1oTFlrWnJlRTlZUW1GUmVsWTJWMjAxVTJReFozbGhTRnBxVFRGR2VsRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU1ZadWNHRlhSWEF4VjFaamVHSkdRbGxUYlhoYVRWUnNkMWRyVFRGbGJIQjFWVzVrV1UweFdqWlhiR2hLWXpCT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVMFZLTWxreU5WSlBWMDUwVm0xd1dVMXRlSEpVUnpWUFlsZFNTVkZ0V21wU2VtdzFXa1ZPTTFNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGthbE5GY0hkYVJ6RkhUVVp3VjA5WVNtRlhSM00xV1RJeFYyRnNaM2xpUjNSTlltczFkRnBGYUVOYWJVNUpVMjVDYTJKVldYZFhiRmsxWTJ4d1dXRXpUa1JoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVmFFTmxWMFpaVjIxb2ExSXhXbTFaVkVwWFRsWm5lbEZ0YUdwTk1EQTFXVEl4VjJGc1ozbGlSM1JOWW1zMWRGcEZhRU5hYlU1SVVtNXdhazB5VWpKWk1qRlNZekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3dkRkppTUhSS1VUQkdibE5WVmtOa1IwbDVWRzVLVFdKclNtOWFSV1JQWWpCMFJGa3llR3BsVkZZeldsWm9UMkpYVWtsUlZ6VktVVEZXYmxsc1l6VmhNWEJZWkROQ1JHRlZSbTVUVlU1RFlURndXRmRYWkd0U01WbzJXa1ZaTldWc2NIVlZibVJaVFdzMU1sbHRNREZpUm10NlZXNUNhVTFxVm0xWk1qRlhUVWRTV1ZOdVZreFRSVFZ6V1d0a1dtTXdiRWxSYWxacVRXeHZkMWt3VG5KT2EwNXdVVmRrU2xFd1JtNVRWVTVDV2pCc2NGTlhiRXBTVjNkM1UxVm9UMkl5U1hwV2JrNWhVVEJLTlZkc2FGTk5WMDUwVGtka2FXSldXWHBUVldoUFlsZFNTVkZYWkZwTmFtd3hXVzB4VjJGdFVraGlTRnBwWVZWR2NGTlhiRXBUTUd4RVVWZGtTbEV3Um01VFZVNURaVlp3V0ZSdFdtaFdNVVp1VlVaT1EyVnNjRmhsUnpGTllsUldjMXBFUlRWbFZuQllWRzVhYW1KV1JuWlRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVm9TMkpIVGpWUlZHeEtVMFZ3YzFkVVJUVmpSbkJFVGxod1lXSnNTak5YUkVwUFpHMUtkRTVYZUZwTk1VcDNXV3BKTUdJd2RGSmlNbVJLVVRCR2JsTlZUa0phTUd4SlZHMTRhVkl4YkRGWFZtaFBaV3h3V1ZOcVFsTlhSVmw0VjFaa00ySXdUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xORlNURlpla3BoVFVkT1JFNVZVbWxOYWxZeFYyeGtUMDFIUmxoUFdGWk1VVEowZWxOVmFFdGlSMDQxWkRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZZUWtSYU1qbHVVMVZPUWxveGNFaFdiVEZLVTBaS2MxbDZUbE5hYkhCMFlraE9ZVlo2Vm05WmJHUldZakpOZVZadVRtRmhWM015VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5YYkVwaFZXeEdZa1JDU2xORk5YWlphazVYWXpGd1JGRnVWbWxOTVVadVYyeG9TMlZYU1hwVFYyUmFWbnBXY2xOVmFFOWlNa2w2Vm01T1lWRXdTalZYYkdoVFRWZE9kRTVIWkZwVk1FWXhWMnRvVjJSSFRrUk9WRnBvVjBWR2JsZHRNWE5qTVhCVVVXNXdhMU5GYkc1VFYyeEtZVlZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3lTblJQVkU1S1VrUkNibGRyWkVkTlJuQlpWVzVDYVZZeFZqRlpiVEExVFRCMFJHRXdkRXBSTUVadVUxVk9RbG93YkVSUmJteGhWMFV4YmxWR1RrTmxiSEJZWlVjeFRXRjZSakpYYTJSWFl6QjRkRmR1UW1sU01Wb3hWMVpqZUdKRmRFaE9XRnByWlZkMFRGTlZUa0phTUd4RVVWZGtTbEV3U2paWGJHUTBZbFY0ZEZKdWNHcE5iRm8xV2tWYVUyVlhVbGhXVnpscVlsWmFObFJITVZka1ZuQkpWR3BPYUZkR1NuWlRNRTVLWkZad1NWWnVVbXBSZWxVeVdWWm9RbUZWZEZSaE1ITnBRMjFXTWxsWGQyOVpNamwwWTBkc2MxcFRhR2xaV0U1c1RtcFJkVmxxV1RCYVIxWnFZakpTYkV0SE9WQlVla0oyWWpJNVVGUjVhM05KUTBrNFl6TlNlV0ZYTlc1UWFVbHpTVU5rYkdWSFZtcEtlV3R3SWdwbGRtRnNLR052YlhCcGJHVW9ZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaHZUMDh3YjI5dlQwOHBMQ0FpUEhOMGNtbHVaejRpTENBblpYaGxZeWNwS1E9PSIKZXZhbChjb21waWxlKGJhc2U2NC5iNjRkZWNvZGUob09PMG9vb09PKSwgIjxzdHJpbmc+IiwgJ2V4ZWMnKSk="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))