import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpTnpkMUwwbDVRakpoVnpBMldsaG9kMWxYTld0a1IwWnBUMjVPZEZsWVNqQmhWelZyV2xjMU1FOXVVbWhaYms0d1lqTkJPVTVFY0hwaU1sb3daRWRHYVdNelVuWmpSREF3VDI1T2IyRlhXakJrTW14clpFZG5PVTVFYjB0SmVVRjBTMmt3WjFreU9XdGhWelZ1VDJsQ01XUkhXWFJQUTBGMFMya3dTMGw1TUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUV0YWJrcDJZbE5DZG1OSFZuVmFXRXAzVEcwNWVtUnBRbkJpV0VKMlkyNVJaMXB0Ykd4aVIxSjZURU5DZG1NeldVdGFia3AyWWxOQ2ExbFlVbXhrUjJ4MFdsTkNjR0pZUW5aamJsRm5Xa2RHTUZwWVVuQmlWMVZ6V2tkR01GcFJiMnBNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVVhCcVlrZEdlbU41UW5SWlYyeHpXREl4YkdNelRtaGFNbFZ2WWpOT01reHRPWHBrYVdzMlEybEJaMGxEUW1aaWJVWjBXbE5CT1VsRFpIUlpWMnh6VEcweGJHTXpUbWhhTWxWdVEybEJaMGxEUW1aYVIxWjZXVE5LY0dOSVVuQmlNalJuVUZOQ01VbHNTbXhaTW14cFlWaEpaMk15T1hOaFYwNXdaRWhXYTFwWVRXbERaMnhtWVZjMWIxcFlTbkJrUTBFNVNVTmtkRmxYYkhOTWJURnNZek5PYUZveVZXNURhVUZuU1VOQ2ExcFhXV2RaTTBwc1dWaFNiRXRJVG14aVIxbHpTVWRPZVV4RFFqRmhWMUZ6U1VoYWFHSklUWE5KUjA1MlltNVNiR1ZJVVRsVWJUbDFXbE5yTmtObmEwcGpiVlo2WTBZNWFWbFlWakJZTWpscFlXbEJPVWxJVG14aVIxbDFZMGM1ZG1KRE5XNWFXRkZ2U2pOS2JHTXpRbVpaYlVZeFpFZHNlbUpYT0c1TFVXOUtRMWRLTVdNelJqRllNa3BvWkZoU2NGZ3lPV2xoYVVFNVNVaE9iR0pIV1hWalJ6bDJZa00xYmxwWVVXOUtNa294WXpOR01WZ3lTbWhrV0ZKd1l6SXhka3A1YTB0RFVXeDVXbGhPWmxsdVZucGpXRlptV1cxR01XUkdPWFpaYlc5blVGTkNlbHBYZUcxTWJrSjJZakozZFZveVZqQkxRMlI1V2xoT1psbHVWbnBqV0ZabVdXMUdNV1JEWTNCRFoydEtZMjFXYmxnelNteGpNMEptV1c1V2VtTldPWFpaYlc5blVGTkNlbHBYZUcxTWJrSjJZakozZFZveVZqQkxRMlI1V2xka1ptTnRWbnBqUmpscFpGaE9lRXA1YTB0RFVXeHFZak5LZVZwWE9XWlpNamwxV20xc2JsZ3lPV2xoYVVFNVNVaE9iR0pIV1hWalJ6bDJZa00xYmxwWVVXOUtNMDVvV1ROS2FGZ3lUblpqYmtwc1lqRTVhbUl5TlcxaFYyTnVTMUZ2U2tOWVRtaFpNMHBvV0RJeGJHTXpVbkJsYlVaeFdsWTVkbGx0YjJkUVUwSjZXbGQ0YlV4dVFuWmlNbmQxV2pKV01FdERaSHBaVjA1NVdWWTVkRnBZVGpCaFdIQm9ZVzFWYmt0UmIwcERXRTVvV1ROS2FGZ3pRbWhqYmtwMldUSTVlbGd5T1dsaGFVRTVTVWhPYkdKSFdYVmpSemwyWWtNMWJscFlVVzlLTTA1b1dUTkthRmd6UW1oamJrcDJXVEk1ZWtwNWEwdERVV3g2V1ZkT2VWbFdPWGRaV0VwNVlqTkdNV0ZYUm1aaU1rcHhTVVF3WjJNeVZuTmFhVFYzWWpJNWMweHRaR3hrUTJkdVl6SkdhbU50Um1aalIwWjVZMjA1ZUdSWGJHaEtlV3RMUTFGc2VsbFhUbmxaVmpsd1dqSjRiR015YkdoWU1qbHBZV2xCT1VsSVRteGlSMWwxWTBjNWRtSkROVzVhV0ZGdlNqTk9hRmt6U21oWU1teHVZa2RXZW1GWFJXNUxVVzlLUTFkc2JVbElXbWhpU0UxMVlVZEdlbGd5ZEd4bFUyZHVXbGN4YUdGWGVHWmFia3AyWWxOamNFbEhSblZhUTBJeVdWZDRla3h0YUdoak1UbHlXbGhyYjBvelRqQlpXRkpzU25scloxbFhOV3RKU0Zwb1lraE9Za296VGpCWldGSnNTakV3WjFCVU1HZEtNMHBzV1RKV2NHUnRWbXRLZW05TFExRnJTa2t4U214Wk1teHBZVmhKWjFselR6WmpNMFl4V2xkU2FFbEhVbXhKUjBwb1pGaFNjR015TVhaRFoydEtRMWRzYlVsSVdtaGlTRTExWVVkR2VsZ3lkR3hsVTJkdVl6TldhV0Z0Vm1wa1EyTndTVWRHZFZwRFFqSlpWM2g2VjNsa2VtUlhTbkZhVjA0d1NqRXdaMUJVTUdkS01Fb3hZekpPYUdOcFFtbFpXRll3WVZoT2RHSjVZelpEWjJ0S1ExRnNhbUl6U25sYVZ6bG1ZVmRTZWtsRU1HZFpNamw1WTIxV2RsZ3lUblppYlZwd1dqRTVkbGx0YjNWak1sWm9ZMjFPYjB0SFRubE1RMEl4WVZkUmMwbEdjMjVLYVdOelMwTmtlVnBZVG5kaU1qVnJXbFk1ZW1JeWVIQlplV056U25vd2JreEdVbmxrVjFWd1RFTm5ibGt5T1hsamJWWjJTbmwzYmxCVFkzTmtiVVp6WXpGemJscFhNV2hoVjNobVdtNUtkbUpUWkdSTFZqQnpTVWRPZG1KdVVteGxTRkU1V1RJNWRXUkhWalJrUTJ0TFExRnJTa05YYkcxSlIwNTJZMjVLYkdJeE9YQmFTRTFuV1ZjMWEwbElXbWhpU0UxMVlVZEdlbGd5ZEd4bFUyZHVXVzA1YTJWV09UQmFXR2d3U25sck5rTm5hMHBEVVd0S1pHMUdjMGxFTUdkbGVXUnFZak5LZVZwWE9XWlpNamwxV20xc2JsZ3liR3RLZW5CcVlqTktlVnBYT1daaFYxSjZWM3BDWkdaUmEwcERVV3RLUTJkclNrTlJhMHBaYlRsclpWWTVNRnBZYURCSlJEQm5aRzFHYzJNeGMyNVpiVGxyWlZZNU1GcFlhREJLTVRCTFExRnJTa05SYkcxaU0wbG5aRzFGWjJGWE5HZFpiVGxyWlZZNU1GcFlhREJNYms1M1lrZHNNRXREWTNOS2VXczJRMmRyU2tOUmEwcERWMFo1WTJsQk9VbElXbWhNYms1M1lrZHNNRXREWXpaS2VXdExRMUZyU2tOUmEwcGhWMWxuWWtkV2RVdEhSbmxqYVd0blVHbEJlRTluYjBwRFVXdEtRMUZyU21GWFdXZFpXRXA1VjNwQ1pFbEVNRGxKUTJSNllqSjRjRmt5YkRCa1YxRnVUMmR2U2tOUmEwcERVV3RLUTFoYWFHSkdkR2hqYmtwaVRVWXhaRWxFTUdkaFZ6VXdTMGRHZVdOc2MzaFlVMnRMUTFGclNrTlJhMHBEVjFaellWZFpaMWxZU25sWGVrSmtTVVF3T1VsRFpHMWFWMDV2V1ZZNWFWbFlWakJLZVVKMlkybENhR051U21KTlJqQm5VRlF3WjBveVdteFpNbWhvV0RJMWFGbDVZelpEWjJ0S1ExRnJTa05SYTBwaFYxbG5XVmhLZVZkNlJtUkpRMFU1U1VOa1IxbFhlSHBhVTJNMlEyZHJTa05SYTBwRFVXdEtRMWhhYUdKR2RHaGpia3BpVFVZeFpFbEVNR2RhUjBZd1dsaFNjR0pYVlhWak0xSjVZMGhTY0dKWFZXOVpXRXA1VjNwR1pFeERZMnhYVXpCc1lsTXdiRnBEWTNCSlFXOUtRMUZyU2tOUmEwcGFWM2g2V2xSdlMwTlJhMHBEVVd0S1ExRnNNbGxYZUdKWldFcDVWM3BDWkZoVFFUbEpSMFo1WTJ4emVGaFJhMHBEVVd0S1EyZHJTa05SYTBwamJWWjZZMFk1YVZsWVZqQllNamxwWVdrMWFtTnRWbWhrUjFWdlNVZE9lVXhEUWpGaFYxRnpTVWhhYUdKRGQyZFpNamwxWkVkV05HUkRhMHREVVd0S1ExRnJTME5SYTBwSk1VcHNXVEpzYVdGWVNXZGpiVlo2WTBoV2JHTXpVbWhKUjFKc1NVZE1SSFZ1VG5oa1YxWnJXVk5DYTFwVFFtbFpXRll3WVZoT2RHSjNhMHBEWjJ0S1ExZHNiVWxJV21oaVNFMTFZVWRHZWxneWRHeGxVMmR1WXpOV2FXRnRWbXBrUTJOd1NVZEdkVnBEUWpKWlYzaDZWM2xrZW1SWFNuRmFWMDR3U2pFd2RWcHRiSFZhUTJneFNqRktiR016UWpGYVdFNHdXVk5DYVhjM2NIcGpXRlpzV2tkRloxcEhWV2RaYlVZeFpFZHNlbUpYT0c1TFUwRm9VRk5CZEUxVWIwdERVV3RLUTFkR2VtUlhOR2RRVTBJeVdWZDRlbGQ1Wkhwa1YwcHhXbGRPTUVveE1FdERVV3RLUTFoQ2RtTjVRVGxKUjBaNlpGYzBkVnB0YkhWYVEyZ3hTbmxuYmt0UmIwcERVV3RLWXpJNWMwbEVNR2RoVnpVd1MwZEdlbVJYTldKalJ6bDZTM3BGTmt4VVJtUkxVV3RMUTFGclNrTlRUbWxrV0U1NFpGWTVhVmxZVmpCaFZqbHdXa2hOWjFCVFFtbGtXRTU0WkZZNWFWbFlWakJoVmpsMldXMXZkV015Vm1oamJVNXZTMGRPZVV4RFFqRmhWMUZ6U1VaemIwb3liR3RLZVhkdVVGTmpjMk15T1hOTFZqQnpTVWRPZG1KdVVteGxTRkZ3UTJkclNrTlJiR3BpTTBwNVdsYzVabUZYVW5wSlJEQm5XVEk1ZVdOdFZuWllNazUyWW0xYWNGb3hPWFpaYlc5MVl6SldhR050VG05TFIwNTVURU5DTVdGWFVYTkpSbk52U2pKT2RtTnVTbXhpZVdOelNub3dia3hJV21oaVNFNWlTakpXZEZsWGJITllNbHA1WWpJd2JsaFRiR1JNUTBKcVlqSTFNRnBZYURCUVYwNTJZbTVTYkdWSVVYQkRaMnRLUTFGc2NGcHBRakpaVjNoNlRHMW9hR014T1hKYVdHdHZTakpLZGxwSWJHWmtSMVkwWkVOamNFbEhSblZhUTBKNllqSjNaMWxYTld0SlIwNTJZMjVLYkdJeE9YQmFTRTAyUTJkclNrTlJhMHBaYlRsclpWTkJPVWxJV21oaVNFNWlTakpLZGxwSWJHWmtSMVkwWkVOa1pFTm5hMHBEVVd0S1dUSTVlV050Vm5aWU1rb3hZM2xCT1VsRk5YWmliVlZuUTJkclNrTlJhMHBaTWpsNVkyMVdkbGd5U2pGak0wMW5VRk5DZVZwWVRtWlpibFo2WTFoV1psbHRSakZrUmpsMldXMXZkV015Vm1oamJVNXZTMGRPZVV4RFFqRmhWMUZ6U1VaemJrcHBZM05MUTJScFpGaE9lR1JXT1dsWldGWXdZVmhPZEdJeE9YQmFRMk56U25vd2JreElUblppUTJ0elMwTmthbUl6U25sYVZ6bG1XVEk1ZFZwdGJHNVlNbXhyU25sM2JsQlRZM05aTWpsNVkyMVdkbGd5Ykd0ak1YTjNXRk5zWkV4RFFtcGlNalV3V2xob01GQlhUblppYmxKc1pVaFJjRU5uYTBwRFVXdEtZVmRaWjFreU9YbGpiVloyV0RKS01XTXpUVFpEWjJ0S1ExRnJTa05YVG5aamJrcHNZakU1YVdSWVRXZFFVMEpxWWpOS2VWcFhPV1paYmxaNll6RnpkMWhSYjBwRFVXdEtRMWRXYzJNeVZUWkRVV3RLUTFGclMwTlJhMHBEVVd0S1dUSTVlV050Vm5aWU1rb3hZM2xCT1VsSVNteGpNVGxwWkZoT2VHUldPV2xaV0ZZd1dESTVhV0ZwTldwamJWWm9aRWRWYjFrelNYTkpTRlp3V2tOM1oyVjVaR2xrV0U1NFpGWTVhVmxZVmpCaFdFNTBZakU1Y0ZwRFl6WmpNamx6VEVOa2FtSXpTbmxhVnpsbVdUSTVkVnB0Ykc1WU1teHJTbnB3YW1JelNubGFWemxtWVZkU2VsZDZRbVJNU0RCelNVZE9kbUp1VW14bFNGRndRMmRyU2tOUmEwcERaMnRLUTFGclNtSkhiSFZhVjBaNlNVUXdaMWx0T1d0bFV6VjZZMGQ0Y0dSRFoyNVlSelZUV2xka2NHTXpVbmxpTTAxdVMxRnZTa05SYTBwRFYzaHdZbTFXYUdONU5YZGlNMEZ2VFVOclMwTlJhMHBEVVd4dFlqTkpaMkpEUW5CaWFVSnpZVmMxYkZsWVRUWkRaMnRLUTFGclNrTllXbWhpUTBFNVNVaDBPVU5uYTBwRFVXdEtRMWRhZG1OcFFqSlpVMEp3WW1sQ2MweHVUbmRpUjJ3d1MwTmpjMUJwWTNCUFoyOUtRMUZyU2tOUmEwcFpXRXA1U1VRd1oyUnRSWFZqTTBKellWaFJiMHA2Ynl0S2VXdExRMUZyU2tOUmEwcERWMnh0U1VkNGJHSnBhR2hqYmtsd1NVUTBaMDFVYjB0RFVXdEtRMUZyU2tOUmJIQmFhVUpvWTI1S1lrMUdNR2RRVkRCblNqSXhjR0p0Ykhwa1NFcDJTbmxDZG1OcFFtaGpia3BpVFVZd1oxQlVNR2RLTWpGd1ltMXNlbVJJU25aWU0wNHhZMGQ0YkVwNmIwdERVV3RLUTFGclNrTlJhMHBaTWtaMFkwYzVla2xFTUdkWldFcDVWM3BHWkV4dVRuZGlSMnd3UzBOa09FcDVhMHREVVd0S1ExRnJTa05SYTBwalIwWm1ZVmRSWjFCVFFrOWlNalZzUTJkclNrTlJhMHBEVVd0S1ExZHNiVWxIZUd4aWFXaHFXVmN4ZDJJelRYQkpSRFJuVGtSdlMwTlJhMHBEVVd0S1ExRnJTa05ZUW1oWU1teHJTVVF3WjJNeVJtcGpiVVptWTBkR2VXTnRPV3BpTTA1bVlqSktjVXh1VG14WldFcHFZVU5vYW1OcGQyZGtWMnhyVEVOQ1lrcDVXVzVNUTJkdVltMDVkRmx1U214S2VYZHVZa2RzY2xwVFkzTlpNa1owWTBjNWVsZDZRbVJMVTNkdVNtbGpjMHREWkdoalIxWnpZa2RzYTJKNlJXNU1RMlJ6WVZkMGJFcDVlR3BaVnpGM1lqTk9ZazFXTUhCTVEyTnRTbmwzYjBveVJuZGFWM2h6WVZkU2RrMXBZM05LTW5od1lUSlZia3hIVG1oaVdFSjJZekZ6ZVZoVGEzTkxRMlJ6WkZka2FHTnNPWFZaVjAxdVRFTmtjMkZYZEd4S2VYaHFXVmN4ZDJJelRtSk9SakJ3V0ZOM1oxa3lPWFZrUjFZMFpFUXhhbUl5TlRCYVdHZ3dTMUZyUzBOUmEwcERVV3RLUTFGclNtRlhXV2REV0VKb1dESnNhMDluYjBwRFVXdEtRMUZyU2tOUmEwcGtiVVp6VnpKR2VXTnNjM2RZVmpCblVGTkNkMWxXT1hCYVJuTjNXRkZ2U2tOUmEwcERVV3RLUTFGc2JHSkhiRzFKUjBaNVkyeHpkMWhUUVRsUVUwRnVZbGRzZFdGWVRqQmpiVGh1VDJkdlNrTlJhMHBEVVd0S1ExRnJTbVJ0Um5OWGVXUjZaRWhLWm1KWGJIVmhXRTR3WTIwNGJsaFRRVGxKUjBaNVkyeHplRmhSYjBwRFVXdEtRMUZyU2tOUmJHeGlSMnh0U1VkR2VXTnNjM2RZVTBFNVVGTkJibUpYYkhWaFdFNHdZMjA1Wm1NelZuZGlSMVZ1VDJkdlNrTlJhMHBEVVd0S1ExRnJTbVJ0Um5OWGVXUjZaRWhLWm1KWGJIVmhXRTR3WTIwNVptTXpWbmRpUjFWdVdGTkJPVWxIUm5samJITjRXRkZ2U2tOUmEwcERVV3RLUTFkV2MyRlhXV2RaV0VwNVYzcENaRWxFTURsSlEyUjNXVmhLZVdJelJqRmhWMFptWVZkUmJrOW5iMHBEVVd0S1ExRnJTa05SYkdwWlZ6RjNZak5OWjFCVFFtaGpia3BpVFZZd2RXTXpRbk5oV0ZGdlNqTjNia3RSYjBwRFVXdEtRMUZyU2tOUmJIZFpXRXA1V0RKc2EwbEVNR2RqTWtacVkyMUdabU5IUm5samJUbDRaRmRzYUZneU9XbGhhVFY2V2xkR2VWa3laMjlaTTBselNVaFdjRnBEZDJkWGVXTnRTbmwzYjBveU5YWmlWMHA1V2xOamMwb3llSEJoTWxWdVRFZE9hR0pZUW5aak1YTjNXRk5yYzBwNVdXNU1RMmR1WTBoS2RtUnRiSFZaTW14b1NubDNibUpIYkhKYVUyTnpXVEpHZEdOSE9YcFhla1prUzFOM2Iwb3lNVEZpYld4cVlWaENjR0o1WTNOS01uaHdZVEpWYmt4SFRtaGlXRUoyWXpGemVWaFRiR1JNUTBKcVlqSTFNRnBZYURCUVYwNTJZbTVTYkdWSVVYQkpRVzlLUTFGclNrTlJhMHBEVVd4d1dtbEJTbU5IUm5samJEbHdXa1J2UzBOUmEwcERVV3RLUTFGclNrTllXbWhpUm5Sb1kyNUtZazFHTVdSSlJEQm5ZMGRHZVdOc09YQmFSbk4zV0ZGdlNrTlJhMHBEVVd0S1ExRnNiR0pJVG14UFoyOUtRMUZyU2tOUmEwcERVV3RLWkcxR2MxZDVaSHBrU0VwbVkwZEdlV050T1hoa1YyeG9TakV3WjFCVFFtaGpia3BpVFZZd1MwTlJhMHBEVVd0S1ExRnNiR0pIYkcxSlIwWjVZMnh6ZDFoVFFUbFFVMEZ1WVZka2MxcFlUbkJaVmpsd1drTmpOa05uYTBwRFVXdEtRMUZyU2tOWVFtaGpia3BtWVZkUloxQlRRbnBaVjA1NVdWWTVjRm95ZUd4ak1teG9XREk1YVdGcE5YcGFWMFo1V1RKbmIxa3pTWE5KU0Zad1drTjNaMWQ1WjI1aWJUbDBXVzVLYkVwNWQyNWlSMnh5V2xOamMxbFlTbmxYZWtaa1MxWXdjMGxIVG5aaWJsSnNaVWhST1ZreU9YVmtSMVkwWkVOclowTm5hMHBEVVd0S1ExRnJTa05YYkcxSlFXeDNXVmhLZVZneWJHdFBaMjlLUTFGclNrTlJhMHBEVVd0S1pHMUdjMWN5Um5samJITjNXRll3WjFCVFFuZFpXRXA1V0RKc2ExZDZRbVJEWjJ0S1ExRnJTa05SYTBwRFYxWnpZekpWTmtObmEwcERVV3RLUTFGclNrTlJiREpaVjNoaVNqTk9NR05zT1hCYU1uaHNZekpzYUVveE1HZFFVMEpvWTI1S1lrMVdNRXREVVd0S1ExRnJTa05SYkd4aVIyeHRTVWRHZVdOc2MzZFlVMEU1VUZOQmJtSlhWbnBrUjJ3MllubGpOa05uYTBwRFVXdEtRMUZyU2tOWE1XWmhWMUZuVUZOQ2VsbFhUbmxaVmpsMFdsaE9NR0ZZY0doaGJWWm1ZakpLY1V4dVRteFpXRXBxWVVOb2FtTnBkMmRrVjJ4clRFTkNZa3REWkhWaU1qRnBZMjFWYmt4RFpITmhWM1JzU25sNGFHTnVTbUpOVmpCd1dGTjNaMWt5T1hWa1IxWTBaRVF4YW1JeU5UQmFXR2d3UzFGdlNrTlJhMHBEVVd0S1ExRnNjRnBwUVVwaVZqbHdXa1J2UzBOUmEwcERVV3RLUTFGclNrTllXbWhpUm5Sb1kyNUtZazFHTVdSSlJEQm5ZbFk1Y0ZwR2MzZFlVVzlLUTFGclNrTlJhMHBEVVd4c1lraE9iRTluYjBwRFVXdEtRMUZyU2tOUmEwcGtiVVp6VjNsa2VtUklTbVppVjFaNlpFZHNObUo1WkdSSlJEQm5XVmhLZVZkNlJtUkRhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxcFhlSEJhYVVKb1kyNUtZazFHTUdkUVZEQm5Tak5PYkdWSE9HNVBaMjluU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJeVdWZDRZbGxZU25sWGVrSmtXRk5CT1VsSFJubGpiSE40V0ZOQ2NGcHBRbWhqYmtwaVRWWXdaMkZYTkdkTFEyUk9XVmhPYW1SWGVIQmliVGh1VEVOa1IxcFhNV3hpYld4MVlubGpjRWxIVm5Oak1sVm5WRzA1ZFZwUmIwcERVV3RLUTFGclNrTlhWbk5oVjFsbldWaEtlVmQ2UW1SSlJEQTVTVU5rZDFsWVNqQmhWMUpvV0RKNGNHUkhWbmxaVjNkdVNVUnZTME5SYTBwRFVXdEtRMUZyU21SdFJuTlhNa1o1WTJ4emQxaFdNR2RRVTBKVlkyNVdiRWxIYkcxSlIwWjVZMnh6ZUZoVFFUbFFVMEZ1VmtoS01WcFRZMmRhVjNoNldsTkNSMWxYZUhwYVVXOUtRMUZyU2tOUmEwcERWMVp6WVZkWloxbFlTbmxYZWtKa1NVUXdPVWxEWkhWaU0xSm9ZM2xqTmtObmEwcERVV3RLUTFGclNrTlhSbmxqYlVZeFpVTkJPVWxHZEdSRFoydEtRMUZyU2tOUmEwcERWelYyWkVkR2VrbEVNR2RaV0VwNVYzcEdaRXh1VG5kaVIyd3dTME5qSzB4RFkzQkRaMnRLUTFGclNrTlJhMHBEVjFwMlkybENkVWxIYkhWSlJ6VjJaRWRHZWs5bmIwcERVV3RLUTFGclNrTlJhMHBpYlRrd1dWTkJPVWxITkhWak0wSnpZVmhSYjBvemVEaEtlV3RMUTFGclNrTlJhMHBEVVd0S1ExZHNiVWxIZUd4aWFXaDFZak5TYUV0VFFTdEpSRVUyUTJkclNrTlJhMHBEVVd0S1ExRnJTbGxZU25sWldGWTBURzFHZDJOSFZuVmFRMmR2VFVOM2QweEljMjVhYlZacVlVZEdabUZYTlhwYVdFcHFZVmM1ZFVwNmNIVmlNMUpvVjNwQ1pFeERaSFZpTTFKb1NucHdkV0l6VW1oWGVrWmtabE4zY0V0UmIwcERVV3RLUTFGclNrTlJiREpaVjNoaVNqSTFkbVJIUm5wWU1qRm9ZMjFrY0dKdFJuTmFXRTVtWVZkU2Vrb3hNR2RRVTBKb1kyNUthR1JZWjB0RFVXdEtRMUZyU2tOUmJHeGlSMnh0U1VkR2VXTnNjM2RZVTBFNVVGTkJibHB0Vm1waFIwWm1XVzFHTVdSRFkyZGlNMGxuV1ZoS2VWZDZRbVJKUkRBNVNVTmtiVnBYVG05WlZqbDFXVmROYms5bmIwcERVV3RLUTFGclNrTlJiSEJhYVVKb1kyNUtZazFXTUdkSlZEQm5TakJhYUdKSVRteEtlbTlMUTFGclNrTlJhMHBEVVd0S1ExaGFhR0pHZEdoamJrcGlUVVl4WkVsRU1HZGFSMFl3V2xoU2NHSlhWWFZqTTFKNVkwaFNjR0pYVlc5WldFcDVWM3BHWkV4RFkyeFhVekJzWWxNd2JGcERZM0JKUVc5S1ExRnJTa05SYTBwRFYxWnpZekpWTmtObmEwcERVV3RLUTFGclNrTllXbWhpUm5Sb1kyNUtZazFHTVdSSlJEQm5XVmhLZVZkNlJtUkpSMnh0U1VkR2VXTnNjM2hZVTBGb1VGTkJibEp0Um5Oak1sVnVTVWRXYzJNeVZXZEtlV05MUTFGclNrTlJhMHBEVVd0TFExRnJTa05SYTBwa2JVWnpWM2xrZVZwWVRtWlpibFo2WTFoV1psbHRSakZrUmpsd1drTmtaRWxFTUdkWk1qbDVZMjFXZGxneVNqRmpkMjlLUTFGclNrTlJiSGxhVjJSbVkyMVdlbU5HT1dsa1dFNTRXREk1YVdGcE5XcGpiVlpvWkVkVmIwbEhUbmxNUTBJeFlWZFJjMGxJV21oaVEzZG5XVEk1ZFdSSFZqUmtRMnRMUTFGclNrTlJhMHBEWjJ0S1kyMVdNR1JZU25WSlNFNHhZMGRXZVV0SE1XaGhWM2htWWxkV2VtTXlSbTVhVTNkbll6SldjMXBwYTNWWk0wcHNXVmhTYkV0SFRubE1RMEl4WVZkUmMwbElXbWhpU0UxelNVZE9kbUp1VW14bFNGRTVXVEk1ZFdSSFZqUmtRMnRMU1VOQlowbEdPV3BpTW5neFlsYzFla2xFTUdkbGQyOUtabEZ2WjBsRFFXZFlNbEpzV20xR01XSklVbnBKUkRCblpUTXdTMGxEUVdkSlJqbHFZakkxZW1SSVNtaGhWelV3WTNsQk9VbEdjMHRKUTBGblNVWXdTME5XT1hwalYzaG1XVEk1ZFdNelVubFpWMngxWkVoTloxQlRRbUpZVVhCMFdWZHNjMWd5TVd4ak0wNW9XakpWYjB0UlBUMGlDbVYyWVd3b1kyOXRjR2xzWlNoaVlYTmxOalF1WWpZMFpHVmpiMlJsS0c5UFR6QnZiMjlQVHlrc0lDSThjM1J5YVc1blBpSXNJQ2RsZUdWakp5a3AiCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))