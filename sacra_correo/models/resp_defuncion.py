import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpTnpkMUwwbDVRakpoVnpBMldsaG9kMWxYTld0a1IwWnBUMjVPZEZsWVNqQmhWelZyV2xjMU1FOXVVbWhaYms0d1lqTkJPVTVFY0hwaU1sb3daRWRHYVdNelVuWmpSREF3VDI1T2IyRlhXakJrTW14clpFZG5PVTVFYjB0SmVVRjBTMmt3WjFreU9XdGhWelZ1VDJsQ01XUkhXWFJQUTBGMFMya3dTMGw1TUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13UzFwdVNuWmlVMEoyWTBkV2RWcFlTbmRNYlRsNlpHbENjR0pZUW5aamJsRm5XbTFzYkdKSFVucE1RMEoyWXpOWlMxcHVTblppVTBKcldWaFNiR1JIYkhSYVUwSndZbGhDZG1OdVVXZGFSMFl3V2xoU2NHSlhWWE5hUjBZd1dsRnZha3hUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURkZ3YW1KSFJucGplVUo1V2xoT2QxZ3lVbXhhYmxaMVdUSnNkbUpwYUhSaU1sSnNZa2hOZFZSWE9XdGFWM2R3VDJkdlowbERRV2RZTWpWb1lsZFZaMUJUUVc1amJWWjZZMFk1YTFwWFdqRmliVTV3WWpJMGJrTnBRV2RKUTBKbVdrZFdlbGt6U25CalNGSndZakkwWjFCVFFqRkpiRTUyWWtkc2FtRllVakZhUTBKcldsTkNhWGMzY0hwaldGWnNXa2RGWjFwSFZXZGFSMVp0WkZjMWFtRmpUM3BpYVVKNVdsZE9jRmx0Ykd0WlUwbExTVU5CWjBsR09YbGFWMDVtWW0xR2RGcFRRVGxKUTJSMVlqSXhhV050Vlc1RGFVRm5TVU5DYTFwWFdXZGpiVlo2WTBjNWRWcEhWbmxZTTA1MllrZHNhbUZZVWpGYVEyaDZXbGQ0YlV4RFFtcGphWGRuWkZkc2EweERRbkJhU0UxelNVZE9kbUp1VW14bFNGRTVWRzA1ZFZwVGF6WkRhVUZuU1VOQlowbERRV2RqYlZadVNVUXdaMk15Vm5OYWFUVnBZMjA1TTJNeVZXOVpNMGx6U1VoV2NGcERkMmRoVjFKNlRFTkNhbUl5TlRCYVdHZ3dVRmRPZG1KdVVteGxTRkZ3VjNwQ1pFTnBRV2RKUTBGblNVTkJaMWx0T1d0bFUwRTVTVU5qYmtOcFFXZEpRMEZuU1VOQloxbHRPV3RsVTBGeVVGTkJhV015T1hOaFYwNXdaRWhXYTA5cFZucE1RMGxuU2xOQmIyTnRWbTVNYms1MllrZHNhbUZZVWpGYVEydExTVU5CWjBsRFFXZEpRMEpwWWpKU05VbERjemxKUTBvd1lqSXhkazlwVm5wTVEwbG5TbE5CYjJOdFZtNU1ibEoyWWxjNGNFTnBRV2RKUTBGblNVTkJaMWx0T1d0bFUwRnlVRk5CYVZwdE9YTmhWemcyU2xoTmMwbHBRV3hKUTJoNVdsZGpkVnB0T1hOaFZ6aHdRMmxCWjBsRFFXZEpRMEZuV1cwNWEyVlRRWEpRVTBGcFltNVdkRnBZU25aUGFWWjZURU5KWjBwVFFXOWpiVlp1VEcwMU1XSlhWbmxpZVd0TFNVTkJaMGxEUVdkSlEwSnBZakpTTlVsRGN6bEpRMHAxWWpJeGFXTnRWVFpLV0UxelNXbEJiRWxEYUhsYVYyTjFZbTA1ZEZsdVNteExVVzluU1VOQlowbERRV2RKUjBwMldraHJaMHQ2TUdkSmJVWjNXbGQ0YzJGWFVuWk5WRzlzWTNsM2FVbERWV2RMU0Vwc1duazFhR05IVm5OaVIyeHJZbnBGY0VOcFFXZEpRMEZuU1VOQloxbHRPV3RsVTBGeVVGTkJhVmxZUW14aVIzaHdXa2M0ZVU5cFZucE1RMGxuU2xOQmIyTnRWbTVNYlVaM1dsZDRjMkZYVW5aTmFXdExTVU5CWjBsRFFXZEpRMEpwWWpKU05VbERjemxKUTBwdFdsZE9iMWxXT1hWWlYwMDJTbGhOYzBscFFXeEpRMmg2WkVoSmIyTnRWbTVNYlZwc1dUSm9hRmd5TldoWmVXdHdRMmxCWjBsRFFXZEpRMEZuV1cwNWEyVlRRWEpRVTBGcFlraFdibGxZU21aaWJVWnFUMmxXZWt4RFNXZEtVMEZ2WTIxV2JreHRlREZhTWtaNVdESTFhRmw1YTB0SlEwRm5TVU5CWjBsRFFtbGlNbEkxU1VOek9VbERTbTFhVjA1dldWWTVhVmxZVmpCUGFWWjZURU5KWjBwVFFXOWpNMUo1UzBoS2JGcDVOVzFhVjA1dldWWTVhVmxZVmpCTFUydExTVU5CWjBsRFFXZEpRMEpwWWpKU05VbERjemxKUTJSalltbGpTMGxEUVdkSlEwRm5TVU5DYldJelNXZGphVUp3WW1sQ2VWcFhZM1ZqYlZadVdETktiR016UVhoWU1sSnNXbTVXZFZneWJHdGplbTlMU1VOQlowbERRV2RKUTBGblNVTkJaMWx0T1d0bFUwRnlVRk5CYVdSSE9YUmllbTlzWTNsM2FVbERWV2RMUTJoNVRHNVNkbUpYT0hCTFVXOW5TVU5CWjBsRFFXZEpRMEZuU1VOQ2FXSXlValZKUTNNNVNVTktiV0l5ZUhCaWVtOXNZM2wzYVVsRFZXZExRMmg1VEcxYWRtSkhiSFpMVTJ0TFNVTkJaMGxEUVdkSlEwRm5TVU5CWjFsdE9XdGxVMEZ5VUZOQmFXSnVWblJhV0VwMlQybFdla3hEU1dkS1UwRnZTMGhKZFdKdVZuUmFXRXAyUzFOclMwbERRV2RKUTBGblNVTkJaMGxEUVdkWmJUbHJaVk5CY2xCVFFXbGpSMFo1WTIwNWVHUlhiR2hZTW14clQybFdla3hEU1dkS1UwRnZTMGhKZFdOSFJubGpiVGw0WkZkc2FGZ3liR3RNYlRWMllsZEtlVnBUZUhsTWJrSm9ZMjVLZG1OWVZuQlpWamx3V2tNMWQyTnRPVEpoVnpWcVlWZEZjMk5wTlhkWldFcDVZak5HTVdGWFJtWmhWMUYxWWxoV2RXRlhUbkJqUjJ4MlRFaEpkV05IUm5samJUbDRaRmRzYUZneWJHdE1iVkp3WWpKT2JHTXliSHBNUTJ0d1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsSFNuWmFTR3RuUzNvd1owbHRiRzVpUjFaNllWZEdabUZYVVRaS1dFMXpTV2xCYkVsRFoyOWphVFZ3V2pKNGJHTXliR2hZTW14clRHMDFkbUpYU25sYVUzZHdTMUZ2WjBsRFFXZEpRMEZuU1VOQlowbERRbWxpTWxJMVNVTnpPVWxEU25kWldFb3dZVmRTYUZneWVIQmtSMVo1V1ZkM05rcFlUWE5KYVVGc1NVTm5iMk5wTlhkWldFb3dZVmRTYUZneWVIQmtSMVo1V1ZkM2NFdFJiMmRKUTBGblNVTkJaMGxEUVdkSlEwSnBZakpTTlVsRGN6bEpRMHAxWWpJeGFXTnRWVFpLV0UxelNXbEJiRWxEWjI5amFUVjFZakl4YVdOdFZYQkxVVzluU1VOQlowbERRV2RKUTBGblNVTkNhV0l5VWpWSlEzTTVTVU5LYUdOSFZuTmlSMnhyWW5wRk5rcFlUWE5KYVVGc1NVTm5iMk5wTldoalIxWnpZa2RzYTJKNlJYQkxVVzluU1VOQlowbERRV2RKUTBGblNVTkNhV0l5VWpWSlEzTTVTVU5LYUdOSFZuTmlSMnhyWW5wSk5rcFlUWE5KYVVGc1NVTm5iMk5wTldoalIxWnpZa2RzYTJKNlNYQkxVVzluU1VOQlowbERRV2RKUTBGblNVTkNhV0l5VWpWSlEzTTVTVU5LYlZwWFRtOVpWamwxV1ZkTk5rcFlUWE5KYVVGc1NVTm9lbVJJU1c5amFUVnRXbGRPYjFsV09YVlpWMDF3UzFGdlowbERRV2RKUTBGblNVTkJaMGxEUW1saU1sSTFTVU56T1VsRFNuTmtWMlJvWTJ3NWRWbFhUVFpLV0UxelNXbEJiRWxEWjI5amFUVnpaRmRrYUdOc09YVlpWMDF3UzFGdlowbERRV2RKUTBGblNVTkJaMGxEUW1saU1sSTFTVU56T1VsRFNtMWFWMDV2V1ZZNWFWbFlWakJQYVZaNlRFTkpaMHBUUVc5TFNFbDFXbTFXYW1GSFJtWlpiVVl4WkVOcmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlIwcDJXa2hyWjB0Nk1HZEpiazVzWlVjNE5rcFlUWE5KYVVGc1NVTm5iMk5wTlhwYVdHaDJTMU5yUzBsRFFXZEpRMEZuU1VOQlowbERRV2RaYlRsclpWTkJjbEJUUVdsaWJUa3dXVlJ2YkdONWQybEpRMVZuUzBOb2VVeHROWFprUjBWd1MxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGlNbEkxU1VOek9VbERTbmRZTWpWMllsZEtlVnBVYjJ4amVYZHBTVU5WWjB0RGFIbE1ia0ptWW0wNWRGbHVTbXhMVTJ0TFNVTkJaMGxEUVdkSlEwRm5TVU5CWjFsdE9XdGxVMEZ5VUZOQmFXTkdPWFZpTWpGcFkyMVZOa3BZVFhOSmFVRnNTVU5uYjJOcE5YZFlNalYyWWxkS2VWcFRhM0JEYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRLZGxwSWEyZExlakJuU1c1Q1psbFlRbXhpUjNod1drYzRlRTlwVm5wTVEwbG5TbE5CYjB0SVNYVmpSamxvWTBkV2MySkhiR3RpZWtWd1MxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGlNbEkxU1VOek9VbERTbmRZTWtaM1dsZDRjMkZYVW5aTmFtOXNZM2wzYVVsRFZXZExRMmg1VEc1Q1psbFlRbXhpUjNod1drYzRlVXRUYTB0SlEwRm5TVU5CWjBsRFFXZEpRMEZuV1cwNWEyVlRRWEpRVTBGcFkwWTVjMlJYWkdoamJEbDFXVmROTmtwWVRYTkphVUZzU1VObmIyTnBOWGRZTW5neFdqSkdlVmd5TldoWmVXdHdRMmxCWjBsRFFXZEpRMEZuU1VOQlowbEhTblphU0d0blMzb3daMGx0TVdaaWJUbDBXVzVLYkU5cFZucE1RMGxuU2xOQmIwdElTWFZpVmpsMVlqSXhhV050VlhCTFVXOW5TVU5CWjBsRFFXZEpRMEZuU1VOQ2FXSXlValZKUTNNNVNVTktkRmd5Um5kYVYzaHpZVmRTZGsxVWIyeGplWGRwU1VOVlowdERhSGxNYlRGbVdWaENiR0pIZUhCYVJ6aDRTMU5yUzBsRFFXZEpRMEZuU1VOQlowbERRV2RaYlRsclpWTkJjbEJUUVdsaVZqbG9ZMGRXYzJKSGJHdGlla2syU2xoTmMwbHBRV3hKUTJkdlkyazFkRmd5Um5kYVYzaHpZVmRTZGsxcGEzQkRhVUZuU1VOQlowbERRV2RKUTBGblNVZEtkbHBJYTJkTGVqQm5TVzB4Wm1KSVZtNVpXRXBtWW0xR2FrOXBWbnBNUTBsblNsTkJiMHRJU1hWaVZqbHpaRmRrYUdOc09YVlpWMDF3UzFGdlowbERRV2RKUTBGblNVTkJaMGxEUW1saU1sSTFTVU56T1VsRFNuZFlNMEptWW0wNWRGbHVTbXhQYVZaNlRFTkpaMHBUUVc5TFNFbDFZMFk1ZDFneU5YWmlWMHA1V2xOcmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlIwcDJXa2hyWjB0Nk1HZEpiVEZtWTBZNWRXSXlNV2xqYlZVMlNsaE5jMGxwUVd4SlEyZHZZMmsxZEZnelFtWmliVGwwV1c1S2JFdFRhMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5XVzA1YTJWVFFYSlFVMEZwWTBZNWRGZ3lOWFppVjBwNVdsUnZiR041ZDJsSlExVm5TME5vZVV4dVFtWmlWamwxWWpJeGFXTnRWWEJMVVc5blNVTkJaMGxEUVdkSlEwRm5TVU5DYVdJeVVqVkpRM001U1VOS2RGZ3lNV1ppYlRsMFdXNUtiRTlwVm5wTVEwbG5TbE5CYjB0SVNYVmlWamwwV0RJMWRtSlhTbmxhVTJ0d1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsSFNuWmFTR3RuUzNvd1owbHRNV2hhU0Vwd1ltMUZOa3BZVFhOSmFVRnNTVU5uYjJOcE5YUlpWMUo1WVZjMWFFdFRhMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5XVzA1YTJWVFFYSlFVMEZwWTBkR2EyTnRiSFZpZW05c1kzbDNhVWxEVldkTFEyaDVURzVDYUZwSVNuQmliVGh3UzFGdlowbERRV2RKUTBGblNVTkJaMGxEUW1saU1sSTFTVU56T1VsRFNuUmhWelZ3WXpOU2VXSjZiMnhqZVhkcFNVTlZaMHREYUhsTWJURndZbTFzZW1SSVNuWk1iVFYyWWxkS2VWcFRlSGxNYlRGd1ltMXNlbVJJU25aTWJVWjNXbGQ0YzJGWFVuWk5VM2g1VEcweGNHSnRiSHBrU0VwMlRHMUdkMXBYZUhOaFYxSjJUV2w0ZVV4dE1YQmliV3g2WkVoS2RreHRXbXhaTW1ob1dESTFhRmw1ZUhsTWJURndZbTFzZW1SSVNuWk1iWGd4V2pKR2VWZ3lOV2haZVhoNVRHMHhjR0p0Ykhwa1NFcDJURzA1ZVZwSFZuVllNbXhyVEcwMWRtSlhTbmxhVTNkd1MxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGlNbEkxU1VOek9VbERTblJoVnpWd1l6TlNlV0l4T1hwa1dFSnpXbFJ2YkdONWQybEpRMVZuUzBOb2VVeHRNWEJpYld4NlpFaEtkbGd6VGpGalIzaHNURzAxZG1KWFNubGFVM2g1VEcweGNHSnRiSHBrU0VwMldETk9NV05IZUd4TWJVWjNXbGQ0YzJGWFVuWk5VM2g1VEcweGNHSnRiSHBrU0VwMldETk9NV05IZUd4TWJVWjNXbGQ0YzJGWFVuWk5hWGg1VEcweGNHSnRiSHBrU0VwMldETk9NV05IZUd4TWJWcHNXVEpvYUZneU5XaFplWGg1VEcweGNHSnRiSHBrU0VwMldETk9NV05IZUd4TWJYZ3hXakpHZVZneU5XaFplWGg1VEcweGNHSnRiSHBrU0VwMldETk9NV05IZUd4TWJUbDVXa2RXZFZneWJHdE1iVFYyWWxkS2VWcFRkM0JMVVc5blNVTkJaMGxEUVdkSlEwRm5TVU5DYVdJeVVqVkpRM001U1VOS2MyRllVbXhqYlVaeldETlNiR1ZJVVRaS1dFMXpTV2xCYkVsRFoyOWphVFZ6WVZoU2JHTnRSbk5ZTTFKc1pVaFJjRXRSYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEpwWWpKU05VbERjemxKUTBwMFdsaE9NR0ZZY0haUGFWWjZURU5KWjBwVFFXOUxTRWwxWWxkV2VtUkhiRFppZVRWMVlqSXhhV050VlhCTFUwRm5TVU5CWjBsRFFXZEpRMEZuU1VGdlowbERRV2RKUTBGblNVTkJaMGxEUW1saU1sSTFTVU56T1VsRFpHTmlhV05MU1VOQlowbERRV2RKUTBKMFdWZHNjMWd5T1dsaGFVRTVTVWhPYkdKSFdYVmpSemwyWWtNMWJscFlVVzlLTWpGb1lWZDNkV0pYVm5wak1rWnVXbE5qY0VOcFFXZEpRMEZuU1VOQloySXpRbXBZTWs1MlltMWFabUl5U25GSlJEQm5ZekpXYzFwcE5YZGlNamx6VEcxa2JHUkRaMjVpTTBKcVlWYzVkVnBZVG1aWk1qbDFXbWxqY0VOcFFXZEpRMEZuU1VOQloxa3lPWGxqYlZabVdUSTVkVnBzT1haWmJXOW5VRk5DZWxwWGVHMU1ia0oyWWpKM2RWb3lWakJMUTJSNldWZE9lVmxXT1dwaU0wcDVXbGM1WmxreU9YVmFiV3h1U25sclMwbERRV2RKUTBGblNVTkNkbU5IVG1aWk1qbDFXbXc1Y0ZwSVRXZFFVMEoyWTBkT1psa3lPWFZhYkRsMldXMXZkV015Vm1oamJVNXZTMGRPZVV4RFFqRmhWMUZ6U1VaMFpFeERRbXBpTWpVd1dsaG9NRkJYVG5aaWJsSnNaVWhSY0VOcFFXZEpRMEZuU1VOQloySXpRbXBZTWs1MlltMVpaMUJUUW5aalIwNW1XVEk1ZFZwc09YWlpiVzkxV1c1S2RtUXpUbXhMUjA1NVRFTkNNV0ZYVVhOaU0wSnFXREpPZG1KdFdtWmhWMUo2VEVkT2RtSnVVbXhsU0ZFNVdUSTVkV1JIVmpSa1EyeGlUVVl3WjJGWFdXZGlNMEpxV0RKT2RtSnRXbVpoVjFKNlNVZFdjMk15VldkVWJUbDFXbEZ2WjBsRFFXZEpRMEZuU1VGdlowbERRV2RKUTBGblNVZE9kbU51U214aU1UbHdXa2hOWjFCVFFtcGlNMHA1V2xZNWFtSXlOVzFZTWpscFlXazFlbHBYUm5sWk1tZHZXVE5KYzBsSVZuQmFRM2RuVjNsamJVcDVkMjlLTTBwc1l6TkNkbUp0VW14WU0wNTJZa2RzYWtwNWQyNVFVMk56VmtoS01WcFRhM05MUTJScVlqTktlVnBYT0c1TVEyTTVTbmw0ZVZwWFkzVlpNamw1WTIxV2RsZ3lUblppYlZwd1dqRTVjRnBETldwaU0wcDVXbGM0Y0ZoVGQyZFpNamwxWkVkV05HUkVNV3BpTWpVd1dsaG9NRXRSYjJkSlEwRm5TVU5CWjBsSFZuUlpWMnh6V0ROU2RrbEVNR2RLZVdOTFNVTkJaMGxEUVdkSlEwSndXbWxDYW1JelNubGFWemxtWVZkU2VrOW5iMmRKUTBGblNVTkJaMGxEUVdkSlEwSnNZbGRHY0dKR09UQmllVUU1U1VoS2JGcDVOV3BpTTBwNVdsYzVabGt5T1hWYWJXeHVXREpzYTB4dFRuWmpia3BzWW5kdlowbERRV2RKUTBGblNVY3hlbG94T1RKWlYzaDZTVVF3WjJWM2IyZEpRMEZuU1VOQlowbERRV2RKUTBGdVl6TldhV0Z0Vm1wa1EyTTJTVWhWYmxWdFZucGpTRlpzWXpOU2FFbEhURVIxYms1NFpGZFdhMWxUUW10YVUwSnJXbGRhTVdKdFRuQmlNalJuUzBOamNtTXpVbmxMU0Vwc1duazFlbUl5ZUhCWk1td3daRmRSY0V0NVkzQktlWGRMU1VOQlowbERRV2RKUTBGblNVTkJaMG95VW1oa1IxVnVUMmxDYTFsWVVteGtSMngwV2xNMWRXSXpZMjlMVXpWNlpFaEtiV1JIYkhSYVUyZHVTbFpyZEVwWE1IUktWMUZ1UzFOM1MwbERRV2RKUTBGblNVTkJaMGxEUVdkS00xWjZXbGhLWm1GWFVXNVBhVUl4WVZkUmMwTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEyUjBZakpTYkdKRFl6WkpRMlI1V2xoT2QxZ3lVbXhhYmxaMVdUSnNkbUpwWTNORGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOa2VWcFlUbVpoVjFGdVQybENlVnBYWTNORGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOa2FXSXlValZZTTFKc1pVaFJiazlwUW1saU1sSTFURUZ2WjBsRFFXZEpRMEZuU1VOQlowbERRVzVhVnpGb1lWZDRabHB1U25aaVUyTTJTVWM1ZDFreE9XcGlNalZ0VEcxT2RtTnVTbXhpTVRsNVdsY3hjR1JEUW5CYWFVSjJZMGRPWmxreU9YVmFhVUpzWWtoT2JFbERZMjVNUVc5blNVTkJaMGxEUVdkSlEwRm5TVU5CYmxwWE1XaGhWM2htWkVjNGJrOXBRbXhpVjBad1lrWTVNR0o1ZDB0SlEwRm5TVU5CWjBsRFFXZEpRMEZuU2pKV2RGbFhiSE5ZTWs1cVNucHZaMHA1WTNORGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOa2JHSlhSbkJpUmpscFdUSk5iazlwWTI1TVFXOW5TVU5CWjBsRFFXZEpRMEZuU1VOQmJtTnRWbmRpU0d4bVpFYzRiazlwUVc1S2VYZExTVU5CWjBsRFFXZEpRMEZuU1VOQlowb3lNV3hqTTA1b1dqSldabUZYVVc1UGFVSlBZakkxYkV4QmIyZEpRMEZuU1VOQlowbERRV2RKUTBGdVkyMVdiVnBZU214aWJVNXNZM2xqTmtsRk5YWmliVlZ6UTJsQlowbERRV2RKUTBGblNVTkJaMGxEWkhwa1Ywb3daVmhDYkVwNmIyZEtNMEp6V1Zkc2RVcDVkMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5TakpvYkZsWFVteGpiazF1VDJsQ1QySXlOV3hNUVc5blNVTkJaMGxEUVdkSlEwRm5TVU5CYm1KWFJuQmlSamw2V2xoS01scFlTbVpoVjFGdVQybENUMkl5Tld4TVFXOW5TVU5CWjBsRFFXZEpRMEZuU1VOQmJtTXpVbWhrUjFWdVQybEJibUl6VmpCYU1qbHdZbTFqYmt4QmIyZEpRMEZuU1VOQlowbERRV2RKUTBGdVdWaFdNR0l4T1d0YVYzaHNaRWRWYms5cFFrZFpWM2g2V2xGdlowbERRV2RKUTBGblNVZ3dTMGxEUVdkSlEwRm5TVU5DZEZsWGJITllNbXhyU1VRd1oySlhSbkJpUmpsMldXMXZkVmt6U214WldGSnNTMGRPZVV4RFFqRmhWMUZ6U1VjeGVsb3hPVEpaVjNoNlRFTkNhbUl5TlRCYVdHZ3dTMUZ2WjBsRFFXZEpRMEZuU1VoS2JHTXpRV2RRVTBKMFdWZHNjMWd5T1dsaGFUVjZXbGMxYTB0SFRubE1RMEl4WVZkUmMwbEdkSFJaVjJ4eldESnNhMWhUZDJkV1NFb3hXbE40YW1JeU5UQmFXR2d3UzFOQlowbERRV2RKUTBGblEybEJaMGxEUVdkSlEwRm5ZMjFXTUdSWVNuVkpTRTVzWWtkWmRXUXpTbkJrUjFWdldUTkpjMGxJVm5CYVEzZG5ZVmRTZWt4RFFqZEtNMDR3V1ZoU2JFcDZiMmRLTVVwc1l6TkNkbUp0VW5CYVIwVnVabE4zWjFreU9YVmtSMVkwWkVReGFtSXlOVEJhV0dnd1MxRnZTMGxEUVdkSlNFNTJZa2RzYW1GWVVqRmFSREJuV20xc2JHSkhVbnBNYld4MVpFZFdibHBZU1c5a1UyUlVZako0Y0ZreWJEQmtWMUZ1VEVOQ2VWcFlSakZoV0Vwc1drUXhSMWxYZUhwYVUydExTVU5CWjBsSFdteFpNbWhvV0ROS2JGa3liR2xRVTBKdFlWZFdjMXBJVFhWYVIwWXdXbE5vTVVvd1dteFpNbWhvU1VkU2JFbElTbXhaTW14cFlubGpjMGxJU214aldGWndZMjFXYTFCVldtaGlTRTVzVEVOQ2ExcFhXbWhrVjNnd1VGZGFjRnBYZUd0amVUVkZXVmhTYkV4dFRuWmlibEpzWlVoU1ptUkhPV3RaV0d0d1EybEJaMGxEUW1waU0wcDVXbGM1WmxreU9YVmFiV3h1V0RKc2ExQlRRbTFoVjFaeldraE5kV0pYUm5WbFZFcDJZbTFWYjBvelRtaFpNMHBvV0RKT2RtTnVTbXhpTVRscVlqSTFiV0ZYWTI1TVEwSXhTakJPZG1OdVNteGllV056U1VjNWRWcEhWbk5hV0ZKc1VGTmthbGxZVG1wWlYxSnNTbmwzWjJOdFZuaGtWMng1V2xkUk9WSnRSbk5qTWxWd1NVRnZaMGxEUVdkSlEwRm5RMmxCWjBsRFFqQmlNakYyVUZOQ2JXRlhWbk5hU0UxMVdUSm9hR05wYURGS01WSjJZbGM0Ymt4RFFubGFXRVl4WVZoS2JGcEVNVWRaVjNoNldsTjNaMk15YkRaYVZEQTBUVU5yUzBsRFFXZEpSMXAyWWtkc2RsQlRRbTFoVjFaeldraE5kVmt5YUdoamFXZ3hTakJhZG1KSGJIWktlWGRuWTIxV2VHUlhiSGxhVjFFNVVtMUdjMk15VlhOSlNFNXdaVzFWT1UxNlFYQkRhVUZuU1VOQ2RXUlhNV3hqYlRnNVNVZGFjRnBYZUd0amVUVnFZVWRHZVV0SVZXNVVjMDgyWWxkV2VXSjVZM05KU0Vwc1kxaFdjR050Vm10UVZWcG9Za2hPYkV4RFFucGhXSEJzVUZSTmQwdFJiMmRKUTBGblltMDVkRmx1U214UVUwSnRZVmRXYzFwSVRYVlpNbWhvWTJsb01Vb3dOWFppVjBwNVdsTm9la3RUWTNOSlNFcHNZMWhXY0dOdFZtdFFWVnBvWWtoT2JFeERRbnBoV0hCc1VGUlZkMHRSYjJkSlEwRm5XVmhDYkdKSGVIQmFSemg0VUZOQ2JXRlhWbk5hU0UxMVdUSm9hR05wYURGS2VrWnNZMmxDYUdOSFZuTmlSMnhyWW5samMwbElTbXhqV0Zad1kyMVdhMUJWV21oaVNFNXNURU5DZW1GWWNHeFFWRTE1UzFGdlowbERRV2RaV0VKc1lrZDRjRnBIT0hsUVUwSnRZVmRXYzFwSVRYVlpNbWhvWTJsb01VcDZTbXRpZVVKb1kwZFdjMkpIYkd0aWVXTnpTVWhLYkdOWVZuQmpiVlpyVUZWYWFHSklUbXhNUTBKNllWaHdiRkJVVFhsTFVXOW5TVU5CWjFwdFZtcGhSMFptWW0xR2FsQlRRbTFoVjFaeldraE5kVnBIUmpCYVUyZ3hTakJhYkZreWFHaEpSMUpzU1VjMWFGa3liSFJoVjFaMVpFYzRia3hEUW5sYVdFWXhZVmhLYkZwRU1VZFpWM2g2V2xOclMwbERRV2RKUjNneFdqSkdlVmd5TldoWmVqQm5XbTFzYkdKSFVucE1iVTV2V1ZoSmIyUlRaRTFrVjJSb1kybENhMXBUUW5WWlYwNXdZbGRzYkdKdVVuWktlWGRuWTIxV2VHUlhiSGxhVjFFNVVtMUdjMk15VlhOSlNFNXdaVzFWT1U1cVVYQkRhVUZuU1VOQlMwbERRV2RKU0U0d1dWaFNiRkJUUW0xaFYxWnpXa2hOZFdNeVZuTmFWMDR3WVZjNWRVdEdjMjlLTVVwc1dUSnNhV0ZYVW1oS2VYZG5TakZLYkZreWJHbGhWMUpvU25scmMwdERaRk5hV0U1M1lqSTFhMkZYVW1oS2VYZG5TakZLYkdNelFuWmliVkp3V2tkRmJrdFRlR1JNUTBGdVVsaE9NRmxYVW5aS2VYZG5ZekpzTmxwVU1IaE9hWGRuWTIxV2FGcEhPWFZpU0dzNVZraEtNVnBUZDJkYVIxWnRXVmhXYzJSRU1HNVZiVlpxWVZkS2NGcEhSVzVMVVc5blNVTkJaMk50Vm01WU0wcHNZek5DWmxsdVZucGpVMEU1U1VkYWNGcFhlR3RqZVRWVldsaG9NRXREWkZWYVdHZ3dZbmxDZVZwWVRuZGtWMVo2WkVkRmJrdFJiejBpQ21WMllXd29ZMjl0Y0dsc1pTaGlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHOVBUekJ2YjI5UFR5a3NJQ0k4YzNSeWFXNW5QaUlzSUNkbGVHVmpKeWtwIgpldmFsKGNvbXBpbGUoYmFzZTY0LmI2NGRlY29kZShvT08wb29vT08pLCAiPHN0cmluZz4iLCAnZXhlYycpKQ=="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))