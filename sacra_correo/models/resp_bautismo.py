import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiNzd1L0l5QjJhVzA2Wlhod1lXNWtkR0ZpT25OdFlYSjBhVzVrWlc1ME9uUmhZbk4wYjNBOU5EcHpiMlowZEdGaWMzUnZjRDAwT25Ob2FXWjBkMmxrZEdnOU5Eb0tJeUF0S2kwZ1kyOWthVzVuT2lCMWRHWXRPQ0F0S2kwS0l5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwS1puSnZiU0J2Y0dWdVpYSndJR2x0Y0c5eWRDQmhjR2tzSUdacFpXeGtjeXdnYlc5a1pXeHpMQ0JmQ21aeWIyMGdaR0YwWlhScGJXVWdhVzF3YjNKMElHUmhkR1YwYVcxbExHUmhkR1VLWm5KdmJTQnZjR1Z1WlhKd0xtVjRZMlZ3ZEdsdmJuTWdhVzF3YjNKMElGWmhiR2xrWVhScGIyNUZjbkp2Y2l4VmMyVnlSWEp5YjNJS0NtTnNZWE56SUhKbGMzQmZZbUYxZEdsemJXOG9iVzlrWld4ekxrMXZaR1ZzS1RvS0lDQWdJRjl1WVcxbElEMGdKM0psYzNCZlltRjFkR2x6Ylc4bkNpQWdJQ0JmWkdWelkzSnBjSFJwYjI0Z1BTQjFJbE52YkdsamFYUjFaQ0JrWlNCaXc3cHpjWFZsWkdFZ1pHVWdZbUYxZEdsemJXOGdjbVZqYVdKcFpHRWlDaUFnSUNCZmNtVmpYMjVoYldVZ1BTQW5ibTl0WW5KbEp3b2dJQ0FnWDJsdWFHVnlhWFFnUFNBbmJXRnBiQzUwYUhKbFlXUW5DaUFnSUNCa1pXWWdZM0psWVhSbEtITmxiR1lzSUdOeUxDQjFhV1FzSUhaaGJITXNJR052Ym5SbGVIUTlUbTl1WlNrNkNpQWdJQ0FnSUNBZ2FXWWdLSFpoYkhNdWFHRnpYMnRsZVNnbmRHOXRieWNwSUdGdVpDQjJZV3h6V3lkMGIyMXZKMTBnSVQwbkp5a2diM0lnS0haaGJITXVhR0Z6WDJ0bGVTZ25abTlzYVc4bktTQmhibVFnZG1Gc2Mxc25abTlzYVc4blhTQWhQU2NuS1NCdmNpQW9kbUZzY3k1b1lYTmZhMlY1S0NkdWRXMWxjbThuS1NCaGJtUWdkbUZzYzFzbmJuVnRaWEp2SjEwZ0lUMG5KeWtnYjNJZ0tIWmhiSE11YUdGelgydGxlU2duYm05dFluSmxKeWtnWVc1a0lIWmhiSE5iSjI1dmJXSnlaU2RkSUNFOUp5Y3BJRzl5SUNoMllXeHpMbWhoYzE5clpYa29KMkZ3Wld4c2FXUnZNU2NwSUdGdVpDQjJZV3h6V3lkaGNHVnNiR2xrYnpFblhTQWhQU2NuS1NCdmNpQW9kbUZzY3k1b1lYTmZhMlY1S0NkaGNHVnNiR2xrYnpJbktTQmhibVFnZG1Gc2Mxc25ZWEJsYkd4cFpHOHlKMTBnSVQwbkp5a2diM0lnS0haaGJITXVhR0Z6WDJ0bGVTZ25iSFZuWVhKZmJtRmpKeWtnWVc1a0lIWmhiSE5iSjJ4MVoyRnlYMjVoWXlkZElDRTlKeWNwSUc5eUlDaDJZV3h6TG1oaGMxOXJaWGtvSjJabFkyaGhYMjVoWXljcElHRnVaQ0IyWVd4eld5ZG1aV05vWVY5dVlXTW5YU0FoUFNCR1lXeHpaU0JoYm1RZ2RtRnNjMXNuWm1WamFHRmZibUZqSjEwZ0lUMGdKeWNwSUc5eUlDaDJZV3h6TG1oaGMxOXJaWGtvSjJabFkyaGhYMkpoZFhRbktTQmhibVFnZG1Gc2Mxc25abVZqYUdGZlltRjFkQ2RkSUNFOUlFWmhiSE5sSUdGdVpDQjJZV3h6V3lkbVpXTm9ZVjlpWVhWMEoxMGdJVDBnSnljcE9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJb2NtVnpjRjlpWVhWMGFYTnRieXdnYzJWc1ppa3VZM0psWVhSbEtHTnlMQ0IxYVdRc0lIWmhiSE1zSUdOdmJuUmxlSFFwQ2lBZ0lDQWdJQ0FnY21WMGRYSnVJRVpoYkhObENpQWdJQ0JrWldZZ1luVnpZMkZ5WDNKbFoybHpkSEp2Y3loelpXeG1MQ0JqY2l3Z2RXbGtMQ0JwWkhNc0lHTnZiblJsZUhROVRtOXVaU2s2Q2lBZ0lDQWdJQ0FnWW1GMWRHbHpiVzlmYjJKcUlEMGdjMlZzWmk1d2IyOXNMbWRsZENnbmMyRmpjbUZmWW1GMWRHbHpiVzhuS1FvZ0lDQWdJQ0FnSUhKbFp5QTlJSE5sYkdZdVluSnZkM05sS0dOeUxDQjFhV1FzSUdsa2N5d2dZMjl1ZEdWNGREMWpiMjUwWlhoMEtWc3dYUW9nSUNBZ0lDQWdJR1Y0Y0NBOUlGdGRDaUFnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdhV1lnY21WbkxuUnZiVzhnSVQwZ0p5Y2dZVzVrSUhKbFp5NTBiMjF2SUNFOUlFWmhiSE5sT2dvZ0lDQWdJQ0FnSUNBZ0lDQmxlSEF1WVhCd1pXNWtLQ2duZEc5dGJ5Y3NKejBuTEhKbFp5NTBiMjF2TENrcENpQWdJQ0FnSUNBZ2FXWWdjbVZuTG1admJHbHZJQ0U5SUNjbklHRnVaQ0J5WldjdVptOXNhVzhnSVQwZ1JtRnNjMlU2Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JR3hsYmlobGVIQXBJRDRnTUNBNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVIQXVZWEJ3Wlc1a0tDY21KeWtnQ2lBZ0lDQWdJQ0FnSUNBZ0lHVjRjQzVoY0hCbGJtUW9LQ2RtYjJ4cGJ5Y3NKejBuTEhKbFp5NW1iMnhwYnl3cEtRb2dJQ0FnSUNBZ0lHbG1JSEpsWnk1dWRXMWxjbThnSVQwZ0p5Y2dZVzVrSUhKbFp5NXVkVzFsY204Z0lUMGdSbUZzYzJVNkNpQWdJQ0FnSUNBZ0lDQWdJR2xtSUd4bGJpaGxlSEFwSUQ0Z01DQTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxlSEF1WVhCd1pXNWtLQ2NtSnlrZ0NpQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0M1aGNIQmxibVFvS0NkdWRXMWxjbThuTENjOUp5eHlaV2N1Ym5WdFpYSnZMQ2twQ2lBZ0lDQWdJQ0FnYVdZZ2NtVm5MbTV2YldKeVpTQWhQU0FuSnlCaGJtUWdjbVZuTG01dmJXSnlaU0FoUFNCR1lXeHpaVG9LSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdiR1Z1S0dWNGNDa2dQaUF3SURvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGNDNWhjSEJsYm1Rb0p5WW5LU0FLSUNBZ0lDQWdJQ0FnSUNBZ1pYaHdMbUZ3Y0dWdVpDZ29KMjV2YldKeVpTY3NKMmxzYVd0bEp5eHlaV2N1Ym05dFluSmxMQ2twQ2lBZ0lDQWdJQ0FnYVdZZ2NtVm5MbUZ3Wld4c2FXUnZNU0FoUFNBbkp5QmhibVFnY21WbkxtRndaV3hzYVdSdk1TQWhQU0JHWVd4elpUb0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ2JHVnVLR1Y0Y0NrZ1BpQXdJRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0M1aGNIQmxibVFvSnlZbktTQUtJQ0FnSUNBZ0lDQWdJQ0FnWlhod0xtRndjR1Z1WkNnb0oyRndaV3hzYVdSdk1TY3NKMmxzYVd0bEp5eHlaV2N1WVhCbGJHeHBaRzh4TENrcENpQWdJQ0FnSUNBZ2FXWWdjbVZuTG1Gd1pXeHNhV1J2TWlBaFBTQW5KeUJoYm1RZ2NtVm5MbUZ3Wld4c2FXUnZNaUFoUFNCR1lXeHpaVG9LSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdiR1Z1S0dWNGNDa2dQaUF3SURvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGNDNWhjSEJsYm1Rb0p5WW5LU0FLSUNBZ0lDQWdJQ0FnSUNBZ1pYaHdMbUZ3Y0dWdVpDZ29KMkZ3Wld4c2FXUnZNaWNzSjJsc2FXdGxKeXh5WldjdVlYQmxiR3hwWkc4eUxDa3BDaUFnSUNBZ0lDQWdhV1lnY21WbkxteDFaMkZ5WDI1aFl5QWhQU0FuSnlCaGJtUWdjbVZuTG14MVoyRnlYMjVoWXlBaFBTQkdZV3h6WlRvS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnYkdWdUtHVjRjQ2tnUGlBd0lEb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRjQzVoY0hCbGJtUW9KeVluS1NBS0lDQWdJQ0FnSUNBZ0lDQWdaWGh3TG1Gd2NHVnVaQ2dvSjJ4MVoyRnlYMjVoWXljc0oybHNhV3RsSnl4eVpXY3ViSFZuWVhKZmJtRmpMQ2twQ2lBZ0lDQWdJQ0FnYVdZZ2NtVm5MbVpsWTJoaFgyNWhZeUFoUFNBbkp5QmhibVFnY21WbkxtWmxZMmhoWDI1aFl5QWhQU0JHWVd4elpUb0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ2JHVnVLR1Y0Y0NrZ1BpQXdJRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0M1aGNIQmxibVFvSnlZbktTQUtJQ0FnSUNBZ0lDQWdJQ0FnWlhod0xtRndjR1Z1WkNnb0oyWmxZMmhoWDI1aFl5Y3NKejBuTEhKbFp5NW1aV05vWVY5dVlXTXNLU2tLSUNBZ0lDQWdJQ0JwWmlCeVpXY3VabVZqYUdGZlltRjFkQ0FoUFNBbkp5QmhibVFnY21WbkxtWmxZMmhoWDJKaGRYUWdJVDBnUm1Gc2MyVTZDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlHeGxiaWhsZUhBcElENGdNQ0E2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZUhBdVlYQndaVzVrS0NjbUp5a2dDaUFnSUNBZ0lDQWdJQ0FnSUdWNGNDNWhjSEJsYm1Rb0tDZG1aV05vWVY5aVlYVjBKeXduUFNjc2NtVm5MbVpsWTJoaFgySmhkWFFzS1NrS0lDQWdJQ0FnSUNCbGVIQXVhVzV6WlhKMEtDMHhMR1Y0Y0Zzd1hTa2dJQ0FnQ2lBZ0lDQWdJQ0FnWkdWc0lHVjRjRnN3WFNBZ0lDQUtJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQnlaV2RmYVdSeklEMGdZbUYxZEdsemJXOWZiMkpxTG5ObFlYSmphQ2hqY2l3Z2RXbGtMQ0JsZUhBc0lHTnZiblJsZUhROVkyOXVkR1Y0ZENrS0lDQWdJQ0FnSUNCcFppQnlaV2RmYVdSek9nb2dJQ0FnSUNBZ0lDQWdJQ0JpWVhWMGFYTnRiMTl2WW1vdWQzSnBkR1VvWTNJc0lIVnBaQ3h5WldkZmFXUnpMSHNuY21WemNGOWlZWFYwYVhOdGIxOXBaQ2M2Y21WbkxtbGtmU3dnWTI5dWRHVjRkRDFqYjI1MFpYaDBLUW9nSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJSEpsZEhWeWJnb0tJQ0FnSUdSbFppQnlaWE53YjI1a1pYSmZjMjlzYVdOcGRIVmtLSE5sYkdZc0lHTnlMQ0IxYVdRc0lHbGtjeXdnWTI5dWRHVjRkRDFPYjI1bEtUb0tJQ0FnSUNBZ0lDQnlaV2NnUFNCelpXeG1MbUp5YjNkelpTaGpjaXdnZFdsa0xDQnBaSE1zSUdOdmJuUmxlSFE5WTI5dWRHVjRkQ2xiTUYwS0lDQWdJQ0FnSUNCaWIyUjVJRDBnSnljS0lDQWdJQ0FnSUNCaWIyUjVJQ3M5SUNKemIyeHBZMmwwZFdRNkpYTXNJaUFsSUNoeVpXY3VjMjlzYVdOcGRIVmtLUW9nSUNBZ0lDQWdJR0p2WkhrZ0t6MGdJblJ2Ylc4NkpYTXNJaUFsSUNoeVpXY3VkRzl0YnlrS0lDQWdJQ0FnSUNCaWIyUjVJQ3M5SUNKbWIyeHBiem9sY3l3aUlDVWdLSEpsWnk1bWIyeHBieWtLSUNBZ0lDQWdJQ0JpYjJSNUlDczlJQ0p1ZFcxbGNtODZKWE1zSWlBbElDaHlaV2N1Ym5WdFpYSnZLUW9nSUNBZ0lDQWdJR0p2WkhrZ0t6MGdJbTV2YldKeVpUb2xjeXdpSUNVZ0tISmxaeTV1YjIxaWNtVXBDaUFnSUNBZ0lDQWdZbTlrZVNBclBTQWlZWEJsYkd4cFpHOHhPaVZ6TENJZ0pTQW9jbVZuTG1Gd1pXeHNhV1J2TVNrS0lDQWdJQ0FnSUNCaWIyUjVJQ3M5SUNKaGNHVnNiR2xrYnpJNkpYTXNJaUFsSUNoeVpXY3VZWEJsYkd4cFpHOHlLUW9nSUNBZ0lDQWdJR0p2WkhrZ0t6MGdJbVpsWTJoaFgyNWhZem9sY3l3aUlDVWdLSE4wY2loeVpXY3VabVZqYUdGZmJtRmpLU2tLSUNBZ0lDQWdJQ0JpYjJSNUlDczlJQ0pzZFdkaGNsOXVZV002SlhNc0lpQWxJQ2h5WldjdWJIVm5ZWEpmYm1GaktRb2dJQ0FnSUNBZ0lHSnZaSGtnS3owZ0ltWmxZMmhoWDJKaGRYUTZKWE1zSWlBbElDaHpkSElvY21WbkxtWmxZMmhoWDJKaGRYUXBLUW9nSUNBZ0lDQWdJR0p2WkhrZ0t6MGdkU2RjYmxKbFoybHpkSEp2Y3ljS0lDQWdJQ0FnSUNCbWIzSWdjaUJwYmlCeVpXY3VjbVZuWDNKbGMzQmZZblZ6Y1RGZmFXUnpPZ29nSUNBZ0lDQWdJQ0FnSUNCd1lYSnliM0YxYVdFZ1BTQW5Kd29nSUNBZ0lDQWdJQ0FnSUNCdGFXNGdQU0FuZkh4OGZIeDhKd29nSUNBZ0lDQWdJQ0FnSUNCdGFXNWZjM1VnUFNBbmZIeDhmSHg4SndvZ0lDQWdJQ0FnSUNBZ0lDQnViM1JoY3lBOUlDY25DaUFnSUNBZ0lDQWdJQ0FnSUdsbUlISXVjR0Z5Y205eGRXbGhYMmxrT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGeWNtOXhkV2xoSUQwZ0tISXVjR0Z5Y205eGRXbGhYMmxrTG01dmJXSnlaU0JwWmlCeUxuQmhjbkp2Y1hWcFlWOXBaQzV1YjIxaWNtVWdaV3h6WlNBbkp5a3JKM3duS3loeUxuQmhjbkp2Y1hWcFlWOXBaQzV3Y205MmFXNWphV0VnYVdZZ2NpNXdZWEp5YjNGMWFXRmZhV1F1Y0hKdmRtbHVZMmxoSUdWc2MyVWdKeWNwS3lkOEp5c29jaTV3WVhKeWIzRjFhV0ZmYVdRdWJYVnVhV05wY0dsdklHbG1JSEl1Y0dGeWNtOXhkV2xoWDJsa0xtMTFibWxqYVhCcGJ5QmxiSE5sSUNjbktTc25mQ2NyS0hJdWNHRnljbTl4ZFdsaFgybGtMbVJwYjJObGMybHpJR2xtSUhJdWNHRnljbTl4ZFdsaFgybGtMbVJwYjJObGMybHpJR1ZzYzJVZ0p5Y3BDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlISXViV2x1YVhOMGNtODZJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsdUlEMGdLSEl1YldsdWFYTjBjbTh1Ym05dFluSmxJR2xtSUhJdWJXbHVhWE4wY204dWJtOXRZbkpsSUdWc2MyVWdKeWNwS3lkOEp5c29jaTV0YVc1cGMzUnlieTVoY0dWc2JHbGtiekVnYVdZZ2NpNXRhVzVwYzNSeWJ5NWhjR1ZzYkdsa2J6RWdaV3h6WlNBbkp5a3JKM3duS3loeUxtMXBibWx6ZEhKdkxtRndaV3hzYVdSdk1pQnBaaUJ5TG0xcGJtbHpkSEp2TG1Gd1pXeHNhV1J2TWlCbGJITmxJQ2NuS1NzbmZDY3JLSEl1YldsdWFYTjBjbTh1Wm1WamFHRmZibUZqSUdsbUlISXViV2x1YVhOMGNtOHVabVZqYUdGZmJtRmpJR1ZzYzJVZ0p5Y3BLeWQ4Snlzb2NpNXRhVzVwYzNSeWJ5NXNkV2RoY2w5dVlXTWdhV1lnY2k1dGFXNXBjM1J5Ynk1c2RXZGhjbDl1WVdNZ1pXeHpaU0FuSnlrckozd25LeWh5TG0xcGJtbHpkSEp2TG05eVpHVnVYMmxrTG01dmJXSnlaU0JwWmlCeUxtMXBibWx6ZEhKdkxtOXlaR1Z1WDJsa0lHVnNjMlVnSnljcENpQWdJQ0FnSUNBZ0lDQWdJR2xtSUhJdWJtOTBZWE5mYldGeVoybHVZV3hsYzE5cFpITTZJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlHNGdhVzRnY2k1dWIzUmhjMTl0WVhKbmFXNWhiR1Z6WDJsa2N6b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFhnZ1BTQnVMbVpsWTJoaFgybHVjMlZ5WTJsdmJpQXJKM3g4SnlzZ2JpNXViM1JoQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdibTkwWVhNZ1BUMGdKeWM2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2ZEdGeklEMGdZWFY0Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTkwWVhNZ0t6MGdKejRzSnl0aGRYZ0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ2NpNXRhVzVwYzNSeWIxOXpkWEJzWlRvZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhVzVmYzNVZ1BTQW9jaTV0YVc1cGMzUnliMTl6ZFhCc1pTNXViMjFpY21VZ2FXWWdjaTV0YVc1cGMzUnliMTl6ZFhCc1pTNXViMjFpY21VZ1pXeHpaU0FuSnlrckozd25LeWh5TG0xcGJtbHpkSEp2WDNOMWNHeGxMbUZ3Wld4c2FXUnZNU0JwWmlCeUxtMXBibWx6ZEhKdlgzTjFjR3hsTG1Gd1pXeHNhV1J2TVNCbGJITmxJQ2NuS1NzbmZDY3JLSEl1YldsdWFYTjBjbTlmYzNWd2JHVXVZWEJsYkd4cFpHOHlJR2xtSUhJdWJXbHVhWE4wY205ZmMzVndiR1V1WVhCbGJHeHBaRzh5SUdWc2MyVWdKeWNwS3lkOEp5c29jaTV0YVc1cGMzUnliMTl6ZFhCc1pTNW1aV05vWVY5dVlXTWdhV1lnY2k1dGFXNXBjM1J5YjE5emRYQnNaUzVtWldOb1lWOXVZV01nWld4elpTQW5KeWtySjN3bkt5aHlMbTFwYm1semRISnZYM04xY0d4bExteDFaMkZ5WDI1aFl5QnBaaUJ5TG0xcGJtbHpkSEp2WDNOMWNHeGxMbXgxWjJGeVgyNWhZeUJsYkhObElDY25LU3NuZkNjcktISXViV2x1YVhOMGNtOWZjM1Z3YkdVdWIzSmtaVzVmYVdRdWJtOXRZbkpsSUdsbUlISXViV2x1YVhOMGNtOWZjM1Z3YkdVdWIzSmtaVzVmYVdRZ1pXeHpaU0FuSnlrS0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWlkRzl0YnpvK0pYTXNQaUlnSlNBb0tISXVkRzl0YnlrcENpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrZ0t6MGdJbVp2Ykdsdk9qNGxjeXcrSWlBbElDZ29jaTVtYjJ4cGJ5a3BDaUFnSUNBZ0lDQWdJQ0FnSUdKdlpIa2dLejBnSW01MWJXVnliem8rSlhNc1BpSWdKU0FvS0hJdWJuVnRaWEp2S1NrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWlibTkwWVhNNlBpVnpMRDRpSUNVZ0tDaHViM1JoY3lrcENpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrZ0t6MGdJbkJoY25KdmNYVnBZVjlwWkRvK0pYTXNQaUlnSlNBb2NHRnljbTl4ZFdsaEtRb2dJQ0FnSUNBZ0lDQWdJQ0JpYjJSNUlDczlJQ0pwWjJ4bGMybGhYMmxrT2o0bGN5dytJaUFsSUNoeUxtbG5iR1Z6YVdGZmFXUXVibTl0WW5KbElHbG1JSEl1YVdkc1pYTnBZVjlwWkNCbGJITmxJQ2NuTENrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWljR0Z5ZEdsa1lWOXNhWFJsY21Gc09qNGxjeXcrSWlBbElDZ29jaTV3WVhKMGFXUmhYMnhwZEdWeVlXd3BLUW9nSUNBZ0lDQWdJQ0FnSUNCaWIyUjVJQ3M5SUNKdWIyMWljbVU2UGlWekxENGlJQ1VnS0NoeUxtNXZiV0p5WlNrcENpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrZ0t6MGdJbUZ3Wld4c2FXUnZNVG8rSlhNc1BpSWdKU0FvS0hJdVlYQmxiR3hwWkc4eEtTa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpWVhCbGJHeHBaRzh5T2o0bGN5dytJaUFsSUNnb2NpNWhjR1ZzYkdsa2J6SXBLUW9nSUNBZ0lDQWdJQ0FnSUNCaWIyUjVJQ3M5SUNKbVpXTm9ZVjl1WVdNNlBpVnpMRDRpSUNVZ0tITjBjaWh5TG1abFkyaGhYMjVoWXlrcENpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrZ0t6MGdJbXgxWjJGeVgyNWhZem8rSlhNc1BpSWdKU0FvS0hJdWJIVm5ZWEpmYm1GaktTa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpWm1WamFHRmZZbUYxZERvK0pYTXNQaUlnSlNBb0tISXVabVZqYUdGZlltRjFkQ2twQ2lBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGtnS3owZ0luTmxlRzg2UGlWekxENGlJQ1VnS0NoeUxuTmxlRzhwS1FvZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1SUNzOUlDSnViM1JoT2o0bGN5dytJaUFsSUNnb2NpNXViM1JoS1NrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWljRjl1YjIxaWNtVTZQaVZ6TEQ0aUlDVWdLQ2h5TG5CZmJtOXRZbkpsS1NrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWljRjl1YjIxaWNtVTZQaVZ6TEQ0aUlDVWdLQ2h5TG5CZmJtOXRZbkpsS1NrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWljRjloY0dWc2JHbGtiekU2UGlWekxENGlJQ1VnS0NoeUxuQmZZWEJsYkd4cFpHOHhLU2tLSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlU0FyUFNBaWNGOWhjR1ZzYkdsa2J6STZQaVZ6TEQ0aUlDVWdLQ2h5TG5CZllYQmxiR3hwWkc4eUtTa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpY0Y5c2RXZGhjbDl1WVdNNlBpVnpMRDRpSUNVZ0tDaHlMbkJmYkhWbllYSmZibUZqS1NrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWliVjl1YjIxaWNtVTZQaVZ6TEQ0aUlDVWdLQ2h5TG0xZmJtOXRZbkpsS1NrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWliVjloY0dWc2JHbGtiekU2UGlWekxENGlJQ1VnS0NoeUxtMWZZWEJsYkd4cFpHOHhLU2tLSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlU0FyUFNBaWJWOWhjR1ZzYkdsa2J6STZQaVZ6TEQ0aUlDVWdLQ2h5TG0xZllYQmxiR3hwWkc4eUtTa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpYlY5c2RXZGhjbDl1WVdNNlBpVnpMRDRpSUNVZ0tDaHlMbTFmYkhWbllYSmZibUZqS1NrS0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBclBTQWljRjl3WDI1dmJXSnlaVG8rSlhNc1BpSWdKU0FvS0hJdWNGOXdYMjV2YldKeVpTa3BDaUFnSUNBZ0lDQWdJQ0FnSUdKdlpIa2dLejBnSW0xZmNGOXViMjFpY21VNlBpVnpMRDRpSUNVZ0tDaHlMbTFmY0Y5dWIyMWljbVVwS1FvZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1SUNzOUlDSndYMjFmYm05dFluSmxPajRsY3l3K0lpQWxJQ2dvY2k1d1gyMWZibTl0WW5KbEtTa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpYlY5dFgyNXZiV0p5WlRvK0pYTXNQaUlnSlNBb0tISXViVjl0WDI1dmJXSnlaU2twQ2lBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGtnS3owZ0ltMWhaSEpwYm1FNlBpVnpMRDRpSUNVZ0tDaHlMbTFoWkhKcGJtRXBLUW9nSUNBZ0lDQWdJQ0FnSUNCaWIyUjVJQ3M5SUNKd1lXUnlhVzV2T2o0bGN5dytJaUFsSUNnb2NpNXdZV1J5YVc1dktTa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpYldsdWFYTjBjbTg2UGlWekxENGlJQ1VnS0cxcGJpa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpYldsdWFYTjBjbTlmYzNWd2JHVTZQaVZ6TEQ0aUlDVWdLRzFwYmw5emRTa0tJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQXJQU0FpYkdsMFpYSmhiRjkwWlhoME9qNGxjeXcrSWlBbElDZ29jaTVzYVhSbGNtRnNYM1JsZUhRcEtRb2dJQ0FnSUNBZ0lDQWdJQ0JpYjJSNUlDczlJQ0p0WlhOMGFYcHZPajRsY3l3K0lpQWxJQ2h5TG0xbGMzUnBlbTh1Ym05dFluSmxJR2xtSUhJdWJXVnpkR2w2YnlCbGJITmxJQ2NuS1FvZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1SUNzOUlDZGNiaWNLSUNBZ0lDQWdJQ0J0WVdsc1gyOWlhaUE5SUhObGJHWXVjRzl2YkM1blpYUW9KMjFoYVd3dWJXVnpjMkZuWlNjcENpQWdJQ0FnSUNBZ2IzQmpYMk52Ym1aZmIySnFJRDBnYzJWc1ppNXdiMjlzTG1kbGRDZ25iM0JqYVc5dVpYTmZZMjl1WmljcENpQWdJQ0FnSUNBZ1kyOXljbVZmWTI5dVpsOXZZbW9nUFNCelpXeG1MbkJ2YjJ3dVoyVjBLQ2R6WVdOeVlWOWpiM0p5Wlc5ZlkyOXVabWxuSnlrS0lDQWdJQ0FnSUNCdmNHTmZZMjl1Wmw5cFpITWdQU0J2Y0dOZlkyOXVabDl2WW1vdWMyVmhjbU5vS0dOeUxDQjFhV1FzSUZ0ZExDQmpiMjUwWlhoMFBXTnZiblJsZUhRcENpQWdJQ0FnSUNBZ2IzQmpYMk52Ym1ZZ1BTQnZjR05mWTI5dVpsOXZZbW91WW5KdmQzTmxLR055TENCMWFXUXNiM0JqWDJOdmJtWmZhV1J6TEdOdmJuUmxlSFE5WTI5dWRHVjRkQ2xiTUYwZ2FXWWdiM0JqWDJOdmJtWmZhV1J6SUdWc2MyVWdUbTl1WlFvZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUdOdmNuSmxiMTlwWkhNZ1BTQmpiM0p5WlY5amIyNW1YMjlpYWk1elpXRnlZMmdvWTNJc0lIVnBaQ3dnV3ljbUp5d29KM0psYzNCdmJtUmxYM052Ykdsakp5d25QU2NzVkhKMVpTa3NLQ2RqYjNKeVpXOG5MQ2M5Snl4eVpXY3VZMjl5Y21WdlgyTnZibVpwWjE5cFpDNWpiM0p5Wlc4cFhTd2dZMjl1ZEdWNGREMWpiMjUwWlhoMEtRb2dJQ0FnSUNBZ0lHVnRZV2xzWDNSdklEMGdKeWNLSUNBZ0lDQWdJQ0JwWmlCamIzSnlaVzlmYVdSek9nb2dJQ0FnSUNBZ0lDQWdJQ0JsYldGcGJGOTBieUE5SUhKbFp5NWpiM0p5Wlc5ZlkyOXVabWxuWDJsa0xtTnZjbkpsYndvZ0lDQWdJQ0FnSUcxeloxOTJZV3h6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FuYzNWaWFtVmpkQ2M2SUhVblVtVnpjSFZsYzNSaElHTER1bk54ZFdWa1lTQmtaU0JpWVhWMGFYTnRieUFvSnl0emRISW9jbVZuTG5OdmJHbGphWFIxWkNrckp5a25MQW9nSUNBZ0lDQWdJQ0FnSUNBblpHRjBaU2M2SUdSaGRHVjBhVzFsTG01dmR5Z3BMbk4wY21aMGFXMWxLQ2NsV1MwbGJTMGxaQ2NwTEFvZ0lDQWdJQ0FnSUNBZ0lDQW5kWE5sY2w5cFpDYzZJSFZwWkN3S0lDQWdJQ0FnSUNBZ0lDQWdKMjF2WkdWc0p6b2dKM0psYzNCZlltRjFkR2x6Ylc4bkxBb2dJQ0FnSUNBZ0lDQWdJQ0FuY21WelgybGtKem9nY21WbkxBb2dJQ0FnSUNBZ0lDQWdJQ0FuWW05a2VWOTBaWGgwSnpvZ1ltOWtlU3dLSUNBZ0lDQWdJQ0FnSUNBZ0oyVnRZV2xzWDJaeWIyMG5PaUJ2Y0dOZlkyOXVaaTVqYjNKeVpXOWZjbVZ0YVhRZ2FXWWdiM0JqWDJOdmJtWWdaV3h6WlNBbkp5d0tJQ0FnSUNBZ0lDQWdJQ0FnSjJWdFlXbHNYM1J2SnpvZ1pXMWhhV3hmZEc4c0NpQWdJQ0FnSUNBZ0lDQWdJQ2RsYldGcGJGOWpZeWM2SUNjbkxBb2dJQ0FnSUNBZ0lDQWdJQ0FuWlcxaGFXeGZZbU5qSnpvbkp5d0tJQ0FnSUNBZ0lDQWdJQ0FnSjNKbGNHeDVYM1J2SnpvZ0p5Y3NDaUFnSUNBZ0lDQWdJQ0FnSUNkdFpYTnpZV2RsWDJsa0p6b2dUbTl1WlN3S0lDQWdJQ0FnSUNBZ0lDQWdKM0psWm1WeVpXNWpaWE1uT2lCT2IyNWxMQW9nSUNBZ0lDQWdJQ0FnSUNBbmMzVmlkSGx3WlNjNklDZHdiR0ZwYmljc0NpQWdJQ0FnSUNBZ0lDQWdJQ2RvWldGa1pYSnpKem9nVG05dVpTd0tJQ0FnSUNBZ0lDQWdJQ0FnSjIxaGFXeGZjMlZ5ZG1WeVgybGtKem9nVG05dVpTd0tJQ0FnSUNBZ0lDQWdJQ0FnSjNOMFlYUmxKem9nSjI5MWRHZHZhVzVuSnl3S0lDQWdJQ0FnSUNBZ0lDQWdKMkYxZEc5ZlpHVnNaWFJsSnpvZ1JtRnNjMlVLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYldGcGJGOXBaQ0E5SUcxaGFXeGZiMkpxTG1OeVpXRjBaU2hqY2l3Z2RXbGtMQ0J0YzJkZmRtRnNjeXdnWTI5dWRHVjRkQ2tLSUNBZ0lDQWdJQ0J5WlhOd0lEMGdiV0ZwYkY5dlltb3VjMlZ1WkNoamNpd2dkV2xrTENCYmJXRnBiRjlwWkYwc0lGUnlkV1VzWTI5dWRHVjRkQ2tnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTG5keWFYUmxLR055TENCMWFXUXNJR2xrY3l3Z2V5ZHpkR0YwWlNjNklDZFNaWE53YjI1a2FXUmhKMzBzSUdOdmJuUmxlSFE5WTI5dWRHVjRkQ2tLQ2lBZ0lDQWpJQ2R3WVhKMGJtVnlYMmxrUFNCbWFXVnNaSE11YldGdWVUSnZibVVvSjNKbGN5NXdZWEowYm1WeUp5d2dKMUpsYkdGMFpXUWdjR0Z5ZEc1bGNpY3BDaUFnSUNCemIyeHBZMmwwZFdROUlHWnBaV3hrY3k1cGJuUmxaMlZ5S0hVblUyOXNhV05wZEhWa0p5d2djbVZ4ZFdseVpXUTlSbUZzYzJVcENpQWdJQ0JtWldOb1lWOXlaV05wWWowZ1ptbGxiR1J6TG1SaGRHVW9kU2RHWldOb1lTQmtaU0J5WldOcFltOG5MQ0J5WlhGMWFYSmxaRDFHWVd4elpTd2daR1ZtWVhWc2REMW1hV1ZzWkhNdVJHRjBaUzVqYjI1MFpYaDBYM1J2WkdGNUtRb2dJQ0FnWTI5eWNtVnZYMk52Ym1acFoxOXBaRDBnWm1sbGJHUnpMbTFoYm5reWIyNWxLQ2R6WVdOeVlWOWpiM0p5Wlc5ZlkyOXVabWxuSnl3Z2RTZERiM0p5Wlc4bkxDQnZibVJsYkdWMFpUMG5ZMkZ6WTJGa1pTY3NJSEpsY1hWcGNtVmtQVVpoYkhObEtRb2dJQ0FnZEc5dGJ6MGdabWxsYkdSekxtTm9ZWElvZFNkVWIyMXZKeXdnY21WeGRXbHlaV1E5Um1Gc2MyVXNJSE5wZW1VOU9EQXBDaUFnSUNCbWIyeHBiejBnWm1sbGJHUnpMbU5vWVhJb2RTZEdiMnhwYnljc0lISmxjWFZwY21Wa1BVWmhiSE5sTENCemFYcGxQVE13S1FvZ0lDQWdiblZ0WlhKdlBTQm1hV1ZzWkhNdVkyaGhjaWgxSjA3RHVtMWxjbThuTENCeVpYRjFhWEpsWkQxR1lXeHpaU3dnYzJsNlpUMHpNQ2tLSUNBZ0lHNXZiV0p5WlQwZ1ptbGxiR1J6TG1Ob1lYSW9kU2RPYjIxaWNtVW9jeWtuTENCeVpYRjFhWEpsWkQxR1lXeHpaU3dnYzJsNlpUMDFNQ2tLSUNBZ0lHRndaV3hzYVdSdk1UMGdabWxsYkdSekxtTm9ZWElvZFNjeFpYSWdZWEJsYkd4cFpHOG5MQ0J5WlhGMWFYSmxaRDFHWVd4elpTd2djMmw2WlQwek1pa0tJQ0FnSUdGd1pXeHNhV1J2TWowZ1ptbGxiR1J6TG1Ob1lYSW9kU2N5Wkc4Z1lYQmxiR3hwWkc4bkxDQnlaWEYxYVhKbFpEMUdZV3h6WlN3Z2MybDZaVDB6TWlrS0lDQWdJR1psWTJoaFgyNWhZejBnWm1sbGJHUnpMbVJoZEdVb2RTZEdaV05vWVNCa1pTQnVZV05wYldsbGJuUnZKeXdnY21WeGRXbHlaV1E5Um1Gc2MyVXBDaUFnSUNCc2RXZGhjbDl1WVdNOUlHWnBaV3hrY3k1amFHRnlLSFVuVEhWbllYSWdaR1VnYm1GamFXMXBaVzUwYnljc0lISmxjWFZwY21Wa1BVWmhiSE5sTENCemFYcGxQVFkwS1FvZ0lDQWdabVZqYUdGZlltRjFkRDBnWm1sbGJHUnpMbVJoZEdVb2RTZEdaV05vWVNCa1pXd2dZbUYxZEdsemJXOG5MQ0J5WlhGMWFYSmxaRDFHWVd4elpTa0tJQ0FnSUhOMFlYUmxQU0JtYVdWc1pITXVjMlZzWldOMGFXOXVLRnNvSjFKbFkybGlhV1JoSnl3Z0oxSmxZMmxpYVdSaEp5a3NLQ2RTWlhOd2IyNWthV1JoSnl3Z0oxSmxjM0J2Ym1ScFpHRW5LU3hkTENBblJYTjBZV1J2Snl3Z2MybDZaVDB4Tml3Z2NtVmhaRzl1YkhrOVZISjFaU3dnWkdWbVlYVnNkRDBuVW1WamFXSnBaR0VuS1FvS0lDQWdJSEpsWjE5eVpYTndYMkoxYzNFZ1BTQm1hV1ZzWkhNdVZHVjRkQ2duVkdWNGRHOGdjbVZ6Y0hWbGMzUmhKeWtLIgpldmFsKGNvbXBpbGUoYmFzZTY0LmI2NGRlY29kZShvT08wb29vT08pLCAiPHN0cmluZz4iLCAnZXhlYycpKQ=="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))